import httpx
from typing import Optional, Dict, Any, List

from config.settings import settings
from utils.logger import get_logger
from models.bitrix_models import BitrixUser

logger = get_logger(__name__)

class BitrixClient:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Bitrix24 REST API.
    """
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Bitrix24"""
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._group_storage_cache = {}  # {group_id: storage_id}
        self._group_folder_cache = {}   # {storage_id: folder_id}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ env
        self.webhook_url = settings.bitrix_webhook_url
        if not self.webhook_url:
            raise ValueError("BITRIX_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã
        self.base_url = self._extract_base_url(self.webhook_url)

    def _extract_base_url(self, webhook_url: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL Bitrix24 –∏–∑ webhook URL.
        
        Args:
            webhook_url: URL –≤–µ–±—Ö—É–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://domain/rest/1/webhook_code/)
            
        Returns:
            –ë–∞–∑–æ–≤—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://domain)
        """
        import re
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL –∏–∑ webhook
        # –§–æ—Ä–º–∞—Ç webhook: https://domain/rest/1/webhook_code/
        match = re.match(r'(https?://[^/]+)', webhook_url)
        if match:
            return match.group(1)
        else:
            # Fallback –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            return webhook_url.split('/rest/')[0] if '/rest/' in webhook_url else webhook_url.rstrip('/')

    def get_file_url(self, file_id: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞ –≤ Bitrix24.
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'n')
            
        Returns:
            URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
        """
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'n' –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_file_id = file_id.replace('n', '') if file_id.startswith('n') else file_id
        return f"{self.base_url}/bitrix/tools/disk/focus.php?objectId={clean_file_id}&cmd=show&action=showObjectInGrid&ncc=1"

    async def _request(self, method: str, api_method: str, params: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ Bitrix24 API.
        
        :param method: HTTP –º–µ—Ç–æ–¥ ('GET', 'POST', etc.)
        :param api_method: –ú–µ—Ç–æ–¥ Bitrix24 API (e.g., 'sonet_group.user.add')
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        """
        url = f"{self.webhook_url.rstrip('/')}/{api_method}"
        
        async with httpx.AsyncClient() as client:
            try:
                if method.upper() == 'POST':
                    response = await client.post(url, json=params)
                else:
                    response = await client.get(url, params=params)
                
                response.raise_for_status()
                data = response.json()

                if 'error' in data:
                    logger.error(f"–û—à–∏–±–∫–∞ API Bitrix24: {data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return None
                
                return data.get('result')
            
            except httpx.HTTPStatusError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ API Bitrix24: {e.response.status_code} - {e.response.text}")
                return None
            except httpx.RequestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24 API: {e}")
                return None

    async def add_user_to_workgroup(self, group_id: int, user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É.
        
        :param group_id: ID —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'sonet_group.user.add'
        params = {
            'GROUP_ID': group_id,
            'USER_ID': user_id
        }
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø—É {group_id} –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        
        if result:
            logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_id}.")
            return True
        return False

    async def create_workgroup(self, group_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–ø—Ä–æ–µ–∫—Ç).
        
        :param group_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø—ã (NAME, DESCRIPTION, OWNER_ID, USER_IDS –∏ —Ç.–¥.)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
        """
        api_method = 'sonet_group.create'
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        params = {
            'VISIBLE': 'Y',
            'OPENED': 'N',  # N - –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
            'PROJECT': 'N',  # N - —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ø—Ä–æ–µ–∫—Ç
            **group_data  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        }
        
        group_name = group_data.get('NAME', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã '{group_name}' –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        if result:
            # result –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–º (ID), —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–º
            if isinstance(result, (int, str)):
                group_id = str(result)
                logger.success(f"–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {group_id}.")
                return {"ID": group_id}
            elif isinstance(result, dict) and "ID" in result:
                logger.success(f"–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {result['ID']}.")
                return result
            else:
                logger.success(f"–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
                return result
        return None

    async def create_task(self, title: str, description: str, responsible_id: int, group_id: int, **kwargs) -> Optional[int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
        
        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        :param responsible_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        :param group_id: ID –ø—Ä–æ–µ–∫—Ç–∞ (—Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã)
        :param kwargs: –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ (tags, priority, etc.)
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
        """
        api_method = 'tasks.task.add'
        params = {
            'fields': {
                'TITLE': title,
                'DESCRIPTION': description,
                'RESPONSIBLE_ID': responsible_id,
                'GROUP_ID': group_id,
                **kwargs # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            }
        }
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{title}' –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        if result and 'task' in result:
            task_id = result['task']['id']
            logger.success(f"–ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {task_id}.")
            return task_id
        return None

    async def update_task(self, task_id: int, **kwargs) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :param kwargs: –ü–æ–ª—è –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (title, description, responsible_id, etc.)
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'tasks.task.update'
        params = {
            'taskId': task_id,
            'fields': kwargs
        }
        
        task_title = kwargs.get('TITLE', f'ID {task_id}')
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task_title}' (ID: {task_id}) –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–ó–∞–¥–∞—á–∞ '{task_title}' (ID: {task_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É '{task_title}' (ID: {task_id})")
            return False

    async def get_workgroup_list(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        """
        all_groups = []
        page = 1
        max_pages = 5  # –î–æ 250 –≥—Ä—É–ø–ø (5 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ 50)
        
        try:
            logger.info("üì• –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24 —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...")
            
            while page <= max_pages:
                # –§–æ—Ä–º—É–ª–∞ –¥–ª—è start: start = (N-1) * 50, –≥–¥–µ N ‚Äî –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                start = (page - 1) * 50
                
                request_params = {
                    'start': start
                }
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: start={start}")
                
                # –ú–µ—Ç–æ–¥ sonet_group.get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                groups_data = await self._request('GET', 'sonet_group.get', request_params)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not groups_data or not isinstance(groups_data, list):
                    logger.warning(f"  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {groups_data}")
                    break
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –≥—Ä—É–ø–ø –Ω–µ—Ç
                if not groups_data:
                    logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    break
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(groups_data)} –≥—Ä—É–ø–ø")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                all_groups.extend(groups_data)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 50 –≥—Ä—É–ø–ø, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(groups_data) < 50:
                    logger.info(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(groups_data)} < 50, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                
                page += 1
            
            logger.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_groups)} —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ {page-1} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return all_groups
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24: {e}")
        return []
        
    async def get_task_list(self, group_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ.
        """
        api_method = 'tasks.task.list'
        params = {
            'filter': {'GROUP_ID': group_id},
            'select': ['ID', 'TITLE', 'STATUS']
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {group_id} –≤ Bitrix24...")
        result = await self._request('GET', api_method, params)
        if result and 'tasks' in result:
            logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result['tasks'])} –∑–∞–¥–∞—á.")
            return result['tasks']
        return []

    async def get_workgroup_users(self, group_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã.
        """
        api_method = 'sonet_group.user.get'
        params = {'ID': group_id}
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –∏–∑ Bitrix24...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}.")
            return result
        return []

    async def find_user_by_email(self, email: str) -> Optional[BitrixUser]:
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            response = await self._request('GET', 'user.get', {
                'filter': {'EMAIL': email}
            })
            
            if response and isinstance(response, list) and response:
                user_data = response[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                return BitrixUser(**user_data)
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email {email}: {e}")
            return None

    async def create_user(self, user_data: dict) -> Optional[BitrixUser]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Bitrix24"""
        try:
            response = await self._request('POST', 'user.add', user_data)
            
            if response:
                # response —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è user_id
                user_id = response
                full_user = await self.get_user(user_id)
                if full_user:
                    logger.success(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.get('EMAIL')} (ID: {user_id})")
                    return full_user
            
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('EMAIL', 'unknown')}")
            return None
            
        except Exception as e:
            error_msg = str(e)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ
            if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_msg or "already exists" in error_msg.lower():
                existing_user = await self.find_user_by_email(user_data.get('EMAIL'))
                if existing_user:
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {existing_user.EMAIL} (ID: {existing_user.ID})")
                    return existing_user
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('EMAIL')}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('EMAIL', 'unknown')}: {e}")
            
            return None

    async def update_user(self, user_id: str, user_data: dict) -> Optional[BitrixUser]:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Bitrix24"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {'ID': user_id, **user_data}
            
            response = await self._request('POST', 'user.update', update_data)
            
            if response is True:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                updated_user = await self.get_user(user_id)
                if updated_user:
                    return updated_user
            
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
            return None

    async def get_users(self, params: Optional[dict] = None) -> list[BitrixUser]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

        Args:
            params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ BitrixUser.
        """
        all_users = []
        page = 1
        max_pages = 4  # –î–æ 200 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 50)
        
        try:
            logger.info("üì• –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24 —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...")
            
            while page <= max_pages:
                # –§–æ—Ä–º—É–ª–∞ –¥–ª—è start: start = (N-1) * 50, –≥–¥–µ N ‚Äî –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                start = (page - 1) * 50
                
                request_params = {
                    'ADMIN_MODE': 'True',  # –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    'start': start
                }
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: start={start}")
                
            # –ú–µ—Ç–æ–¥ user.get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                users_data = await self._request('GET', 'user.get', request_params)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not users_data or not isinstance(users_data, list):
                    logger.warning(f"  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {users_data}")
                    break
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
                if not users_data:
                    logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    break
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                all_users.extend(users_data)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(users_data) < 50:
                    logger.info(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(users_data)} < 50, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                
                page += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–±—ä–µ–∫—Ç—ã BitrixUser
            users = [BitrixUser.model_validate(u) for u in all_users]
            
            logger.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {page-1} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24: {e}")
            return []

    async def get_user(self, user_id: int) -> Optional[BitrixUser]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
        try:
            response = await self._request('GET', 'user.get', {'ID': user_id})
            
            if response and isinstance(response, list) and response:
                user_data = response[0]
                return BitrixUser(**user_data)
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}")
            return None

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–¢–ê–î–ò–Ø–ú–ò –ó–ê–î–ê–ß ==========
    
    async def get_task_stages(self, entity_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        :param entity_id: ID –≥—Ä—É–ø–ø—ã (—Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã)
        :return: –°–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π
        """
        api_method = 'task.stages.get'
        params = {'entityId': entity_id}
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞–¥–∏–π –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç–∞–¥–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}.")
            return result
        return []

    async def create_task_stage(self, entity_id: int, title: str, sort: int = 100, 
                               color: str = "0066CC") -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        :param entity_id: ID –≥—Ä—É–ø–ø—ã (—Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã)
        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏
        :param sort: –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        :param color: –¶–≤–µ—Ç —Å—Ç–∞–¥–∏–∏ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π)
        :return: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏ –∏–ª–∏ None
        """
        api_method = 'task.stages.add'
        params = {
            'fields': {
                'TITLE': title,
                'SORT': sort,
                'COLOR': color,
                'ENTITY_ID': entity_id,
                'ENTITY_TYPE': 'GROUP'  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç–∞–¥–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
            }
        }
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ '{title}' –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–°—Ç–∞–¥–∏—è '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}.")
            return result
        return None

    async def update_task_stage(self, stage_id: int, fields: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞.
        
        :param stage_id: ID —Å—Ç–∞–¥–∏–∏
        :param fields: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'task.stages.update'
        params = {
            'id': stage_id,
            'fields': fields
        }
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ {stage_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–°—Ç–∞–¥–∏—è {stage_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return True
        return False

    async def delete_task_stage(self, stage_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞.
        
        :param stage_id: ID —Å—Ç–∞–¥–∏–∏
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'task.stages.delete'
        params = {'id': stage_id}
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ {stage_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–°—Ç–∞–¥–∏—è {stage_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            return True
        return False

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ß–ï–ö-–õ–ò–°–¢–ê–ú–ò –ó–ê–î–ê–ß ==========
    
    async def create_checklist_group(self, task_id: int, title: str) -> Optional[int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É —á–µ–∫-–ª–∏—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ–∫-–ª–∏—Å—Ç–∞
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
        """
        api_method = 'task.checklistitem.add'
        # –ì—Ä—É–ø–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å PARENT_ID = 0
        params = {
            'taskId': task_id,
            'fields': {
                'TITLE': title,
                'PARENT_ID': 0,  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ (–∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç)
                'IS_COMPLETE': False,
                'SORT_INDEX': '10'
            }
        }
        
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            group_id = result
            logger.debug(f"–ì—Ä—É–ø–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID {group_id}")
            return group_id
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return None

    async def add_checklist_item(self, task_id: int, title: str, is_complete: bool = False, 
                                parent_id: int = None) -> Optional[int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param title: –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
        :param is_complete: –í—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        :param parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø—ã)
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        api_method = 'task.checklistitem.add'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–ª–µ–º TITLE
        params = {
            'taskId': task_id,
            'fields': {
                'TITLE': title,
                'IS_COMPLETE': is_complete
            }
        }
        
        if parent_id:
            params['fields']['PARENT_ID'] = parent_id
        
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ '{title}' –≤ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            item_id = result
            logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' —Å–æ–∑–¥–∞–Ω —Å ID {item_id}")
            return item_id
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return None

    async def get_task_checklists(self, task_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :return: –°–ø–∏—Å–æ–∫ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏
        """
        api_method = 'task.checklistitem.getlist'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        params = {'taskId': task_id}  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        logger.debug(f"–ó–∞–ø—Ä–æ—Å —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return result
        return []

    async def delete_checklist_item(self, item_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞.
        
        :param item_id: ID —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'task.checklistitem.delete'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        params = {'itemId': item_id}  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ {item_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ {item_id} —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ {item_id}")
            return False

    async def clear_task_checklists(self, task_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            items = await self.get_task_checklists(task_id)
            
            if not items:
                logger.debug(f"–£ –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return True
            
            logger.debug(f"–û—á–∏—Å—Ç–∫–∞ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏ {task_id}...")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            deleted_count = 0
            errors_count = 0
            
            for item in items:
                item_id = item.get('ID') or item.get('id')
                if item_id:
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                        async with httpx.AsyncClient() as client:
                            url = f"{self.webhook_url.rstrip('/')}/task.checklistitem.delete"
                            params = {'itemId': int(item_id)}
                            response = await client.post(url, json=params)
                            
                            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            if response.status_code == 200:
                                result = response.json()
                                if result.get('result') or 'error' not in result:
                                    deleted_count += 1
                                else:
                                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                                    errors_count += 1
                            else:
                                errors_count += 1
                                
                    except Exception as e:
                        errors_count += 1
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è - —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                        continue
            
            if errors_count > 0:
                logger.debug(f"–ü—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤–æ–∑–Ω–∏–∫–ª–æ {errors_count} –æ—à–∏–±–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç—ã —É–∂–µ —É–¥–∞–ª–µ–Ω—ã)")
            
            logger.debug(f"–ü—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return True
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            return False

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–ú–ò –ó–ê–î–ê–ß ==========
    
    async def add_task_comment(self, task_id: int, text: str, author_id: int, created_date: str = None) -> Optional[int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param text: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        :param author_id: ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Bitrix24
        :param created_date: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ None
        """
        api_method = 'task.commentitem.add'
        params = {
            'taskId': task_id,
            'fields': {
                'POST_MESSAGE': text,
                'AUTHOR_ID': author_id
            }
        }
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if created_date:
            params['fields']['POST_DATE'] = created_date
        
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ {task_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {author_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            comment_id = result
            logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {comment_id}")
            return comment_id
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ {task_id}")
            return None

    async def get_task_comments(self, task_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :return: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–¥–∞—á–∏
        """
        api_method = 'task.commentitem.getlist'
        params = {'taskId': task_id}
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return result
        return []

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò ==========
    
    async def get_group_storage(self, group_id: int) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏—Å–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã/–ø—Ä–æ–µ–∫—Ç–∞.
        
        :param group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
        :return: ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if group_id in self._group_storage_cache:
                logger.debug(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ –≥—Ä—É–ø–ø—ã {group_id} –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {self._group_storage_cache[group_id]}")
                return self._group_storage_cache[group_id]
            
            logger.debug(f"–ü–æ–∏—Å–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
            storages = await self._request('GET', 'disk.storage.getlist')
            if not storages:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â")
                return None
            
            # –ò—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥—Ä—É–ø–ø—ã (ENTITY_TYPE = 'group')
            group_storage = None
            for storage in storages:
                if (storage.get('ENTITY_TYPE') == 'group' and
                    int(storage.get('ENTITY_ID', 0)) == group_id):
                    group_storage = storage
                    break
            
            if not group_storage:
                logger.error(f"‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                group_storages = [s for s in storages if s.get('ENTITY_TYPE') == 'group']
                if group_storages:
                    logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥—Ä—É–ø–ø: {[(s.get('ENTITY_ID'), s.get('NAME')) for s in group_storages[:5]]}")
                return None
            
            storage_id = int(group_storage['ID'])
            storage_name = group_storage.get('NAME', 'unknown')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._group_storage_cache[group_id] = storage_id
            
            logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥—Ä—É–ø–ø—ã {group_id}: '{storage_name}' (ID: {storage_id})")
            return storage_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return None

    async def find_file_in_folder(self, folder_id: int, filename: str) -> Optional[str]:
        """
        –ò—â–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
        
        :param folder_id: ID –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        :return: ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'n' –∏–ª–∏ None
        """
        try:
            logger.debug(f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ '{filename}' –≤ –ø–∞–ø–∫–µ {folder_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
            folder_children = await self._request('GET', 'disk.folder.getchildren', {'id': folder_id})
            
            if not folder_children:
                logger.debug(f"–ü–∞–ø–∫–∞ {folder_id} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return None
            
            # –ò—â–µ–º —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å timestamp)
            for item in folder_children:
                if not isinstance(item, dict):
                    continue
                
                item_name = item.get('NAME', '')
                item_type = item.get('TYPE', '')
                item_id = item.get('ID', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–Ω–µ –ø–∞–ø–∫–∏)
                if item_type == 'file' and item_id:
                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                    if item_name == filename:
                        file_id_with_prefix = f"n{item_id}"
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª '{filename}' —Å ID {item_id} (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {file_id_with_prefix})")
                        return file_id_with_prefix
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è (Bitrix24 –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–∏–º–≤–æ–ª—ã)
                    import re
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Bitrix24
                    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ \_ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ __
                    normalized_filename = filename.replace('\\_', '__')
                    if item_name == normalized_filename:
                        file_id_with_prefix = f"n{item_id}"
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª '{item_name}' –¥–ª—è '{filename}' —Å ID {item_id}")
                        return file_id_with_prefix
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å timestamp (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω)
                    # –§–æ—Ä–º–∞—Ç: original_name_timestamp.ext –∏–ª–∏ modified_name_timestamp.ext
                    if filename.count('.') >= 1:  # –ï—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                        base_name, ext = filename.rsplit('.', 1)
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞)
                        normalized_base = re.sub(r'[\\/_]+', '_', base_name)
                        
                        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: normalized_base_[timestamp].ext
                        pattern1 = f"^{re.escape(normalized_base)}_\\d+\\.{re.escape(ext)}$"
                        if re.match(pattern1, item_name):
                            file_id_with_prefix = f"n{item_id}"
                            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å timestamp '{item_name}' –¥–ª—è '{filename}' —Å ID {item_id}")
                            return file_id_with_prefix
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
                        pattern2 = f"^{re.escape(base_name)}_\\d+\\.{re.escape(ext)}$"
                        if re.match(pattern2, item_name):
                            file_id_with_prefix = f"n{item_id}"
                            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å timestamp '{item_name}' –¥–ª—è '{filename}' —Å ID {item_id}")
                            return file_id_with_prefix
            
            logger.debug(f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {folder_id}")
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ '{filename}' –≤ –ø–∞–ø–∫–µ {folder_id}: {e}")
            return None

    async def get_or_create_kaiten_folder(self, storage_id: int) -> Optional[int]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É–∂–µ–±–Ω—É—é –ø–∞–ø–∫—É "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten" –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏—Å–∫–µ.
        
        :param storage_id: ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏—Å–∫–∞
        :return: ID –ø–∞–ø–∫–∏ "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten" –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if storage_id in self._group_folder_cache:
                logger.debug(f"–ü–∞–ø–∫–∞ '–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten' –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {storage_id}: {self._group_folder_cache[storage_id]}")
                return self._group_folder_cache[storage_id]
            
            folder_name = "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ROOT_OBJECT_ID
            logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ '{folder_name}' –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ {storage_id}...")
            storage_info = await self._request('GET', 'disk.storage.get', {'id': storage_id})
            
            if not storage_info or 'ROOT_OBJECT_ID' not in storage_info:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ {storage_id}")
                return None
            
            root_object_id = storage_info['ROOT_OBJECT_ID']
            logger.debug(f"ROOT_OBJECT_ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {storage_id}: {root_object_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
            storage_children = await self._request('GET', 'disk.folder.getchildren', {'id': root_object_id})
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
            if storage_children:
                for item in storage_children:
                    if (item.get('TYPE') == 'folder' and 
                        item.get('NAME') == folder_name):
                        folder_id = item.get('ID')
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞ '{folder_name}' —Å ID: {folder_id}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                        self._group_folder_cache[storage_id] = folder_id
                        return folder_id
            
            # –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            logger.info(f"üìÅ –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –ø–∞–ø–∫—É '{folder_name}' –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ {storage_id}...")
            create_params = {
                'id': root_object_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ROOT_OBJECT_ID
                'data': {
                    'NAME': folder_name
                }
            }
            
            result = await self._request('POST', 'disk.folder.addsubfolder', create_params)
            
            if result and 'ID' in result:
                folder_id = result['ID']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._group_folder_cache[storage_id] = folder_id
                
                logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{folder_name}' —Å ID: {folder_id}")
                return folder_id
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É '{folder_name}': {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–ø–∫–æ–π '{folder_name}': {e}")
            return None

    async def get_or_create_task_folder(self, storage_id: int, task_id: int) -> Optional[int]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten".
        
        :param storage_id: ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏—Å–∫–∞
        :param task_id: ID –∑–∞–¥–∞—á–∏ Bitrix24
        :return: ID –ø–∞–ø–∫–∏ –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten"
            kaiten_folder_id = await self.get_or_create_kaiten_folder(storage_id)
            if not kaiten_folder_id:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É '–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten'")
                return None
            
            task_folder_name = str(task_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten"
            kaiten_folder_children = await self._request('GET', 'disk.folder.getchildren', {'id': kaiten_folder_id})
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏
            if kaiten_folder_children:
                for item in kaiten_folder_children:
                    if (item.get('TYPE') == 'folder' and 
                        item.get('NAME') == task_folder_name):
                        task_folder_id = item.get('ID')
                        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –∑–∞–¥–∞—á–∏ {task_id} —Å ID: {task_folder_id}")
                        return task_folder_id
            
            # –ü–∞–ø–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            logger.debug(f"üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –≤ '–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten'...")
            create_params = {
                'id': kaiten_folder_id,
                'data': {
                    'NAME': task_folder_name
                }
            }
            
            result = await self._request('POST', 'disk.folder.addsubfolder', create_params)
            
            if result and 'ID' in result:
                task_folder_id = result['ID']
                logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∑–∞–¥–∞—á–∏ {task_id} —Å ID: {task_folder_id}")
                return task_folder_id
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ {task_id}: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–ø–∫–æ–π –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            return None

    async def upload_file(self, file_content: bytes, filename: str, group_id: int, task_id: int = None) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Bitrix24 —á–µ—Ä–µ–∑ disk.folder.uploadfile –≤ —Å–ª—É–∂–µ–±–Ω—É—é –ø–∞–ø–∫—É –≥—Ä—É–ø–ø—ã.
        –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.
        
        :param file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞
        :param group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
        :param task_id: ID –∑–∞–¥–∞—á–∏ Bitrix24 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–∫–∏)
        :return: ID —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'n' –∏–ª–∏ None
        """
        try:
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º/–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª '{filename}' —Ä–∞–∑–º–µ—Ä–æ–º {len(file_content)} –±–∞–π—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥—Ä—É–ø–ø—ã
            storage_id = await self.get_group_storage(group_id)
            if not storage_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è task_id
            if task_id:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ –≤ "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten\{task_id}\"
                target_folder_id = await self.get_or_create_task_folder(storage_id, task_id)
                if not target_folder_id:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ {task_id}")
                    return None
                logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ {task_id} (ID: {target_folder_id})")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten"
                target_folder_id = await self.get_or_create_kaiten_folder(storage_id)
                if not target_folder_id:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É '–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten'")
                    return None
                logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É '–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten' (ID: {target_folder_id})")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
            existing_file_id = await self.find_file_in_folder(target_folder_id, filename)
            if existing_file_id:
                logger.success(f"‚úÖ –§–∞–π–ª '{filename}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Bitrix24 —Å ID: {existing_file_id.replace('n', '')} (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)")
                return existing_file_id
            
            # –§–∞–π–ª–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
            import base64
            import time
            from pathlib import Path
            
            # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è API Bitrix24
            file_base64 = base64.b64encode(file_content).decode('utf-8')
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–º–µ–Ω–µ–º
            original_filename = filename
            
            for attempt in range(3):  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if attempt > 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    file_path = Path(original_filename)
                    timestamp = int(time.time())
                    unique_filename = f"{file_path.stem}_{timestamp}{file_path.suffix}"
                else:
                    unique_filename = original_filename
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
                upload_params = {
                    'id': target_folder_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É (–æ–±—â—É—é –∏–ª–∏ –∑–∞–¥–∞—á–∏)
                    'data': {
                        'NAME': unique_filename
                    },
                    'fileContent': file_base64
                }
                
                folder_path = f"–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten\\{task_id}" if task_id else "–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ Kaiten"
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª '{unique_filename}' –≤ –ø–∞–ø–∫—É '{folder_path}' –≥—Ä—É–ø–ø—ã {group_id} (ID: {target_folder_id})")
                result = await self._request('POST', 'disk.folder.uploadfile', upload_params)
                
                if result and 'ID' in result:
                    file_id = result['ID']
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'n' –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç API –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    file_id_with_prefix = f"n{file_id}"
                    logger.success(f"‚úÖ –§–∞–π–ª '{unique_filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_id} —Å ID: {file_id} (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {file_id_with_prefix})")
                    return file_id_with_prefix
                else:
                    if attempt < 2:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        logger.debug(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –∏–º–µ–Ω–µ–º '{unique_filename}', –ø—Ä–æ–±—É–µ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º...")
                        continue
                    else:
                        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ {attempt + 1} –ø–æ–ø—ã—Ç–æ–∫: {result}")
                        return None
            
            return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{filename}' –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
            return None

    async def add_task_comment_with_file(self, task_id: int, text: str, author_id: int, 
                                       file_id: str = None, created_date: str = None) -> Optional[int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param text: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        :param author_id: ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Bitrix24
        :param file_id: ID —Ñ–∞–π–ª–∞ –≤ Bitrix24 Drive —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'n' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param created_date: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ None
        """
        api_method = 'task.commentitem.add'
        params = {
            'taskId': task_id,
            'fields': {
                'POST_MESSAGE': text,
                'AUTHOR_ID': author_id
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if file_id:
            # file_id —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å 'n', –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤
            params['fields']['UF_FORUM_MESSAGE_DOC'] = [file_id]
            logger.debug(f"–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª {file_id} –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∑–∞–¥–∞—á–∏ {task_id}")
        
        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (API –º–æ–∂–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
        if created_date:
            params['fields']['CREATED_DATE'] = created_date
        
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è{'—Å —Ñ–∞–π–ª–æ–º' if file_id else ''} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('POST', api_method, params)
        
        if result:
            # API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç
            if isinstance(result, int):
                comment_id = result
            elif isinstance(result, dict) and 'result' in result:
                comment_id = result['result']
            else:
                comment_id = result
            
            if comment_id:
                logger.debug(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω —Å ID: {comment_id}")
                return int(comment_id)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {result}")
                return None
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return None

    async def download_file(self, file_id: str) -> Optional[bytes]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Bitrix24 –ø–æ –µ–≥–æ ID.
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ Bitrix24 (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'n')
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'n' –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_file_id = file_id.replace('n', '') if file_id.startswith('n') else file_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è download_url
            file_info = await self._request('GET', 'disk.file.get', {'id': clean_file_id})
            
            if not file_info or 'DOWNLOAD_URL' not in file_info:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å download_url –¥–ª—è —Ñ–∞–π–ª–∞ {file_id}")
                return None
            
            download_url = file_info['DOWNLOAD_URL']
            file_name = file_info.get('NAME', 'unknown')
            
            logger.debug(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ '{file_name}' –ø–æ URL: {download_url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with httpx.AsyncClient() as client:
                response = await client.get(download_url)
                response.raise_for_status()
                
                file_data = response.content
                logger.debug(f"–°–∫–∞—á–∞–Ω–æ {len(file_data)} –±–∞–π—Ç")
                
                return file_data
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None
