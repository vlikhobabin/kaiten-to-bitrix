import httpx
from typing import Optional, Dict, Any, List

from config.settings import settings
from utils.logger import get_logger
from models.bitrix_models import BitrixUser

logger = get_logger(__name__)

class BitrixClient:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Bitrix24 REST API.
    """
    def __init__(self):
        # Webhook URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å, –∏ —Ç–æ–∫–µ–Ω
        self.webhook_url = settings.bitrix_webhook_url

    async def _request(self, method: str, api_method: str, params: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ Bitrix24 API.
        
        :param method: HTTP –º–µ—Ç–æ–¥ ('GET', 'POST', etc.)
        :param api_method: –ú–µ—Ç–æ–¥ Bitrix24 API (e.g., 'sonet_group.user.add')
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        """
        url = f"{self.webhook_url.rstrip('/')}/{api_method}"
        
        async with httpx.AsyncClient() as client:
            try:
                if method.upper() == 'POST':
                    response = await client.post(url, json=params)
                else:
                    response = await client.get(url, params=params)
                
                response.raise_for_status()
                data = response.json()

                if 'error' in data:
                    logger.error(f"–û—à–∏–±–∫–∞ API Bitrix24: {data.get('error_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return None
                
                return data.get('result')
            
            except httpx.HTTPStatusError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ API Bitrix24: {e.response.status_code} - {e.response.text}")
                return None
            except httpx.RequestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24 API: {e}")
                return None

    async def add_user_to_workgroup(self, group_id: int, user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É.
        
        :param group_id: ID —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'sonet_group.user.add'
        params = {
            'GROUP_ID': group_id,
            'USER_ID': user_id
        }
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø—É {group_id} –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        
        if result:
            logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_id}.")
            return True
        return False

    async def create_workgroup(self, group_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–ø—Ä–æ–µ–∫—Ç).
        
        :param group_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø—ã (NAME, DESCRIPTION, OWNER_ID, USER_IDS –∏ —Ç.–¥.)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
        """
        api_method = 'sonet_group.create'
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        params = {
            'VISIBLE': 'Y',
            'OPENED': 'N',  # N - –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
            'PROJECT': 'N',  # N - —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ø—Ä–æ–µ–∫—Ç
            **group_data  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        }
        
        group_name = group_data.get('NAME', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã '{group_name}' –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        if result:
            # result –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–º (ID), —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–º
            if isinstance(result, (int, str)):
                group_id = str(result)
                logger.success(f"–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {group_id}.")
                return {"ID": group_id}
            elif isinstance(result, dict) and "ID" in result:
                logger.success(f"–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {result['ID']}.")
                return result
            else:
                logger.success(f"–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
                return result
        return None

    async def create_task(self, title: str, description: str, responsible_id: int, group_id: int, **kwargs) -> Optional[int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
        
        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        :param responsible_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        :param group_id: ID –ø—Ä–æ–µ–∫—Ç–∞ (—Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã)
        :param kwargs: –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ (tags, priority, etc.)
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
        """
        api_method = 'tasks.task.add'
        params = {
            'fields': {
                'TITLE': title,
                'DESCRIPTION': description,
                'RESPONSIBLE_ID': responsible_id,
                'GROUP_ID': group_id,
                **kwargs # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            }
        }
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{title}' –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        if result and 'task' in result:
            task_id = result['task']['id']
            logger.success(f"–ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {task_id}.")
            return task_id
        return None

    async def update_task(self, task_id: int, **kwargs) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :param kwargs: –ü–æ–ª—è –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (title, description, responsible_id, etc.)
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'tasks.task.update'
        params = {
            'taskId': task_id,
            'fields': kwargs
        }
        
        task_title = kwargs.get('TITLE', f'ID {task_id}')
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task_title}' (ID: {task_id}) –≤ Bitrix24...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–ó–∞–¥–∞—á–∞ '{task_title}' (ID: {task_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É '{task_title}' (ID: {task_id})")
            return False

    async def get_workgroup_list(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        """
        all_groups = []
        page = 1
        max_pages = 5  # –î–æ 250 –≥—Ä—É–ø–ø (5 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ 50)
        
        try:
            logger.info("üì• –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24 —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...")
            
            while page <= max_pages:
                # –§–æ—Ä–º—É–ª–∞ –¥–ª—è start: start = (N-1) * 50, –≥–¥–µ N ‚Äî –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                start = (page - 1) * 50
                
                request_params = {
                    'start': start
                }
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: start={start}")
                
                # –ú–µ—Ç–æ–¥ sonet_group.get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                groups_data = await self._request('GET', 'sonet_group.get', request_params)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not groups_data or not isinstance(groups_data, list):
                    logger.warning(f"  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {groups_data}")
                    break
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –≥—Ä—É–ø–ø –Ω–µ—Ç
                if not groups_data:
                    logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    break
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(groups_data)} –≥—Ä—É–ø–ø")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                all_groups.extend(groups_data)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 50 –≥—Ä—É–ø–ø, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(groups_data) < 50:
                    logger.info(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(groups_data)} < 50, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                
                page += 1
            
            logger.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_groups)} —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ {page-1} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return all_groups
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24: {e}")
        return []
        
    async def get_task_list(self, group_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ.
        """
        api_method = 'tasks.task.list'
        params = {
            'filter': {'GROUP_ID': group_id},
            'select': ['ID', 'TITLE', 'STATUS']
        }
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {group_id} –≤ Bitrix24...")
        result = await self._request('GET', api_method, params)
        if result and 'tasks' in result:
            logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result['tasks'])} –∑–∞–¥–∞—á.")
            return result['tasks']
        return []

    async def get_workgroup_users(self, group_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã.
        """
        api_method = 'sonet_group.user.get'
        params = {'ID': group_id}
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –∏–∑ Bitrix24...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}.")
            return result
        return []

    async def find_user_by_email(self, email: str) -> Optional[BitrixUser]:
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            response = await self._request('GET', 'user.get', {
                'filter': {'EMAIL': email}
            })
            
            if response and isinstance(response, list) and response:
                user_data = response[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                return BitrixUser(**user_data)
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email {email}: {e}")
            return None

    async def create_user(self, user_data: dict) -> Optional[BitrixUser]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Bitrix24"""
        try:
            response = await self._request('POST', 'user.add', user_data)
            
            if response:
                # response —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è user_id
                user_id = response
                full_user = await self.get_user(user_id)
                if full_user:
                    logger.success(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.get('EMAIL')} (ID: {user_id})")
                    return full_user
            
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('EMAIL', 'unknown')}")
            return None
            
        except Exception as e:
            error_msg = str(e)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ
            if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_msg or "already exists" in error_msg.lower():
                existing_user = await self.find_user_by_email(user_data.get('EMAIL'))
                if existing_user:
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {existing_user.EMAIL} (ID: {existing_user.ID})")
                    return existing_user
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('EMAIL')}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('EMAIL', 'unknown')}: {e}")
            
            return None

    async def update_user(self, user_id: str, user_data: dict) -> Optional[BitrixUser]:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Bitrix24"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {'ID': user_id, **user_data}
            
            response = await self._request('POST', 'user.update', update_data)
            
            if response is True:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                updated_user = await self.get_user(user_id)
                if updated_user:
                    return updated_user
            
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
            return None

    async def get_users(self, params: Optional[dict] = None) -> list[BitrixUser]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

        Args:
            params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ BitrixUser.
        """
        all_users = []
        page = 1
        max_pages = 4  # –î–æ 200 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 50)
        
        try:
            logger.info("üì• –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24 —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...")
            
            while page <= max_pages:
                # –§–æ—Ä–º—É–ª–∞ –¥–ª—è start: start = (N-1) * 50, –≥–¥–µ N ‚Äî –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                start = (page - 1) * 50
                
                request_params = {
                    'ADMIN_MODE': 'True',  # –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    'start': start
                }
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: start={start}")
                
            # –ú–µ—Ç–æ–¥ user.get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                users_data = await self._request('GET', 'user.get', request_params)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not users_data or not isinstance(users_data, list):
                    logger.warning(f"  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {users_data}")
                    break
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
                if not users_data:
                    logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    break
                
                logger.info(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                all_users.extend(users_data)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(users_data) < 50:
                    logger.info(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(users_data)} < 50, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                
                page += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–±—ä–µ–∫—Ç—ã BitrixUser
            users = [BitrixUser.model_validate(u) for u in all_users]
            
            logger.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {page-1} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24: {e}")
            return []

    async def get_user(self, user_id: int) -> Optional[BitrixUser]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
        try:
            response = await self._request('GET', 'user.get', {'ID': user_id})
            
            if response and isinstance(response, list) and response:
                user_data = response[0]
                return BitrixUser(**user_data)
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}")
            return None

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–¢–ê–î–ò–Ø–ú–ò –ó–ê–î–ê–ß ==========
    
    async def get_task_stages(self, entity_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        :param entity_id: ID –≥—Ä—É–ø–ø—ã (—Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã)
        :return: –°–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π
        """
        api_method = 'task.stages.get'
        params = {'entityId': entity_id}
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞–¥–∏–π –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç–∞–¥–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}.")
            return result
        return []

    async def create_task_stage(self, entity_id: int, title: str, sort: int = 100, 
                               color: str = "0066CC") -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        :param entity_id: ID –≥—Ä—É–ø–ø—ã (—Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã)
        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏
        :param sort: –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        :param color: –¶–≤–µ—Ç —Å—Ç–∞–¥–∏–∏ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π)
        :return: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏ –∏–ª–∏ None
        """
        api_method = 'task.stages.add'
        params = {
            'fields': {
                'TITLE': title,
                'SORT': sort,
                'COLOR': color,
                'ENTITY_ID': entity_id,
                'ENTITY_TYPE': 'GROUP'  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç–∞–¥–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
            }
        }
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ '{title}' –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–°—Ç–∞–¥–∏—è '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {entity_id}.")
            return result
        return None

    async def update_task_stage(self, stage_id: int, fields: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞.
        
        :param stage_id: ID —Å—Ç–∞–¥–∏–∏
        :param fields: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'task.stages.update'
        params = {
            'id': stage_id,
            'fields': fields
        }
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ {stage_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–°—Ç–∞–¥–∏—è {stage_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return True
        return False

    async def delete_task_stage(self, stage_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞.
        
        :param stage_id: ID —Å—Ç–∞–¥–∏–∏
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'task.stages.delete'
        params = {'id': stage_id}
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ {stage_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.success(f"–°—Ç–∞–¥–∏—è {stage_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            return True
        return False

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ß–ï–ö-–õ–ò–°–¢–ê–ú–ò –ó–ê–î–ê–ß ==========
    


    async def add_checklist_item(self, task_id: int, title: str, is_complete: bool = False, 
                                checklist_id: int = None) -> Optional[int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param title: –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
        :param is_complete: –í—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        :param checklist_id: ID —á–µ–∫-–ª–∏—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        api_method = 'task.checklistitem.add'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–ª–µ–º TITLE
        params = {
            'taskId': task_id,
            'fields': {
                'TITLE': title,
                'IS_COMPLETE': is_complete
            }
        }
        
        if checklist_id:
            params['fields']['parentId'] = checklist_id
        
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ '{title}' –≤ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            item_id = result
            logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' —Å–æ–∑–¥–∞–Ω —Å ID {item_id}")
            return item_id
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ '{title}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return None

    async def get_task_checklists(self, task_id: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :return: –°–ø–∏—Å–æ–∫ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏
        """
        api_method = 'task.checklistitem.getlist'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        params = {'taskId': task_id}  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        logger.debug(f"–ó–∞–ø—Ä–æ—Å —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
        result = await self._request('GET', api_method, params)
        if result:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            return result
        return []

    async def delete_checklist_item(self, item_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞.
        
        :param item_id: ID —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False
        """
        api_method = 'task.checklistitem.delete'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        params = {'itemId': item_id}  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ {item_id}...")
        result = await self._request('POST', api_method, params)
        if result:
            logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ {item_id} —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ {item_id}")
            return False

    async def clear_task_checklists(self, task_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏.
        
        :param task_id: ID –∑–∞–¥–∞—á–∏
        :return: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            items = await self.get_task_checklists(task_id)
            
            if not items:
                logger.debug(f"–£ –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return True
            
            logger.debug(f"–û—á–∏—Å—Ç–∫–∞ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏ {task_id}...")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            deleted_count = 0
            for item in items:
                item_id = item.get('ID') or item.get('id')
                if item_id and await self.delete_checklist_item(int(item_id)):
                    deleted_count += 1
            
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            return False
