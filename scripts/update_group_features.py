#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø Bitrix24.
–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä–µ —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ MySQL.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 update_group_features.py --view-group 38                    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã
    python3 update_group_features.py --update-group 38                 # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    python3 update_group_features.py --update-all                      # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø  
    python3 update_group_features.py --set-features tasks,files,chat   # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã
"""

import sys
import json
import pymysql
import argparse
from datetime import datetime
from typing import Dict, List, Set, Optional

def connect_to_mysql() -> pymysql.Connection:
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ /root/.my.cnf
    """
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MySQL
        connection = pymysql.connect(
            read_default_file='/root/.my.cnf',
            database='sitemanager',
            charset='utf8mb4',
            autocommit=False
        )
        return connection
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        sys.exit(1)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø
STANDARD_FEATURES = {
    'tasks': '–ó–∞–¥–∞—á–∏',
    'files': '–î–∏—Å–∫', 
    'calendar': '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
    'chat': '–ß–∞—Ç',
    'landing_knowledge': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
    'search': '–ü–æ–∏—Å–∫'
}

# –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
ALL_AVAILABLE_FEATURES = {
    'tasks': '–ó–∞–¥–∞—á–∏',
    'files': '–î–∏—Å–∫',
    'calendar': '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', 
    'chat': '–ß–∞—Ç',
    'forum': '–§–æ—Ä—É–º',
    'blog': '–ë–ª–æ–≥',
    'landing_knowledge': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
    'search': '–ü–æ–∏—Å–∫',
    'photo': '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è',
    'marketplace': '–ú–∞—Ä–∫–µ—Ç',
    'group_lists': '–°–ø–∏—Å–∫–∏'
}

def get_group_info(group_id: int) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã b_sonet_group.
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        cursor.execute("SELECT ID, NAME, DESCRIPTION, ACTIVE FROM b_sonet_group WHERE ID = %s", (group_id,))
        row = cursor.fetchone()
        
        if row:
            return {
                'id': row[0],
                'name': row[1], 
                'description': row[2],
                'active': row[3]
            }
        return None
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
        return None
    finally:
        if connection:
            connection.close()

def get_group_features(group_id: int) -> Dict[str, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã b_sonet_features.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å {feature_name: is_active}
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        cursor.execute(
            "SELECT FEATURE, ACTIVE FROM b_sonet_features WHERE ENTITY_TYPE = 'G' AND ENTITY_ID = %s",
            (group_id,)
        )
        rows = cursor.fetchall()
        
        features = {}
        for row in rows:
            feature_name = row[0]
            is_active = row[1] == 'Y'
            features[feature_name] = is_active
            
        return features
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        return {}
    finally:
        if connection:
            connection.close()

def view_group_features(group_id: int) -> bool:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ –µ—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
    """
    print(f"üîç –ü–†–û–°–ú–û–¢–† –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ì–†–£–ü–ü–´ ID={group_id}")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group_info = get_group_info(group_id)
    if not group_info:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:")
    print(f"   ID: {group_info['id']}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['name']}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {group_info['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
    print(f"   –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if group_info['active'] == 'Y' else '–ù–µ—Ç'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    features = get_group_features(group_id)
    
    print(f"\nüéØ –¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    if not features:
        print("   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã)")
    else:
        for feature, is_active in features.items():
            feature_name = ALL_AVAILABLE_FEATURES.get(feature, feature)
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if is_active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
            print(f"   {feature_name:15} ({feature:10}) - {status}")
    
    print(f"\nüí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø:")
    for feature, name in STANDARD_FEATURES.items():
        print(f"   ‚úÖ {name} ({feature})")
    
    return True

def set_group_features(group_id: int, features_to_set: List[str], clear_existing: bool = True) -> bool:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã.
    
    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã
        features_to_set: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏  
        clear_existing: –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        
    Returns:
        True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã ID={group_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group_info = get_group_info(group_id)
        if not group_info:
            print(f"‚ùå –ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print(f"üìã –ì—Ä—É–ø–ø–∞: {group_info['name']}")
        
        # –£–°–û–í–ï–†–®–ï–ù–°–¢–í–û–í–ê–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –í–°–ï–• –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        current_time = datetime.now()
        success_count = 0
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        print(f"üîß –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        for feature_code in ALL_AVAILABLE_FEATURES.keys():
            cursor.execute(
                "SELECT ID FROM b_sonet_features WHERE ENTITY_TYPE = 'G' AND ENTITY_ID = %s AND FEATURE = %s",
                (group_id, feature_code)
            )
            if not cursor.fetchone():
                # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                cursor.execute(
                    """INSERT INTO b_sonet_features 
                       (ENTITY_TYPE, ENTITY_ID, FEATURE, ACTIVE, DATE_CREATE, DATE_UPDATE) 
                       VALUES ('G', %s, %s, 'N', %s, %s)""",
                    (group_id, feature_code, current_time, current_time)
                )
                print(f"‚ûï –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {ALL_AVAILABLE_FEATURES[feature_code]} ({feature_code}) - –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        
        # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ù–ï–ê–ö–¢–ò–í–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if clear_existing:
            cursor.execute(
                "UPDATE b_sonet_features SET ACTIVE = 'N', DATE_UPDATE = %s WHERE ENTITY_TYPE = 'G' AND ENTITY_ID = %s",
                (current_time, group_id)
            )
            print(f"üîÑ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
        # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        for feature in features_to_set:
            if feature not in ALL_AVAILABLE_FEATURES:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {feature}")
                continue
                
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                cursor.execute(
                    "SELECT ID FROM b_sonet_features WHERE ENTITY_TYPE = 'G' AND ENTITY_ID = %s AND FEATURE = %s",
                    (group_id, feature)
                )
                existing = cursor.fetchone()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é
                    cursor.execute(
                        "UPDATE b_sonet_features SET ACTIVE = 'Y', DATE_UPDATE = %s WHERE ID = %s",
                        (current_time, existing[0])
                    )
                    print(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {ALL_AVAILABLE_FEATURES[feature]} ({feature})")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    cursor.execute(
                        """INSERT INTO b_sonet_features 
                           (ENTITY_TYPE, ENTITY_ID, FEATURE, ACTIVE, DATE_CREATE, DATE_UPDATE) 
                           VALUES ('G', %s, %s, 'Y', %s, %s)""",
                        (group_id, feature, current_time, current_time)
                    )
                    print(f"‚ûï –°–æ–∑–¥–∞–Ω–æ: {ALL_AVAILABLE_FEATURES[feature]} ({feature})")
                
                success_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ {feature}: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_info['name']}'")
        return success_count > 0
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        if connection:
            connection.rollback()
        return False
    finally:
        if connection:
            connection.close()

def get_all_groups() -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø.
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        cursor.execute(
            "SELECT ID, NAME FROM b_sonet_group WHERE ACTIVE = 'Y' ORDER BY ID"
        )
        rows = cursor.fetchall()
        
        groups = []
        for row in rows:
            groups.append({
                'id': row[0],
                'name': row[1]
            })
            
        return groups
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        return []
    finally:
        if connection:
            connection.close()

def update_all_groups() -> bool:
    """
    –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø.
    """
    print("üöÄ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –í–°–ï–• –ì–†–£–ü–ü")
    print("=" * 60)
    
    groups = get_all_groups()
    if not groups:
        print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(groups)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {len(groups)} –≥—Ä—É–ø–ø.\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if confirm.lower() not in ['yes', 'y', '–¥–∞']:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
    for feature, name in STANDARD_FEATURES.items():
        print(f"   ‚úÖ {name} ({feature})")
    
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø:")
    success_count = 0
    error_count = 0
    
    for i, group in enumerate(groups, 1):
        try:
            print(f"\n[{i:3d}/{len(groups)}] –ì—Ä—É–ø–ø–∞ ID={group['id']}: {group['name']}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if set_group_features(group['id'], list(STANDARD_FEATURES.keys()), clear_existing=True):
                success_count += 1
            else:
                error_count += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã {group['id']}: {e}")
            error_count += 1
    
    print(f"\nüéØ –ò–¢–û–ì–ò –ú–ê–°–°–û–í–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {success_count} –≥—Ä—É–ø–ø")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count} –≥—Ä—É–ø–ø")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(groups)} –≥—Ä—É–ø–ø")
    
    return error_count == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø Bitrix24",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s --view-group 38                           # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã
  %(prog)s --update-group 38                         # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  %(prog)s --update-group 38 --features tasks,chat  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  %(prog)s --update-all                              # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
  tasks    - –ó–∞–¥–∞—á–∏
  files    - –î–∏—Å–∫  
  calendar - –ö–∞–ª–µ–Ω–¥–∞—Ä—å
  chat     - –ß–∞—Ç
  forum    - –§–æ—Ä—É–º
  blog     - –ë–ª–æ–≥
  landing  - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
  search   - –ü–æ–∏—Å–∫

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä: tasks, files, calendar, chat, landing
        """
    )
    
    parser.add_argument(
        '--view-group',
        type=int,
        help='–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã –ø–æ ID'
    )
    
    parser.add_argument(
        '--update-group', 
        type=int,
        help='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã –ø–æ ID'
    )
    
    parser.add_argument(
        '--update-all',
        action='store_true',
        help='–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø'
    )
    
    parser.add_argument(
        '--features',
        type=str,
        help='–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: tasks,files,chat)'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not any([args.view_group, args.update_group, args.update_all]):
        parser.print_help()
        return 1
    
    # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã
    if args.view_group:
        if args.features or args.update_all:
            print("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä --view-group –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
            return 1
        
        success = view_group_features(args.view_group)
        return 0 if success else 1
    
    # –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if args.update_group:
        if args.update_all:
            print("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã --update-group –∏ --update-all –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ")
            return 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
        if args.features:
            features_list = [f.strip() for f in args.features.split(',')]
            print(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {features_list}")
        else:
            features_list = list(STANDARD_FEATURES.keys())
            print(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {features_list}")
        
        success = set_group_features(args.update_group, features_list)
        return 0 if success else 1
    
    # –†–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if args.update_all:
        if args.features:
            print("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä --features –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å --update-all")
            return 1
        
        success = update_all_groups()
        return 0 if success else 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 