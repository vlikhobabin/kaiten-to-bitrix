#!/usr/bin/env python3
"""
VPS —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π Bitrix24 —á–µ—Ä–µ–∑ SQL.
–ß–∏—Ç–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ Kaiten, —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—è –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–ª–∞–≥–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
- –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–µ—Ç custom-fields-in-progress.log
- –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≤ custom-fields-app.log
"""
import json
import sys
import pymysql
import re
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Optional

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
JSON_DATA_FILE = "/root/kaiten-to-bitrix/mappings/custom_fields_data.json"
MAPPING_FILE = "/root/kaiten-to-bitrix/mappings/custom_fields_mapping.json"
PROGRESS_LOG = "/root/kaiten-to-bitrix/logs/custom-fields-in-progress.log" 
COMPLETED_LOG = "/root/kaiten-to-bitrix/logs/custom-fields-app.log"

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–ª–∞–≥–æ–≤—ã–π —Ñ–∞–π–ª"""
    log_dir = Path(PROGRESS_LOG).parent
    log_dir.mkdir(exist_ok=True, parents=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    for old_log in [PROGRESS_LOG, COMPLETED_LOG]:
        if Path(old_log).exists():
            Path(old_log).unlink()

def log(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ stdout"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    
    print(log_entry)
    
    with open(PROGRESS_LOG, 'a', encoding='utf-8') as f:
        f.write(log_entry + '\n')

def connect_to_mysql() -> pymysql.Connection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Bitrix"""
    try:
        connection = pymysql.connect(
            read_default_file='/root/.my.cnf',
            database='sitemanager',
            charset='utf8mb4',
            autocommit=False
        )
        log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ")
        return connection
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        raise

def generate_field_name(kaiten_name: str, kaiten_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—è –¥–ª—è Bitrix"""
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    clean_name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9_]', '_', kaiten_name)
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    transliterated = ''
    for char in clean_name.lower():
        transliterated += translit_map.get(char, char)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    prefix = "UF_KAITEN_"
    max_name_length = 50 - len(prefix) - len(kaiten_id) - 1
    short_name = transliterated[:max_name_length].rstrip('_')
    
    return f"{prefix}{short_name}_{kaiten_id}".upper()

def find_existing_field(connection: pymysql.Connection, kaiten_field_id: str) -> Optional[Dict[str, Any]]:
    """–ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –ø–æ XML_ID"""
    try:
        cursor = connection.cursor()
        cursor.execute(
            "SELECT ID, FIELD_NAME, XML_ID FROM b_user_field WHERE XML_ID = %s AND ENTITY_ID = 'TASKS_TASK'",
            (kaiten_field_id,)
        )
        
        row = cursor.fetchone()
        if row:
            return {
                'id': row[0],
                'field_name': row[1],
                'xml_id': row[2]
            }
        return None
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è {kaiten_field_id}: {e}")
        return None

def get_existing_field_values_mapping(connection: pymysql.Connection, field_id: int) -> Dict[str, int]:
    """
    ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è
    –ù—É–∂–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è values_mapping –∫–æ–≥–¥–∞ –ø–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    try:
        cursor = connection.cursor()
        cursor.execute("""
            SELECT XML_ID, ID FROM b_user_field_enum 
            WHERE USER_FIELD_ID = %s AND XML_ID IS NOT NULL AND XML_ID != ''
        """, (field_id,))
        
        results = cursor.fetchall()
        values_mapping = {}
        
        for xml_id, enum_id in results:
            values_mapping[str(xml_id)] = enum_id
            log(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: Kaiten {xml_id} -> Bitrix {enum_id}")
        
        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞–ø–ø–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(values_mapping)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        return values_mapping
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
        return {}

def get_next_available_ids(connection: pymysql.Connection) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID"""
    try:
        cursor = connection.cursor()
        
        # –°–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –ø–æ–ª—è
        cursor.execute("SELECT MAX(ID) FROM b_user_field")
        max_field_id = cursor.fetchone()[0] or 0
        next_field_id = max_field_id + 1
        
        # –°–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è enum
        cursor.execute("SELECT MAX(ID) FROM b_user_field_enum")
        max_enum_id = cursor.fetchone()[0] or 0
        next_enum_id = max_enum_id + 1
        
        # –°–ª–µ–¥—É—é—â–∏–π SORT –¥–ª—è –∑–∞–¥–∞—á
        cursor.execute("SELECT MAX(SORT) FROM b_user_field WHERE ENTITY_ID = 'TASKS_TASK'")
        max_sort = cursor.fetchone()[0] or 0
        next_sort = max_sort + 100
        
        return next_field_id, next_enum_id, next_sort
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö ID: {e}")
        return 116, 27, 200  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def create_field_in_db(connection: pymysql.Connection, field_data: Dict[str, Any]) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–µ –≤ –ë–î"""
    try:
        cursor = connection.cursor()
        
        sql = """
            INSERT INTO b_user_field 
            (ID, ENTITY_ID, FIELD_NAME, USER_TYPE_ID, XML_ID, SORT, MULTIPLE, 
             MANDATORY, SHOW_FILTER, SHOW_IN_LIST, EDIT_IN_LIST, IS_SEARCHABLE, SETTINGS)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        cursor.execute(sql, (
            field_data['id'],
            field_data['entity_id'],
            field_data['field_name'],
            field_data['user_type_id'],
            field_data['xml_id'],
            field_data['sort'],
            field_data['multiple'],
            field_data['mandatory'],
            field_data['show_filter'],
            field_data['show_in_list'],
            field_data['edit_in_list'],
            field_data['is_searchable'],
            field_data['settings']
        ))
        
        connection.commit()
        log(f"‚úÖ –ü–æ–ª–µ {field_data['field_name']} —Å–æ–∑–¥–∞–Ω–æ (ID: {field_data['id']})")
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è: {e}")
        connection.rollback()
        return False

def create_field_enum_in_db(connection: pymysql.Connection, enum_data: Dict[str, Any]) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è-—Å–ø–∏—Å–∫–∞ –≤ –ë–î"""
    try:
        cursor = connection.cursor()
        
        sql = """
            INSERT INTO b_user_field_enum 
            (ID, USER_FIELD_ID, VALUE, DEF, SORT, XML_ID)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        
        cursor.execute(sql, (
            enum_data['id'],
            enum_data['user_field_id'],
            enum_data['value'],
            enum_data['def'],
            enum_data['sort'],
            enum_data['xml_id']
        ))
        
        connection.commit()
        log(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ '{enum_data['value']}' —Å–æ–∑–¥–∞–Ω–æ (ID: {enum_data['id']})")
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        connection.rollback()
        return False

def create_uts_column(connection: pymysql.Connection, field_name: str, field_type: str) -> bool:
    """
    ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ b_uts_tasks_task –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–ª—è
    –ë–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª–µ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ UI –∑–∞–¥–∞—á!
    """
    try:
        cursor = connection.cursor()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ MySQL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–æ–ª—è Kaiten
        if field_type in ['select', 'multi_select']:
            mysql_type = 'text'  # –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º text (–∫–∞–∫ UF_PROJECT)
        elif field_type in ['string', 'text']:
            mysql_type = 'text'
        elif field_type in ['number', 'integer']:
            mysql_type = 'int'
        elif field_type in ['date', 'datetime']:
            mysql_type = 'datetime'
        else:
            mysql_type = 'text'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü
        check_sql = """
            SELECT COUNT(*) as column_exists 
            FROM information_schema.columns 
            WHERE table_name = 'b_uts_tasks_task' 
            AND table_schema = 'sitemanager'
            AND column_name = %s
        """
        
        cursor.execute(check_sql, (field_name,))
        result = cursor.fetchone()
        
        if result and result[0] > 0:
            log(f"‚è≠Ô∏è –°—Ç–æ–ª–±–µ—Ü {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ b_uts_tasks_task")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü
        add_column_sql = f"""
            ALTER TABLE b_uts_tasks_task 
            ADD COLUMN {field_name} {mysql_type} NULL
        """
        
        cursor.execute(add_column_sql)
        connection.commit()
        
        log(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü {field_name} —Å–æ–∑–¥–∞–Ω –≤ b_uts_tasks_task (—Ç–∏–ø: {mysql_type})")
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ UTS: {e}")
        connection.rollback()
        return False

def create_field_lang_in_db(connection: pymysql.Connection, lang_data: Dict[str, Any]) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç —è–∑—ã–∫–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª—è –≤ –ë–î"""
    try:
        cursor = connection.cursor()
        
        sql = """
            INSERT INTO b_user_field_lang 
            (USER_FIELD_ID, LANGUAGE_ID, EDIT_FORM_LABEL, LIST_COLUMN_LABEL, 
             LIST_FILTER_LABEL, ERROR_MESSAGE, HELP_MESSAGE)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """
        
        cursor.execute(sql, (
            lang_data['user_field_id'],
            lang_data['language_id'],
            lang_data['edit_form_label'],
            lang_data['list_column_label'],
            lang_data['list_filter_label'],
            lang_data['error_message'],
            lang_data['help_message']
        ))
        
        connection.commit()
        log(f"‚úÖ –Ø–∑—ã–∫–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {lang_data['language_id']} —Å–æ–∑–¥–∞–Ω–∞")
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {e}")
        connection.rollback()
        return False

def process_single_field(connection: pymysql.Connection, kaiten_field_id: str, 
                        field_data: Dict[str, Any], current_field_id: int, 
                        current_enum_id: int, current_sort: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –ø–æ–ª–µ"""
    
    field_info = field_data['field_info']
    kaiten_values = field_data['values']
    
    kaiten_field_name = field_info.get('name', 'Unknown')
    field_type = field_info.get('type', 'select')
    
    log(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ '{kaiten_field_name}' (ID: {kaiten_field_id})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
    existing_field = find_existing_field(connection, kaiten_field_id)
    if existing_field:
        log(f"‚è≠Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_field['id']})")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π
        existing_values_mapping = get_existing_field_values_mapping(connection, existing_field['id'])
        
        return {
            'success': True,
            'bitrix_field_id': existing_field['id'],
            'bitrix_field_name': existing_field['field_name'],
            'values_mapping': existing_values_mapping,  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥!
            'created': False
        }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—è
    field_name = generate_field_name(kaiten_field_name, kaiten_field_id)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ
    field_db_data = {
        'id': current_field_id,
        'entity_id': 'TASKS_TASK',
        'field_name': field_name,
        'user_type_id': 'enumeration' if field_type in ['select', 'multi_select'] else 'string',
        'xml_id': kaiten_field_id,
        'sort': 500 + current_field_id,  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–∞—á–∏–Ω–∞–µ–º —Å 500 –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ
        'multiple': 'Y',  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—Å–µ–≥–¥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (–∫–∞–∫ –ø–æ–ª–µ 142)
        'mandatory': 'N',
        'show_filter': 'S',  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ (–∫–∞–∫ –ø–æ–ª–µ 142)
        'show_in_list': 'Y',
        'edit_in_list': 'Y',
        'is_searchable': 'Y',
        'settings': 'a:4:{s:7:"DISPLAY";s:2:"UI";s:11:"LIST_HEIGHT";i:1;s:16:"CAPTION_NO_VALUE";s:0:"";s:13:"SHOW_NO_VALUE";s:1:"Y";}'  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: DISPLAY="UI"
    }
    
    if not create_field_in_db(connection, field_db_data):
        return {'success': False, 'error': 'Failed to create field'}
    
    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–Ω–∞—á–µ–Ω–∏–π b_uts_tasks_task
    if not create_uts_column(connection, field_name, field_type):
        log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü UTS –¥–ª—è –ø–æ–ª—è {field_name}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ UI
    
    # –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
    values_mapping = {}
    enum_id = current_enum_id
    
    if kaiten_values and field_type in ['select', 'multi_select']:
        log(f"üìã –°–æ–∑–¥–∞—é {len(kaiten_values)} –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—è")
        
        for i, kaiten_value in enumerate(kaiten_values):
            kaiten_value_id = str(kaiten_value.get('id', ''))
            value_text = kaiten_value.get('value', f'–ó–Ω–∞—á–µ–Ω–∏–µ_{kaiten_value_id}')
            
            enum_db_data = {
                'id': enum_id,
                'user_field_id': current_field_id,
                'value': value_text,
                'def': 'N',
                'sort': 500 + (i * 100),  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–∞—á–∏–Ω–∞–µ–º —Å 500 –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ
                'xml_id': kaiten_value_id
            }
            
            if create_field_enum_in_db(connection, enum_db_data):
                values_mapping[kaiten_value_id] = enum_id
                enum_id += 1
            else:
                log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '{value_text}'")
    
    # –°–æ–∑–¥–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ (–ø—Ä–æ—Å—Ç—ã–µ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ)
    for lang_id in ['ru', 'en']:
        if lang_id == 'ru':
            lang_name = kaiten_field_name  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–ª–∏—à–µ—Å—Ç–≤
            lang_name = kaiten_field_name  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        lang_db_data = {
            'user_field_id': current_field_id,
            'language_id': lang_id,
            'edit_form_label': lang_name,
            'list_column_label': '',  # ‚úÖ –ü—É—Å—Ç—ã–µ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ
            'list_filter_label': '',  # ‚úÖ –ü—É—Å—Ç—ã–µ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ
            'error_message': '',      # ‚úÖ –ü—É—Å—Ç—ã–µ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ
            'help_message': ''        # ‚úÖ –ü—É—Å—Ç—ã–µ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ–ª–µ
        }
        
        create_field_lang_in_db(connection, lang_db_data)
    
    log(f"‚úÖ –ü–æ–ª–µ '{kaiten_field_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
    
    return {
        'success': True,
        'bitrix_field_id': current_field_id,
        'bitrix_field_name': field_name,
        'values_mapping': values_mapping,
        'created': True
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    log("üöÄ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ü–û–õ–ï–ô BITRIX24")
    log("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON —Ñ–∞–π–ª–∞
        if not Path(JSON_DATA_FILE).exists():
            log(f"‚ùå JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {JSON_DATA_FILE}")
            return False
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ Kaiten
        log("üì• –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Kaiten...")
        with open(JSON_DATA_FILE, 'r', encoding='utf-8') as f:
            kaiten_data = json.load(f)
        
        fields_data = kaiten_data.get('fields', {})
        if not fields_data:
            log("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return True
        
        log(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(fields_data)} –ø–æ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        connection = connect_to_mysql()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID
        current_field_id, current_enum_id, current_sort = get_next_available_ids(connection)
        log(f"üìç –°–ª–µ–¥—É—é—â–∏–µ ID: Field={current_field_id}, Enum={current_enum_id}, Sort={current_sort}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è
        mapping_result = {
            'created_at': datetime.now().isoformat(),
            'description': '–ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π Kaiten -> Bitrix',
            'fields': {}
        }
        
        created_fields = 0
        updated_fields = 0
        total_values = 0
        
        for kaiten_field_id, field_data in fields_data.items():
            try:
                result = process_single_field(
                    connection, kaiten_field_id, field_data,
                    current_field_id, current_enum_id, current_sort
                )
                
                if result['success']:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
                    mapping_result['fields'][kaiten_field_id] = {
                        'kaiten_field': field_data['field_info'],
                        'bitrix_field_id': result['bitrix_field_id'],
                        'bitrix_field_name': result['bitrix_field_name'],
                        'values_mapping': result['values_mapping'],
                        'created_at': datetime.now().isoformat()
                    }
                    
                    if result['created']:
                        created_fields += 1
                        current_field_id += 1
                        current_enum_id += len(result['values_mapping'])
                        current_sort += 100
                    else:
                        updated_fields += 1
                    
                    total_values += len(result['values_mapping'])
                else:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—è {kaiten_field_id}: {result.get('error', 'Unknown')}")
                
            except Exception as e:
                log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—è {kaiten_field_id}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞...")
        mapping_file_path = Path(MAPPING_FILE)
        mapping_file_path.parent.mkdir(exist_ok=True, parents=True)
        
        with open(MAPPING_FILE, 'w', encoding='utf-8') as f:
            json.dump(mapping_result, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection.close()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        log("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        log(f"   –ü–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ: {created_fields}")
        log(f"   –ü–æ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_fields}")
        log(f"   –ó–Ω–∞—á–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {total_values}")
        log(f"   –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {MAPPING_FILE}")
        
        log("‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ü–û–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        Path(PROGRESS_LOG).rename(COMPLETED_LOG)
        
        return True
        
    except Exception as e:
        log(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 