import asyncio
import os
import sys
from typing import List

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from connectors.bitrix_client import BitrixClient
from connectors.kaiten_client import KaitenClient
from models.bitrix_models import BitrixUser
from models.kaiten_models import KaitenUser
from transformers.user_transformer import UserTransformer


async def main():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    1. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten –∏ Bitrix24.
    2. –ë–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten.
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ: –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ Bitrix24 - –æ–±–Ω–æ–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ—Ç.
    4. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix24.
    5. –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É –≤ Bitrix24.
    6. –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    kaiten_client = KaitenClient()
    bitrix_client = BitrixClient()
    
    # --- 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten...")
    kaiten_users: List[KaitenUser] = await kaiten_client.get_users()
    logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(kaiten_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten.")

    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24...")
    bitrix_users: List[BitrixUser] = await bitrix_client.get_users({"ACTIVE": "Y"})
    logger.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(bitrix_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24.")

    # --- 2. –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–≤—ã–º–∏ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
    users_to_process = kaiten_users[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö {len(users_to_process)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten...")
    
    user_transformer = UserTransformer(bitrix_users)
    processed_users_count = 0
    created_count = 0
    updated_count = 0

    for kaiten_user in users_to_process:
        if not kaiten_user.email:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {kaiten_user.full_name} –Ω–µ –∏–º–µ–µ—Ç email, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Bitrix24
        user_data = user_transformer.kaiten_to_bitrix_data(kaiten_user)
        if not user_data:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Bitrix24
        existing_user = user_transformer.transform(kaiten_user)
        
        if existing_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {kaiten_user.full_name} (ID: {existing_user.ID})...")
            success = await bitrix_client.update_user(existing_user.ID, user_data)
            if success:
                updated_count += 1
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {kaiten_user.full_name}...")
            new_user_id = await bitrix_client.create_user(user_data)
            if new_user_id:
                created_count += 1
        
        processed_users_count += 1

    logger.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}")

    # --- 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
    logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24 –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã...")
    bitrix_users = await bitrix_client.get_users({"ACTIVE": "Y"})
    user_transformer = UserTransformer(bitrix_users)
    logger.success(f"–ö–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –≤ Bitrix24: {len(bitrix_users)}.")

    # --- 4. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É ---
    processed_user_ids = []
    for kaiten_user in users_to_process:
        user_id = user_transformer.get_user_id(kaiten_user)
        if user_id:
            processed_user_ids.append(user_id)

    logger.success(f"–ù–∞–π–¥–µ–Ω–æ {len(processed_user_ids)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.")

    # --- 5. –†–∞–±–æ—Ç–∞ —Å —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–æ–π ---
    group_name = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ Kaiten"
    test_group = None
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É '{group_name}'...")
    
    workgroups = await bitrix_client.get_workgroup_list()
    for group in workgroups:
        if group["NAME"] == group_name:
            test_group = group
            break

    if test_group:
        logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID: {test_group['ID']}.")
        group_id = str(test_group["ID"])
    else:
        logger.info(f"–ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        group_data = {
            "NAME": group_name,
            "OWNER_ID": "1",  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            "USER_IDS": ["1"],
        }
        created_group = await bitrix_client.create_workgroup(group_data)
        if created_group and "ID" in created_group:
            group_id = str(created_group["ID"])
            logger.success(f"–ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {group_id}.")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É.")
            return

    # --- 6. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞ –≥—Ä—É–ø–ø—ã ---
    existing_group_users = await bitrix_client.get_workgroup_users(group_id)
    existing_user_ids = {str(user["USER_ID"]) for user in existing_group_users}
    logger.info(f"–í –≥—Ä—É–ø–ø–µ —É–∂–µ —Å–æ—Å—Ç–æ—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID): {existing_user_ids}")

    user_ids_to_add_in_group = [
        uid for uid in processed_user_ids if str(uid) not in existing_user_ids
    ]

    if not user_ids_to_add_in_group:
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ—è—Ç –≤ –≥—Ä—É–ø–ø–µ. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
        logger.info(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID): {user_ids_to_add_in_group}")
        for user_id in user_ids_to_add_in_group:
            await bitrix_client.add_user_to_workgroup(group_id, user_id)

    # --- 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç—á–µ—Ç ---
    final_group_users = await bitrix_client.get_workgroup_users(group_id)
    final_user_ids = sorted([str(user["USER_ID"]) for user in final_group_users])
    
    logger.info("=" * 50)
    logger.success("üéâ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_users_count}")
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {created_count}")
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É '{group_name}' –≤ –≤–∞—à–µ–º Bitrix24.")
    logger.info(f"ID –≥—Ä—É–ø–ø—ã: {group_id}")
    logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã (ID Bitrix24): {final_user_ids}")
    logger.info("=" * 50)


if __name__ == "__main__":
    asyncio.run(main()) 