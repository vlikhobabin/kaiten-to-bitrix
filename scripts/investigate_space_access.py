"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É 426722.
–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ API endpoints.
"""
import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent.parent))

from connectors.kaiten_client import KaitenClient
from utils.logger import get_logger

logger = get_logger(__name__)

async def investigate_space_access():
    """
    –ò—Å—Å–ª–µ–¥—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É 426722 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
    """
    client = KaitenClient()
    target_space_id = 426722
    
    print("=" * 80)
    print(f"üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê –ö –ü–†–û–°–¢–†–ê–ù–°–¢–í–£ {target_space_id}")
    print("=" * 80)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    print(f"\n1Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï {target_space_id}")
    print("-" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        all_spaces = await client.get_spaces()
        target_space = None
        
        for space in all_spaces:
            if space.id == target_space_id:
                target_space = space
                break
        
        if target_space:
            print(f"‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ:")
            print(f"   ID: {target_space.id}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {target_space.title}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏ KaitenSpace
            print(f"   –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ: {getattr(target_space, 'parent_id', 'N/A')}")
            print(f"   –°–æ–∑–¥–∞–Ω: {getattr(target_space, 'created_at', 'N/A')}")
        else:
            print(f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {target_space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ: {e}")
        return
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    print(f"\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–Ø–ú–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê {target_space_id}")
    print("-" * 50)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        members = await client.get_space_members(target_space_id)
        users_with_roles = await client.get_space_users_with_roles(target_space_id)
        
        print(f"üìã –ü—Ä—è–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (get_space_members): {len(members)}")
        print(f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—è–º–∏ (get_space_users_with_roles): {len(users_with_roles)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –¢–æ–ª—Å—Ç–æ–≤ —Å—Ä–µ–¥–∏ –ø—Ä—è–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        stanislov_found = False
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
        all_direct_users = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ get_space_members
        for member in members:
            if hasattr(member, 'model_dump'):
                all_direct_users.append(member.model_dump())
            elif hasattr(member, 'dict'):
                all_direct_users.append(member.dict())
            else:
                all_direct_users.append(member.__dict__ if hasattr(member, '__dict__') else {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏
        for user in users_with_roles:
            if isinstance(user, dict):
                all_direct_users.append(user)
            elif hasattr(user, 'model_dump'):
                all_direct_users.append(user.model_dump())
            elif hasattr(user, 'dict'):
                all_direct_users.append(user.dict())
            else:
                all_direct_users.append(user.__dict__ if hasattr(user, '__dict__') else {})
        
        print(f"üìã –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(all_direct_users)}")
        
        for user in all_direct_users:
            user_name = user.get('name', '').lower()
            user_email = user.get('email', '').lower()
            if ('—Å—Ç–∞–Ω–∏—Å–ª–∞–≤' in user_name and '—Ç–æ–ª—Å—Ç–æ–≤' in user_name) or 'tsv@eg-holding.ru' in user_email:
                stanislov_found = True
                print(f"‚úÖ –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –¢–æ–ª—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ü–†–Ø–ú–´–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
                print(f"   ID: {user.get('id')}")
                print(f"   –ò–º—è: {user.get('name')}")
                print(f"   Email: {user.get('email')}")
                break
        
        if not stanislov_found:
            print(f"‚ùå –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –¢–æ–ª—Å—Ç–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø—Ä—è–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            print(f"   –≠—Ç–æ –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢ —á—Ç–æ –µ–≥–æ –¥–æ—Å—Ç—É–ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã!")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if all_direct_users:
            print(f"\nüìã –ü–µ—Ä–≤—ã–µ 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            for i, user in enumerate(all_direct_users[:5], 1):
                user_id = user.get('id', 'N/A')
                user_name = user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                user_email = user.get('email', '–ë–µ–∑ email')
                role_id = user.get('space_role_id', user.get('role_id', 'N/A'))
                print(f"   {i}. ID: {user_id:6s} | –†–æ–ª—å: {role_id} | –ò–º—è: {user_name:20s} | Email: {user_email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å email eg-holding.ru
        eg_users = []
        for user in all_direct_users:
            user_email = user.get('email', '').lower()
            if '@eg-holding.ru' in user_email:
                eg_users.append(user)
        
        if eg_users:
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(eg_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π @eg-holding.ru —Å—Ä–µ–¥–∏ –ø—Ä—è–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            for user in eg_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                print(f"   - {user.get('name', 'N/A')} ({user.get('email', 'N/A')})")
        else:
            print(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ @eg-holding.ru –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –ø—Ä—è–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
    
    # 3. –ò—Å—Å–ª–µ–¥—É–µ–º –¥—Ä—É–≥–∏–µ API endpoints, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
    print(f"\n3Ô∏è‚É£ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• API ENDPOINTS")
    print("-" * 50)
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
    test_endpoints = [
        "/api/v1/user_groups",
        "/api/v1/access_groups", 
        "/api/v1/permissions",
        "/api/v1/roles",
        f"/api/v1/spaces/{target_space_id}/permissions",
        f"/api/v1/spaces/{target_space_id}/access",
        f"/api/v1/spaces/{target_space_id}/roles",
        "/api/latest/permissions",
        "/api/latest/roles",
        "/api/latest/access_groups",
    ]
    
    successful_endpoints = []
    
    for endpoint in test_endpoints:
        try:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: {endpoint}")
            data = await client._request("GET", endpoint)
            
            if data is not None:
                print(f"‚úÖ Endpoint {endpoint} –†–ê–ë–û–¢–ê–ï–¢!")
                print(f"   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
                if isinstance(data, list):
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data)}")
                    if data and isinstance(data[0], dict):
                        print(f"   –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {list(data[0].keys())}")
                elif isinstance(data, dict):
                    print(f"   –ö–ª—é—á–∏: {list(data.keys())}")
                successful_endpoints.append(endpoint)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if len(successful_endpoints) <= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    sample_data = data[:5] if isinstance(data, list) else data
                    print(f"   –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {json.dumps(sample_data, ensure_ascii=False, indent=2)[:500]}...")
            
        except Exception as e:
            logger.debug(f"Endpoint {endpoint} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
    
    if successful_endpoints:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ endpoints: {len(successful_endpoints)}")
        for endpoint in successful_endpoints:
            print(f"   - {endpoint}")
    else:
        print(f"\n‚ùå –†–∞–±–æ—á–∏–µ endpoints –¥–ª—è –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    print(f"\n4Ô∏è‚É£ –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ì–†–£–ü–ü–ê–• –í –î–ê–ù–ù–´–• –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê")
    print("-" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
        space_data = await client._request("GET", f"/api/v1/spaces/{target_space_id}")
        
        if space_data:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(space_data.keys())}")
            
            # –ò—â–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
            group_related_fields = []
            for key in space_data.keys():
                if any(keyword in key.lower() for keyword in ['group', 'access', 'permission', 'role']):
                    group_related_fields.append(key)
                    value = space_data[key]
                    print(f"üîç –ü–æ–ª–µ '{key}': {type(value)} = {str(value)[:100]}...")
            
            if group_related_fields:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∞–º–∏: {group_related_fields}")
            else:
                print(f"‚ùå –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)
    
    print(f"üîç –ü–†–û–ë–õ–ï–ú–ê: –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –¢–æ–ª—Å—Ç–æ–≤ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É {target_space_id} –≤ Kaiten,")
    print(f"   –Ω–æ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.")
    print(f"   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–æ—Å—Ç—É–ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã –¥–æ—Å—Ç—É–ø–∞.")
    print()
    print(f"üí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print(f"   1. API –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API")
    print(f"   2. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"   3. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –≥—Ä—É–ø–ø")
    print()
    print(f"üîÑ –¢–ï–ö–£–©–ï–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
    print(f"   - –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏")
    print(f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞")
    print(f"   - –≠—Ç–æ —Ä–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –≥—Ä—É–ø–ø")
    print()
    print(f"üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print(f"   1. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º Kaiten –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π API –≥—Ä—É–ø–ø")
    print(f"   2. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Bitrix24")
    print(f"   3. –¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–º")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "space_id": target_space_id,
        "space_info": target_space.model_dump() if target_space else None,
        "direct_members_count": len(members) if 'members' in locals() else 0,
        "users_with_roles_count": len(users_with_roles) if 'users_with_roles' in locals() else 0,
        "stanislov_found_in_direct": stanislov_found if 'stanislov_found' in locals() else False,
        "successful_endpoints": successful_endpoints if 'successful_endpoints' in locals() else [],
        "recommendations": [
            "API –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ endpoints",
            "–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –¢–æ–ª—Å—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
            "–î–æ—Å—Ç—É–ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã –¥–æ—Å—Ç—É–ø–∞",
            "–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ API –∏–ª–∏ –ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ]
    }
    
    results_file = Path(__file__).parent.parent / "logs" / "space_access_investigation.json"
    results_file.parent.mkdir(exist_ok=True)
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    print("\nüîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(investigate_space_access()) 