#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ Bitrix24.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
1. –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (1 Space = 1 Group) –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
2. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –µ—ë ID

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python scripts/delete_space_groups_final.py                # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ space_mapping
    python scripts/delete_space_groups_final.py --group-id 145 # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
"""

import asyncio
import sys
import os
import json
import argparse
from pathlib import Path

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from connectors.bitrix_client import BitrixClient
from utils.logger import get_logger

logger = get_logger(__name__)

async def delete_group(bitrix: BitrixClient, group_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ä–∞–±–æ—á–∏–º —Å–ø–æ—Å–æ–±–æ–º (GROUP_ID –ø–∞—Ä–∞–º–µ—Ç—Ä)"""
    try:
        result = await bitrix._request('POST', 'sonet_group.delete', {'GROUP_ID': group_id})
        if result is True:
            logger.success(f"‚úÖ –ì—Ä—É–ø–ø–∞ ID {group_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        else:
            logger.error(f"‚ùå –ì—Ä—É–ø–ø–∞ ID {group_id} –ù–ï —É–¥–∞–ª–µ–Ω–∞: {result}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        return False

async def delete_single_group(group_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ ID"""
    bitrix = BitrixClient()
    
    print("\n" + "="*80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–î–ê–õ–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ô –ì–†–£–ü–ü–´")
    print("="*80)
    print(f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ —Å ID: {group_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        groups = await bitrix.get_workgroup_list()
        target_group = None
        for group in groups:
            if int(group['ID']) == group_id:
                target_group = group
                break
        
        if target_group:
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: '{target_group.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}'")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: '{target_group.get('DESCRIPTION', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}'")
        else:
            print(f"‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input(f"\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ID {group_id}? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return False
    
    print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ID {group_id}...")
    print("="*80)
    
    success = await delete_group(bitrix, group_id)
    
    if success:
        print(f"\nüéâ –ì—Ä—É–ø–ø–∞ ID {group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã ID {group_id}")
    
    return success

async def delete_groups_from_mapping():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ Space->Group"""
    
    # –ß–∏—Ç–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
    mapping_file = Path("mappings/space_mapping.json")
    if not mapping_file.exists():
        logger.error("‚ùå –§–∞–π–ª space_mapping.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(mapping_file, 'r', encoding='utf-8') as f:
        space_mapping = json.load(f)
    
    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {mapping_file}")
    logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {len(space_mapping.get('mapping', {}))}")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    groups_to_delete = []
    for space_id, group_data in space_mapping['mapping'].items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if isinstance(group_data, dict) and 'group_id' in group_data:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {"group_id": "4"}
            group_id = int(group_data['group_id'])
        elif isinstance(group_data, str):
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: "4"
            group_id = int(group_data)
        else:
            continue
            
        if 4 <= group_id <= 69:  # –î–∏–∞–ø–∞–∑–æ–Ω space-–≥—Ä—É–ø–ø
            groups_to_delete.append(group_id)
    
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(groups_to_delete)} –≥—Ä—É–ø–ø –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 4-69")
    
    if not groups_to_delete:
        logger.warning("‚ùå –ì—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
    bitrix = BitrixClient()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ Bitrix24
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –≤ Bitrix24...")
    existing_groups = await bitrix.get_workgroup_list()
    existing_group_ids = set(int(group['ID']) for group in existing_groups)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
    existing_groups_to_delete = [gid for gid in groups_to_delete if gid in existing_group_ids]
    non_existing_groups = [gid for gid in groups_to_delete if gid not in existing_group_ids]
    
    logger.info(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(existing_groups_to_delete)}")
    logger.info(f"‚ö†Ô∏è –ì—Ä—É–ø–ø —É–∂–µ –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏): {len(non_existing_groups)}")
    
    if non_existing_groups:
        logger.warning(f"üóëÔ∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {sorted(non_existing_groups)}")
    
    if not existing_groups_to_delete:
        logger.warning("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã)")
        if non_existing_groups:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–∞–ø–ø–∏–Ω–≥
            print(f"\nüí° –í –º–∞–ø–ø–∏–Ω–≥–µ –µ—Å—Ç—å {len(non_existing_groups)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö")
            clean_mapping = input("‚ùì –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–∞–ø–ø–∏–Ω–≥? (y/N): ").strip().lower()
            if clean_mapping == 'y':
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞
                mapping_file.unlink()
                logger.success(f"‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª {mapping_file} —É–¥–∞–ª–µ–Ω")
                return True
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
    groups_to_delete = existing_groups_to_delete
    groups_to_delete.sort(reverse=True)  # –£–¥–∞–ª—è–µ–º –æ—Ç –±–æ–ª—å—à–∏—Ö ID –∫ –º–µ–Ω—å—à–∏–º
    
    print("\n" + "="*80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ü–ü –ò–ó –ú–ê–ü–ü–ò–ù–ì–ê")
    print("="*80)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(groups_to_delete)} –≥—Ä—É–ø–ø –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ID 4-69 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    print("–≠—Ç–∏ –≥—Ä—É–ø–ø—ã —Å–æ–∑–¥–∞–Ω—ã –ø–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –ª–æ–≥–∏–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω ID: {min(groups_to_delete)}-{max(groups_to_delete)}")
    print(f"üìã –°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø: {sorted(groups_to_delete)}")
    print("\nüü¢ –ì—Ä—É–ø–ø—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ (ID > 69) –ù–ï –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ {len(groups_to_delete)} –≥—Ä—É–ø–ø? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return False
    
    print(f"\nüóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ {len(groups_to_delete)} –≥—Ä—É–ø–ø...")
    print("="*80)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø
    deleted_count = 0
    failed_count = 0
    
    for i, group_id in enumerate(groups_to_delete, 1):
        logger.info(f"üóëÔ∏è [{i}/{len(groups_to_delete)}] –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ID {group_id}")
        
        success = await delete_group(bitrix, group_id)
        if success:
            deleted_count += 1
        else:
            failed_count += 1
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –≥—Ä—É–ø–ø
        if i % 10 == 0:
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(groups_to_delete)} –≥—Ä—É–ø–ø...")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.1)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–î–ê–õ–ï–ù–ò–Ø")
    print("="*80)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count} –≥—Ä—É–ø–ø")
    print(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {failed_count} –≥—Ä—É–ø–ø")
    print(f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(groups_to_delete)} –≥—Ä—É–ø–ø")
    
    if deleted_count > 0:
        print(f"\nüéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {deleted_count} –≥—Ä—É–ø–ø")
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –º–∞–ø–ø–∏–Ω–≥–∞
        backup_file = f"mappings/space_mapping_backup_{deleted_count}_deleted.json"
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(space_mapping, f, ensure_ascii=False, indent=2)
        print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –º–∞–ø–ø–∏–Ω–≥–∞: {backup_file}")
        
    return deleted_count > 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(
        description="–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏–∑ Bitrix24",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ space_mapping.json
  %(prog)s --group-id 145     # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É —Å ID 145
  %(prog)s --group-id 1009633 # –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–ª—è –¥–æ—Å–∫–∏ 1009633

–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
  1. –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–û–í - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ (1 Space = 1 Group)
  2. –° --group-id - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –µ—ë ID –≤ Bitrix24
        """
    )
    
    parser.add_argument(
        '--group-id',
        type=int,
        help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã Bitrix24 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 145)'
    )
    
    args = parser.parse_args()
    
    logger.info("üóëÔ∏è –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ü–ü BITRIX24")
    logger.info("=" * 70)
    
    try:
        if args.group_id:
            # –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            logger.info(f"üéØ –†–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ID {args.group_id}")
            success = await delete_single_group(args.group_id)
            return 0 if success else 1
        else:
            # –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            logger.info("üìã –†–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏–∑ space_mapping.json")
            success = await delete_groups_from_mapping()
            return 0 if success else 1
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 