"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Kaiten –≤ –∑–∞–¥–∞—á–∏ Bitrix24.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
1. --list-only - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
2. –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
"""

import asyncio
import argparse
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent))

from migrators.card_migrator import CardMigrator
from utils.logger import get_logger

logger = get_logger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="–ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Kaiten –≤ –∑–∞–¥–∞—á–∏ Bitrix24",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏:
   python scripts/card_migration.py --space-id 426722 --list-only

2. –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–≥—Ä—É–ø–ø–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):
   python scripts/card_migration.py --space-id 426722

3. –ú–∏–≥—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–µ—Ä–≤—ã–µ 5 –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å–∫–∏):
   python scripts/card_migration.py --space-id 426722 --limit 5

4. –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:
   python scripts/card_migration.py --space-id 426722 --card-id 50562607 --list-only

5. –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:
   python scripts/card_migration.py --space-id 426722 --card-id 50562607

6. –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö 10 –∫–∞—Ä—Ç–æ—á–µ–∫:
   python scripts/card_migration.py --space-id 426722 --list-only --limit 10

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ì—Ä—É–ø–ø–∞ Bitrix24 –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ mappings/space_mapping.json.
–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python scripts/space_migration.py --space-id <ID>
        """
    )
    
    parser.add_argument(
        '--space-id', 
        type=int, 
        required=True,
        help='ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫'
    )
    
    parser.add_argument(
        '--group-id', 
        type=int, 
        help='ID –≥—Ä—É–ø–ø—ã (–ø—Ä–æ–µ–∫—Ç–∞) –≤ Bitrix24 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ space_mapping.json)'
    )
    
    parser.add_argument(
        '--card-id', 
        type=int, 
        help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏)'
    )
    
    parser.add_argument(
        '--list-only', 
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏'
    )
    
    parser.add_argument(
        '--verbose', 
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (–≤–∫–ª—é—á–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)'
    )
    
    parser.add_argument(
        '--limit', 
        type=int,
        help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –¥–æ—Å–∫–∞)'
    )
    
    args = parser.parse_args()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.card_id and args.limit:
        logger.error("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã --card-id –∏ --limit –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ")
        return 1
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ logger.debug() –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    if args.card_id:
        mode_text = f"{'–ü–†–û–°–ú–û–¢–†' if args.list_only else '–ú–ò–ì–†–ê–¶–ò–Ø'} –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–ê–†–¢–û–ß–ö–ò {args.card_id}"
    else:
        mode_text = "–ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –ö–ê–†–¢–û–ß–ï–ö" if args.list_only else "–ú–ò–ì–†–ê–¶–ò–Ø –ö–ê–†–¢–û–ß–ï–ö"
        if args.limit:
            mode_text += f" (–õ–ò–ú–ò–¢: {args.limit})"
    
    logger.info("=" * 80)
    logger.info(f"üöÄ –ó–ê–ü–£–°–ö: {mode_text}")
    logger.info("=" * 80)
    logger.info(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ Kaiten: {args.space_id}")
    
    if args.card_id:
        logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten: {args.card_id}")
    
    if args.group_id:
        logger.info(f"–ì—Ä—É–ø–ø–∞ Bitrix24 (—Ä—É—á–Ω–∞—è): {args.group_id}")
    else:
        logger.info("–ì—Ä—É–ø–ø–∞ Bitrix24: –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
    if args.limit:
        logger.info(f"–õ–∏–º–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫: {args.limit} (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –¥–æ—Å–∫–∞)")
    
    if args.list_only:
        logger.info("–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á)")
        logger.info("\nüìã –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
        logger.info("   - type: 1 (–Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏) -> —Å—Ç–∞–¥–∏—è '–ù–æ–≤—ã–µ'")
        logger.info("   - type: 2 –∏ –¥—Ä—É–≥–∏–µ -> —Å—Ç–∞–¥–∏—è '–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è'")
        logger.info("   - type: 3 (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ) -> –ü–†–û–ü–£–°–ö–ê–Æ–¢–°–Ø")
    else:
        logger.info("–†–µ–∂–∏–º: –ø–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–¥–∞—á–∏")
    
    logger.info("=" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
        migrator = CardMigrator()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã Bitrix24
        if args.group_id:
            # –ì—Ä—É–ø–ø–∞ —É–∫–∞–∑–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é
            target_group_id = args.group_id
        elif args.list_only:
            # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω—É–∂–Ω–∞
            target_group_id = 0
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            target_group_id = await migrator.get_group_id_for_space(args.space_id)
            if not target_group_id:
                logger.error(f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {args.space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                logger.error("üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:")
                logger.error(f"   python scripts/space_migration.py --space-id {args.space_id}")
                return 1
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ Bitrix24: {target_group_id}")
        
        success = await migrator.migrate_cards_from_space(
            space_id=args.space_id,
            target_group_id=target_group_id,
            list_only=args.list_only,
            limit=args.limit,
            card_id=args.card_id
        )
        
        if success:
            if args.list_only:
                logger.info("\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
                logger.info(f"python scripts/card_migration.py --space-id {args.space_id}")
            else:
                logger.info("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            return 0
        else:
            logger.error("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 