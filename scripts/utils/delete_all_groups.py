#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–• –≥—Ä—É–ø–ø –∏–∑ Bitrix24, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö.
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –≥—Ä—É–ø–ø—ã —Å ID 1 –∏ 2 (—Å–æ–∑–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é).

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python scripts/delete_all_groups.py                    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–º–µ ID 1,2
    python scripts/delete_all_groups.py --exclude 1 2 5    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ ID 1,2,5
    python scripts/delete_all_groups.py --dry-run          # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
"""

import asyncio
import sys
import os
import argparse
from pathlib import Path

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from connectors.bitrix_client import BitrixClient
from utils.logger import get_logger

logger = get_logger(__name__)

async def delete_group(bitrix: BitrixClient, group_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ ID"""
    try:
        result = await bitrix._request('POST', 'sonet_group.delete', {'GROUP_ID': group_id})
        if result is True:
            logger.success(f"‚úÖ –ì—Ä—É–ø–ø–∞ ID {group_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        else:
            logger.error(f"‚ùå –ì—Ä—É–ø–ø–∞ ID {group_id} –ù–ï —É–¥–∞–ª–µ–Ω–∞: {result}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        return False

async def delete_all_groups(excluded_ids: list | None = None, dry_run: bool = False):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    
    Args:
        excluded_ids: –°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [1, 2])
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    """
    if excluded_ids is None:
        excluded_ids = [1, 2]
    
    bitrix = BitrixClient()
    
    print("\n" + "="*80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ü–ü")
    print("="*80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    logger.info("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ Bitrix24...")
    try:
        all_groups = await bitrix.get_workgroup_list()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –≤—Å–µ–≥–æ: {len(all_groups)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        return False
    
    if not all_groups:
        logger.warning("‚ùå –ì—Ä—É–ø–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    groups_to_delete = []
    excluded_groups = []
    
    for group in all_groups:
        group_id = int(group['ID'])
        group_name = group.get('NAME', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        if group_id in excluded_ids:
            excluded_groups.append({
                'id': group_id,
                'name': group_name,
                'description': group.get('DESCRIPTION', '')
            })
        else:
            groups_to_delete.append({
                'id': group_id,
                'name': group_name,
                'description': group.get('DESCRIPTION', '')
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    groups_to_delete.sort(key=lambda x: x['id'])
    excluded_groups.sort(key=lambda x: x['id'])
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"üìä –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã): {len(excluded_groups)}")
    for group in excluded_groups:
        print(f"   üîí ID {group['id']}: '{group['name']}'")
    
    print(f"\nüóëÔ∏è  –ì—Ä—É–ø–ø—ã –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(groups_to_delete)}")
    if groups_to_delete:
        print("   –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for group in groups_to_delete[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   üöÆ ID {group['id']}: '{group['name']}'")
        
        if len(groups_to_delete) > 10:
            print(f"   ... –∏ –µ—â–µ {len(groups_to_delete) - 10} –≥—Ä—É–ø–ø")
    
    if not groups_to_delete:
        logger.info("‚úÖ –ì—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return True
    
    # –†–µ–∂–∏–º dry-run
    if dry_run:
        print("\nüß™ –†–ï–ñ–ò–ú DRY-RUN: –£–¥–∞–ª–µ–Ω–∏–µ –ù–ï –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        print("="*80)
        print(f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(groups_to_delete)} –≥—Ä—É–ø–ø")
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–æ {len(excluded_groups)} –≥—Ä—É–ø–ø")
        return True
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    print(f"\n‚ùó –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(groups_to_delete)} –≥—Ä—É–ø–ø!")
    print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    
    confirm = input(f"\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ {len(groups_to_delete)} –≥—Ä—É–ø–ø? (–≤–≤–µ–¥–∏—Ç–µ 'DELETE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ").strip()
    if confirm != 'DELETE':
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return False
    
    print(f"\nüóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ {len(groups_to_delete)} –≥—Ä—É–ø–ø...")
    print("="*80)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø
    deleted_count = 0
    failed_count = 0
    
    for i, group in enumerate(groups_to_delete, 1):
        group_id = group['id']
        group_name = group['name']
        
        logger.info(f"üóëÔ∏è [{i}/{len(groups_to_delete)}] –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ID {group_id}: '{group_name}'")
        
        success = await delete_group(bitrix, group_id)
        if success:
            deleted_count += 1
        else:
            failed_count += 1
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –≥—Ä—É–ø–ø
        if i % 10 == 0:
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(groups_to_delete)} –≥—Ä—É–ø–ø...")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.2)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–î–ê–õ–ï–ù–ò–Ø")
    print("="*80)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count} –≥—Ä—É–ø–ø")
    print(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {failed_count} –≥—Ä—É–ø–ø")
    print(f"üîí –ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —É–¥–∞–ª–µ–Ω–∏—è: {len(excluded_groups)} –≥—Ä—É–ø–ø")
    print(f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(groups_to_delete)} –≥—Ä—É–ø–ø")
    
    if deleted_count > 0:
        print(f"\nüéâ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –≥—Ä—É–ø–ø")
        print(f"üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≥—Ä—É–ø–ø—ã —Å ID: {excluded_ids}")
        
    return deleted_count > 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(
        description="–£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –≥—Ä—É–ø–ø –∏–∑ Bitrix24 –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                           # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–º–µ ID 1,2 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  %(prog)s --exclude 1 2 5           # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ ID 1,2,5
  %(prog)s --dry-run                 # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è
  %(prog)s --exclude 1 2 --dry-run   # –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —É–¥–∞–ª–µ–Ω–∏—è –∫—Ä–æ–º–µ ID 1,2

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç –í–°–ï –≥—Ä—É–ø–ø—ã –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö!
    –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ --exclude
        """
    )
    
    parser.add_argument(
        '--exclude',
        type=int,
        nargs='+',
        default=[1, 2],
        help='ID –≥—Ä—É–ø–ø –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 2)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    logger.info("üóëÔ∏è –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ü–ü BITRIX24")
    logger.info("=" * 70)
    
    try:
        success = await delete_all_groups(
            excluded_ids=args.exclude,
            dry_run=args.dry_run
        )
        return 0 if success else 1
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 