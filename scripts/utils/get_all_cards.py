"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Kaiten —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
"""

import asyncio
import argparse
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent))

from connectors.kaiten_client import KaitenClient
from utils.logger import get_logger

logger = get_logger(__name__)

async def get_space_hierarchy(client, target_space_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ + –¥–æ—á–µ—Ä–Ω–∏–µ)"""
    spaces = await client.get_spaces()
    
    target_space = None
    child_spaces = []
    
    # –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    for space in spaces:
        if space.id == target_space_id:
            target_space = space
            break
    
    if not target_space:
        return []
    
    # –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    for space in spaces:
        if space.parent_entity_uid == target_space.uid:
            child_spaces.append(space)
    
    all_spaces = [target_space] + child_spaces
    logger.info(f"üèóÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(all_spaces)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏:")
    for space in all_spaces:
        logger.info(f"   - {space.title} (ID: {space.id})")
    
    return all_spaces

def should_migrate_card(card: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º CardMigrator.
    
    Args:
        card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten (dict)
        
    Returns:
        True –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å, False –∏–Ω–∞—á–µ
    """
    # –§–∏–ª—å—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    if card.get('archived', False):
        return False
        
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–ª–æ–Ω–∫–∏
    column = card.get('column', {})
    column_type = column.get('type')
    
    if column_type == 3:  # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
        return False
    
    return True

async def get_all_cards(space_filter: int = 0, limit: int = 200, migration_only: bool = False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Kaiten —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É.
    
    Args:
        space_filter: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
        migration_only: –ï—Å–ª–∏ True, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    """
    
    client = KaitenClient()
    
    try:
        if space_filter:
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_filter} –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            hierarchy_spaces = await get_space_hierarchy(client, space_filter)
            
            if not hierarchy_spaces:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {space_filter} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ space_id
            all_cards = []
            total_boards = 0
            
            for space in hierarchy_spaces:
                logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}'...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
                try:
                    space_cards_data = await client._request('GET', f'/api/v1/cards?space_id={space.id}')
                    if space_cards_data:
                        all_cards.extend(space_cards_data)
                        logger.info(f"   üÉè –ü–æ–ª—É—á–µ–Ω–æ {len(space_cards_data)} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
                    else:
                        logger.info(f"   üì≠ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")
                except Exception as e:
                    logger.warning(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ board_id
                try:
                    boards = await client.get_boards(space.id)
                    total_boards += len(boards)
                    
                    if boards:
                        logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(boards)} –¥–æ—Å–æ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ board_id...")
                        
                        for board in boards:
                            try:
                                board_cards_data = await client._request('GET', f'/api/v1/cards?board_id={board.id}')
                                if board_cards_data:
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                                    existing_ids = {card.get('id') for card in all_cards}
                                    new_cards = [card for card in board_cards_data if card.get('id') not in existing_ids]
                                    
                                    if new_cards:
                                        all_cards.extend(new_cards)
                                        logger.info(f"      üÉè –î–æ—Å–∫–∞ '{board.title}': +{len(new_cards)} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
                                    else:
                                        logger.debug(f"      üì≠ –î–æ—Å–∫–∞ '{board.title}': –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")
                                else:
                                    logger.debug(f"      üì≠ –î–æ—Å–∫–∞ '{board.title}': –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç")
                            except Exception as e:
                                logger.debug(f"      ‚ùå –î–æ—Å–∫–∞ '{board.title}': –æ—à–∏–±–∫–∞ {e}")
                                
                except Exception as e:
                    logger.warning(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫: {e}")
                
                logger.info(f"   ‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}': –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
            unique_cards = {}
            for card in all_cards:
                card_id = card.get('id')
                if card_id and card_id not in unique_cards:
                    unique_cards[card_id] = card
            
            all_cards = list(unique_cards.values())
            logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_boards} –¥–æ—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ {len(all_cards)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
            filtered_cards = all_cards
            
        else:
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã (–ª–∏–º–∏—Ç: {limit})...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ –æ–±—â–∏–π API
            all_cards = await client._request('GET', f'/api/v1/cards?limit={limit}')
            
            if not all_cards:
                logger.warning("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            filtered_cards = all_cards
        
        if not filtered_cards:
            logger.warning(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if migration_only:
            migration_cards = [card for card in filtered_cards if should_migrate_card(card)]
            filtered_cards = migration_cards
            
            if not filtered_cards:
                logger.warning(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            logger.info(f"üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
        print("\n" + "="*80)
        if migration_only:
            print("üéØ –ö–ê–†–¢–û–ß–ö–ò –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò")
        else:
            print("üìÑ –°–ü–ò–°–û–ö –ö–ê–†–¢–û–ß–ï–ö")
        print("="*80)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∫–æ–ª–æ–Ω–æ–∫
        type_stats = {}
        migration_count = 0
        displayed_count = 0
        
        for i, card in enumerate(filtered_cards):
            column = card.get('column', {})
            column_type = column.get('type', 'unknown')
            archived = card.get('archived', False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            type_stats[column_type] = type_stats.get(column_type, 0) + 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é –∏ —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
            will_be_migrated = should_migrate_card(card)
            
            if column_type == 1:
                target_stage = "–ù–æ–≤—ã–µ"
                migrate_status = "‚úÖ –ë—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞" if will_be_migrated else "üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è (–∞—Ä—Ö–∏–≤–Ω–∞—è)"
            elif column_type == 3:
                target_stage = "–ù–ï –ü–ï–†–ï–ù–û–°–ò–¢–°–Ø"
                migrate_status = "üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è)"
            else:
                target_stage = "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"
                migrate_status = "‚úÖ –ë—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞" if will_be_migrated else "üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è (–∞—Ä—Ö–∏–≤–Ω–∞—è)"
            
            if will_be_migrated:
                migration_count += 1
            
            # –í —Ä–µ–∂–∏–º–µ migration_only –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            if migration_only and not will_be_migrated:
                continue
                
            displayed_count += 1
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å–∫–µ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
            board = card.get('board', {})
            board_title = board.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ—Å–∫–∞')
            board_space_id = board.get('space_id', 'unknown')
            
            # –í–ª–∞–¥–µ–ª–µ—Ü
            owner = card.get('owner', {})
            owner_name = owner.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            print(f"{displayed_count:3d}. ID: {card.get('id'):>8} | {migrate_status}")
            print(f"     Title: {card.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:70]}")
            print(f"     Board: {board_title} (Space: {board_space_id})")
            print(f"     Owner: {owner_name}")
            print(f"     Column type: {column_type} -> {target_stage}")
            if not migration_only:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞—Ä—Ö–∏–≤–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ
                print(f"     Archived: {archived}")
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("="*80)
        if migration_only:
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–†–¢–û–ß–ï–ö –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò")
        else:
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ö–û–õ–û–ù–û–ö")
        print("="*80)
        
        if migration_only:
            # –í —Ä–µ–∂–∏–º–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            type_1_count = type_stats.get(1, 0)
            type_2_count = sum(type_stats.get(t, 0) for t in type_stats.keys() if t not in [1, 3, 'unknown'])
            type_unknown_count = type_stats.get('unknown', 0)
            
            if type_1_count > 0:
                print(f"type: 1 (–Ω–∞—á–∞–ª—å–Ω—ã–µ) -> –ù–æ–≤—ã–µ: {type_1_count} –∫–∞—Ä—Ç–æ—á–µ–∫")
            if type_2_count > 0:
                print(f"type: 2+ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ) -> –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è: {type_2_count} –∫–∞—Ä—Ç–æ—á–µ–∫")
            if type_unknown_count > 0:
                print(f"type: unknown -> –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è: {type_unknown_count} –∫–∞—Ä—Ç–æ—á–µ–∫")
            
            print(f"\nüéØ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {displayed_count}")
        else:
            # –í –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for col_type, count in sorted(type_stats.items()):
                if col_type == 1:
                    stage_name = "type: 1 (–Ω–∞—á–∞–ª—å–Ω—ã–µ) -> –ù–æ–≤—ã–µ"
                elif col_type == 3:
                    stage_name = "type: 3 (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ) -> –ù–ï –ü–ï–†–ï–ù–û–°–Ø–¢–°–Ø"
                else:
                    stage_name = f"type: {col_type} (–æ—Å—Ç–∞–ª—å–Ω—ã–µ) -> –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"
                
                print(f"{stage_name}: {count} –∫–∞—Ä—Ç–æ—á–µ–∫")
            
            print(f"\nüéØ –ö–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ, –Ω–µ type:3): {migration_count}")
        
        print("="*80)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")

async def main():
    parser = argparse.ArgumentParser(
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Kaiten —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∏—Å—Ç–µ–º—ã:
   python scripts/get_all_cards.py

2. –ö–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:
   python scripts/get_all_cards.py --space-id 426722

3. –¢–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:
   python scripts/get_all_cards.py --space-id 426722 --migration-only

4. –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫:
   python scripts/get_all_cards.py --space-id 426722 --limit 500

5. –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–ø—Ü–∏–π:
   python scripts/get_all_cards.py --space-id 426722 --migration-only --limit 300
        """
    )
    
    parser.add_argument(
        '--space-id',
        type=int,
        help='ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫'
    )
    
    parser.add_argument(
        '--limit',
        type=int,
        default=200,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 200)'
    )
    
    parser.add_argument(
        '--migration-only',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ª–µ–∂–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ, –Ω–µ type:3)'
    )
    
    args = parser.parse_args()
    
    logger.info("=" * 80)
    if args.space_id:
        if args.migration_only:
            logger.info(f"üéØ –ü–û–ò–°–ö –ö–ê–†–¢–û–ß–ï–ö –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò –í –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï {args.space_id}")
        else:
            logger.info(f"üîç –ü–û–ò–°–ö –ö–ê–†–¢–û–ß–ï–ö –í –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï {args.space_id}")
    else:
        if args.migration_only:
            logger.info("üéØ –ü–û–ò–°–ö –ö–ê–†–¢–û–ß–ï–ö –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò –í –°–ò–°–¢–ï–ú–ï")
        else:
            logger.info("üîç –ü–û–ò–°–ö –í–°–ï–• –ö–ê–†–¢–û–ß–ï–ö –í –°–ò–°–¢–ï–ú–ï")
    logger.info("=" * 80)
    
    await get_all_cards(space_filter=args.space_id, limit=args.limit, migration_only=args.migration_only)

if __name__ == "__main__":
    asyncio.run(main()) 