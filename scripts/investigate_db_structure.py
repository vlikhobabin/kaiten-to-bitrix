#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Bitrix24 - –ø–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø.
–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä–µ —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ MySQL.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 investigate_db_structure.py
"""

import sys
import json
import pymysql
from typing import List, Dict, Any

def connect_to_mysql() -> pymysql.Connection:
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ /root/.my.cnf
    """
    try:
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MySQL
        connection = pymysql.connect(
            read_default_file='/root/.my.cnf',
            database='sitemanager',
            charset='utf8mb4',
            autocommit=False
        )
        return connection
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        sys.exit(1)

def find_workgroup_tables() -> List[str]:
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—á–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        print("üîç –ü–û–ò–°–ö –¢–ê–ë–õ–ò–¶ –†–ê–ë–û–ß–ò–• –ì–†–£–ü–ü –ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 70)
        
        # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥—Ä—É–ø–ø–∞–º–∏
        search_patterns = [
            'sonet',      # —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
            'group',      # –≥—Ä—É–ø–ø—ã  
            'workgroup',  # —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã
            'feature',    # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            'tool'        # –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        ]
        
        relevant_tables = []
        
        for pattern in search_patterns:
            print(f"\nüîé –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '{pattern}':")
            
            sql = "SHOW TABLES LIKE %s"
            cursor.execute(sql, (f'%{pattern}%',))
            tables = cursor.fetchall()
            
            if tables:
                pattern_tables = [table[0] for table in tables]
                relevant_tables.extend(pattern_tables)
                
                for table in pattern_tables:
                    print(f"   ‚úÖ {table}")
            else:
                print(f"   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å '{pattern}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return list(set(relevant_tables))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []
    finally:
        if connection:
            connection.close()

def analyze_table_structure(table_name: str) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        print(f"\nüìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´: {table_name}")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"DESCRIBE {table_name}")
        columns = cursor.fetchall()
        
        print("üìä –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã:")
        features_fields = []
        
        for column in columns:
            field_name = column[0]
            field_type = column[1]
            field_null = column[2]
            field_key = column[3]
            field_default = column[4]
            
            print(f"   {field_name:20} | {field_type:15} | NULL: {field_null:3} | Key: {field_key:3} | Default: {field_default}")
            
            # –ò—â–µ–º –ø–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
            field_lower = field_name.lower()
            if any(keyword in field_lower for keyword in ['feature', 'tool', 'active', 'enable', 'use', 'task', 'file', 'calendar', 'chat', 'forum', 'blog', 'photo', 'wiki', 'search']):
                features_fields.append(field_name)
        
        if features_fields:
            print(f"\nüéØ –ü–û–õ–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô: {features_fields}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        print(f"\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}")
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if count > 0 and count <= 20:
            print(f"\nüìÑ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π (–ø–µ—Ä–≤—ã–µ 5):")
            cursor.execute(f"SELECT * FROM {table_name} LIMIT 5")
            rows = cursor.fetchall()
            
            for i, row in enumerate(rows, 1):
                print(f"   –ó–∞–ø–∏—Å—å {i}: {row}")
        
        return {
            'table_name': table_name,
            'columns': [col[0] for col in columns],
            'features_fields': features_fields,
            'record_count': count
        }
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return {}
    finally:
        if connection:
            connection.close()

def find_group_features_data(group_id: int = 38) -> None:
    """
    –ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        print(f"\nüéØ –ü–û–ò–°–ö –î–ê–ù–ù–´–• –û –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–• –î–õ–Ø –ì–†–£–ü–ü–´ ID={group_id}")
        print("=" * 60)
        
        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        possible_group_tables = ['b_sonet_group', 'b_sonet_groups', 'b_workgroup', 'b_group']
        
        group_found = False
        for table in possible_group_tables:
            try:
                cursor.execute(f"SELECT * FROM {table} WHERE ID = %s", (group_id,))
                row = cursor.fetchone()
                
                if row:
                    group_found = True
                    print(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: {table}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                    cursor.execute(f"DESCRIBE {table}")
                    columns = [col[0] for col in cursor.fetchall()]
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    group_data = dict(zip(columns, row))
                    
                    print(f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≥—Ä—É–ø–ø—ã:")
                    for key, value in group_data.items():
                        if key in ['ID', 'NAME', 'DESCRIPTION', 'ACTIVE', 'VISIBLE', 'OPENED', 'PROJECT']:
                            print(f"   {key}: {value}")
                    
                    # –ò—â–µ–º –ø–æ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
                    features_data = {}
                    for key, value in group_data.items():
                        if any(keyword in key.lower() for keyword in ['feature', 'tool', 'active', 'enable', 'use', 'task', 'file', 'calendar', 'chat', 'forum', 'blog', 'photo', 'wiki', 'search']):
                            features_data[key] = value
                    
                    if features_data:
                        print(f"\nüéØ –ü–æ–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:")
                        for key, value in features_data.items():
                            print(f"   {key}: {value}")
                    else:
                        print("‚ö†Ô∏è –ü–æ–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ")
                    
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        if not group_found:
            print(f"‚ùå –ì—Ä—É–ø–ø–∞ ID={group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö")
        
        # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        possible_features_tables = [
            'b_sonet_group_features',
            'b_sonet_features', 
            'b_workgroup_features',
            'b_group_features',
            'b_sonet_group_feature',
            'b_group_feature'
        ]
        
        print(f"\nüîç –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
        for table in possible_features_tables:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
                queries = [
                    f"SELECT * FROM {table} WHERE GROUP_ID = %s",
                    f"SELECT * FROM {table} WHERE ENTITY_ID = %s", 
                    f"SELECT * FROM {table} WHERE SONET_GROUP_ID = %s"
                ]
                
                found_data = False
                for query in queries:
                    try:
                        cursor.execute(query, (group_id,))
                        rows = cursor.fetchall()
                        
                        if rows:
                            found_data = True
                            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ {table}:")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                            cursor.execute(f"DESCRIBE {table}")
                            columns = [col[0] for col in cursor.fetchall()]
                            
                            for row in rows:
                                row_data = dict(zip(columns, row))
                                print(f"   üìÑ {row_data}")
                            break
                    except Exception as e:
                        continue
                
                if not found_data:
                    print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        print(f"\nüîç –ü–æ–∏—Å–∫ JSON/—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:")
        json_tables = ['b_sonet_group', 'b_option']
        
        for table in json_tables:
            try:
                if table == 'b_option':
                    # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    cursor.execute("SELECT * FROM b_option WHERE MODULE_ID = 'socialnetwork' AND NAME LIKE '%feature%' OR NAME LIKE '%tool%'")
                    rows = cursor.fetchall()
                    
                    if rows:
                        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ {table}:")
                        for row in rows:
                            print(f"   {row}")
                else:
                    # –ò—â–µ–º –ø–æ–ª—è —Å JSON –¥–∞–Ω–Ω—ã–º–∏
                    cursor.execute(f"DESCRIBE {table}")
                    columns = cursor.fetchall()
                    
                    text_fields = [col[0] for col in columns if 'text' in col[1].lower() or 'json' in col[1].lower()]
                    
                    if text_fields:
                        cursor.execute(f"SELECT ID, {', '.join(text_fields)} FROM {table} WHERE ID = %s", (group_id,))
                        row = cursor.fetchone()
                        
                        if row:
                            print(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –≤ {table}:")
                            for i, field in enumerate(['ID'] + text_fields):
                                value = row[i]
                                if value and ('feature' in str(value).lower() or 'tool' in str(value).lower()):
                                    print(f"   {field}: {value}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {table}: {e}")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã: {e}")
    finally:
        if connection:
            connection.close()

def search_feature_keywords() -> None:
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
    """
    connection = None
    try:
        connection = connect_to_mysql()
        cursor = connection.cursor()
        
        print(f"\nüîç –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 60)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        keywords = ['tasks', 'files', 'calendar', 'chat', 'forum', 'blog', 'photo', 'wiki', 'search', 'landing']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SHOW TABLES")
        all_tables = [table[0] for table in cursor.fetchall()]
        
        for keyword in keywords:
            print(f"\nüîé –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª–µ–π —Å '{keyword}':")
            
            # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü
            matching_tables = [table for table in all_tables if keyword in table.lower()]
            if matching_tables:
                print(f"   üìã –¢–∞–±–ª–∏—Ü—ã: {matching_tables}")
            
            # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –≥—Ä—É–ø–ø
            group_tables = [table for table in all_tables if 'sonet' in table.lower() or 'group' in table.lower()]
            
            for table in group_tables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                try:
                    cursor.execute(f"DESCRIBE {table}")
                    columns = cursor.fetchall()
                    
                    matching_fields = [col[0] for col in columns if keyword in col[0].lower()]
                    if matching_fields:
                        print(f"   üìä {table}: {matching_fields}")
                        
                except Exception as e:
                    continue
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {e}")
    finally:
        if connection:
            connection.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–î BITRIX24 –î–õ–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ì–†–£–ü–ü")
    print("=" * 80)
    
    # 1. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    print("üìç –®–ê–ì 1: –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü")
    relevant_tables = find_workgroup_tables()
    
    if relevant_tables:
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(relevant_tables)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in relevant_tables:
            print(f"   ‚Ä¢ {table}")
    else:
        print("‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print(f"\nüìç –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü")
    table_analysis = []
    
    for table in relevant_tables:
        analysis = analyze_table_structure(table)
        if analysis:
            table_analysis.append(analysis)
    
    # 3. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    print(f"\nüìç –®–ê–ì 3: –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã")
    find_group_features_data(38)  # –¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ ID=38
    
    # 4. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    print(f"\nüìç –®–ê–ì 4: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    search_feature_keywords()
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    tables_with_features = [t for t in table_analysis if t.get('features_fields')]
    
    if tables_with_features:
        print("‚úÖ –¢–ê–ë–õ–ò–¶–´ –° –í–û–ó–ú–û–ñ–ù–´–ú–ò –ü–û–õ–Ø–ú–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô:")
        for table in tables_with_features:
            print(f"   üìã {table['table_name']}: {table['features_fields']}")
    else:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å —è–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ë–î")
    print("2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ AJAX –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã")
    print("3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ JSON –ø–æ–ª—è—Ö –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∞–¥–º–∏–Ω–∫–µ Bitrix24")
    print("5. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ b_option —Å –∫–ª—é—á–∞–º–∏ –º–æ–¥—É–ª—è socialnetwork")

if __name__ == "__main__":
    main() 