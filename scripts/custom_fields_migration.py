#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∏–∑ Kaiten –≤ Bitrix24.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–∞ VPS —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/custom_fields_migration.py [--dry-run]
"""

import sys
import asyncio
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from connectors.kaiten_client import KaitenClient
from migrators.custom_field_migrator import CustomFieldMigrator
from utils.logger import get_logger

logger = get_logger(__name__)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π"""
    
    parser = argparse.ArgumentParser(description='–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π Kaiten -> Bitrix24')
    parser.add_argument('--dry-run', action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaiten –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ VPS')
    
    args = parser.parse_args()
    
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ü–û–õ–ï–ô KAITEN -> BITRIX24")
    print("=" * 70)
    
    if args.dry_run:
        print("‚ö†Ô∏è  –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ø–æ–ª—è –Ω–∞ VPS —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç")
        print()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        print("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        kaiten_client = KaitenClient()
        migrator = CustomFieldMigrator(kaiten_client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kaiten API
        print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kaiten API...")
        test_properties = await kaiten_client.get_custom_properties()
        
        if not test_properties:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏–∑ Kaiten")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KAITEN_API_TOKEN –≤ env.txt")
            return
        
        print(f"‚úÖ Kaiten API: –Ω–∞–π–¥–µ–Ω–æ {len(test_properties)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π")
        
        # –í dry-run —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if args.dry_run:
            print()
            print("üìä –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò:")
            print("-" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Kaiten
            kaiten_data = await migrator._fetch_kaiten_data()
            
            if not kaiten_data.get('fields'):
                print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
            field_types = {}
            total_values = 0
            
            for field_id, field_data in kaiten_data['fields'].items():
                field_info = field_data['field_info']
                field_values = field_data['values']
                
                field_type = field_info.get('type', 'unknown')
                field_name = field_info.get('name', 'N/A')
                multi_select = field_info.get('multi_select', False)
                
                field_types[field_type] = field_types.get(field_type, 0) + 1
                total_values += len(field_values)
                
                print(f"   üìÑ {field_name} (ID: {field_id})")
                print(f"       –¢–∏–ø: {field_type}, –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π: {'–î–∞' if multi_select else '–ù–µ—Ç'}")
                print(f"       –ó–Ω–∞—á–µ–Ω–∏–π: {len(field_values)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
                if field_values:
                    sample_values = field_values[:3]
                    values_text = [v.get('value', 'N/A') for v in sample_values]
                    if len(field_values) > 3:
                        values_text.append('...')
                    print(f"       –ü—Ä–∏–º–µ—Ä—ã: {', '.join(values_text)}")
                print()
            
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º:")
            for field_type, count in field_types.items():
                print(f"   {field_type}: {count} –ø–æ–ª–µ–π")
            
            print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(kaiten_data['fields'])}")
            print(f"   –í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π: {total_values}")
            
            print()
            print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù (dry-run —Ä–µ–∂–∏–º)")
            print("üí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –±–µ–∑ --dry-run")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ env.txt:")
            print("   SSH_HOST, SSH_USER, SSH_KEY_PATH")
            
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VPS
        from config.settings import settings
        if not settings.ssh_host or not settings.ssh_key_path:
            print("‚ùå SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ env.txt:")
            print("   SSH_HOST=your.vps.server")
            print("   SSH_USER=root")
            print("   SSH_KEY_PATH=/path/to/ssh/key")
            return
        
        print(f"‚úÖ SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings.ssh_user}@{settings.ssh_host}")
        
        print()
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Bitrix24 –Ω–∞ VPS!")
        print("   - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ SQL")
        print("   - –°–æ–∑–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π")
        print("   - –°–æ–∑–¥–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π")
        print()
        
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ").lower().strip()
        if confirm not in ['yes', 'y', '–¥–∞', '–¥']:
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        
        print()
        print("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò...")
        print("=" * 50)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        result = await migrator.migrate_all_custom_fields()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print()
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print("=" * 50)
        
        if result['success']:
            mapping_data = result.get('mapping', {})
            fields_count = len(mapping_data.get('fields', {}))
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª–µ–π: {fields_count}")
            
            if 'log_file' in result:
                print(f"üìÑ –õ–æ–≥ VPS: {result['log_file']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            if fields_count > 0:
                print()
                print("üîó –°–û–ó–î–ê–ù–ù–´–ï –ü–û–õ–Ø:")
                print("-" * 30)
                
                for kaiten_id, field_mapping in mapping_data.get('fields', {}).items():
                    kaiten_field = field_mapping.get('kaiten_field', {})
                    field_name = kaiten_field.get('name', 'N/A')
                    bitrix_field_id = field_mapping.get('bitrix_field_id', 'N/A')
                    bitrix_field_name = field_mapping.get('bitrix_field_name', 'N/A')
                    values_count = len(field_mapping.get('values_mapping', {}))
                    
                    print(f"   üìÑ {field_name}")
                    print(f"       Kaiten ID: {kaiten_id}")
                    print(f"       Bitrix ID: {bitrix_field_id}")
                    print(f"       Bitrix Name: {bitrix_field_name}")
                    print(f"       –ó–Ω–∞—á–µ–Ω–∏–π: {values_count}")
                    print()
            
            print("üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ Bitrix24")
            print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∑–∞–¥–∞—á")
            print("3. –ü–æ–ª—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
            print("4. –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ CardMigrator")
            
        else:
            print(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.get('error', 'Unknown error')}")
            
            if 'error_log' in result:
                print(f"üìÑ –õ–æ–≥ –æ—à–∏–±–∫–∏: {result['error_log']}")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
            
            print()
            print("üîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–®–ò–ë–û–ö:")
            print("1. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ MySQL –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä–µ")
            print("2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π")
            print("3. –û—à–∏–±–∫–∞ –≤ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
            print("4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL (/root/.my.cnf)")
            
    except KeyboardInterrupt:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main()) 