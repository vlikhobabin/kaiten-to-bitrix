"""
–ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–ª–æ–Ω–æ–∫ Kaiten –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–¥–∞—á Bitrix24.

–í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–π –º–∏–≥—Ä–∞—Ç–æ—Ä –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏,
—Ç–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º.
"""

import asyncio
import json
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from datetime import datetime

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from models.kaiten_models import KaitenColumn
from utils.logger import get_logger

logger = get_logger(__name__)


class ColumnMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–ª–æ–Ω–æ–∫ Kaiten –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–¥–∞—á Bitrix24.
    
    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
    –ú—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏ 
    "–ù–æ–≤—ã–µ" –∏ "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è" –≤ CardMigrator.
    
    –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
    
    –õ–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:
    - 1 Column Kaiten = 1 Task Stage Bitrix24
    - –°—Ç–∞–¥–∏–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ –ø–æ ENTITY_ID 
    - –ù–ï —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–¥–∏–∏ "–ú–æ–µ–≥–æ –ø–ª–∞–Ω–∞"
    - –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º subcolumns
    """
    
    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø
        self.board_mapping = self._load_board_mapping()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.stats = {
            'processed': 0,
            'created': 0,
            'updated': 0,
            'errors': 0,
            'boards_processed': 0,
            'stages_created': 0
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏: {board_id: {column_id: stage_id}}
        self.mapping = {}

    def _load_board_mapping(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫ Kaiten -> –ì—Ä—É–ø–ø—ã Bitrix24"""
        mapping_file = Path("mappings/board_mapping.json")
        if mapping_file.exists():
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('mapping', {})
        return {}

    def _get_stage_color(self, column_type: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Å—Ç–∞–¥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏ Kaiten.
        
        :param column_type: –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ Kaiten
        :return: HEX —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞–¥–∏–∏ Bitrix24
        """
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        color_mapping = {
            0: "6699CC",  # –û–±—ã—á–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–∏–Ω–∏–π
            1: "9999CC",  # –í —Ä–∞–±–æ—Ç–µ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π  
            2: "99CC66",  # –ì–æ—Ç–æ–≤–æ - –∑–µ–ª–µ–Ω—ã–π
            3: "CC9999",  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∫—Ä–∞—Å–Ω—ã–π
            4: "CCCC99",  # –û–∂–∏–¥–∞–Ω–∏–µ - –∂–µ–ª—Ç—ã–π
        }
        return color_mapping.get(column_type, "6699CC")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π

    async def migrate_board_columns(self, kaiten_board_id: int, 
                                   bitrix_group_id: int) -> Tuple[int, int, int]:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏ –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–¥–∞—á –≥—Ä—É–ø–ø—ã.
        
        :param kaiten_board_id: ID –¥–æ—Å–∫–∏ –≤ Kaiten
        :param bitrix_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
        :return: –ö–æ—Ä—Ç–µ–∂ (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö, –æ—à–∏–±–æ–∫)
        """
        created = 0
        updated = 0
        errors = 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏ –∏–∑ Kaiten
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏ {kaiten_board_id}...")
            columns = await self.kaiten_client.get_board_columns(kaiten_board_id)
            
            if not columns:
                logger.warning(f"‚ùå –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏ {kaiten_board_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0, 0, 1
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å–∫–∏ {kaiten_board_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–¥–∏–∏ –≥—Ä—É–ø–ø—ã
            existing_stages = await self.bitrix_client.get_task_stages(bitrix_group_id)
            existing_titles = set()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–¥–∏–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
            if existing_stages:
                for stage in existing_stages:
                    if isinstance(stage, dict):
                        title = stage.get('TITLE', '') or stage.get('title', '')
                        if title:
                            existing_titles.add(title.lower())
                    elif isinstance(stage, str):
                        # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                        existing_titles.add(stage.lower())
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ "–ú–æ–µ–≥–æ –ø–ª–∞–Ω–∞" 
            my_plan_keywords = ['–º–æ–π –ø–ª–∞–Ω', 'my plan', '–ª–∏—á–Ω—ã–π', 'personal']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            columns.sort(key=lambda col: col.sort_order)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–¥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
            board_mapping = {}
            
            for i, column in enumerate(columns):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞–¥–∏—è "–ú–æ–µ–≥–æ –ø–ª–∞–Ω–∞"
                    column_title_lower = column.title.lower()
                    if any(keyword in column_title_lower for keyword in my_plan_keywords):
                        logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–¥–∏—é '–ú–æ–µ–≥–æ –ø–ª–∞–Ω–∞': {column.title}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Ç–∞–¥–∏—è
                    if column.title.lower() in existing_titles:
                        logger.info(f"üîÑ –°—Ç–∞–¥–∏—è '{column.title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        updated += 1
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é
                    stage_color = self._get_stage_color(column.type)
                    sort_order = (i + 1) * 100  # 100, 200, 300...
                    
                    stage_data = await self.bitrix_client.create_task_stage(
                        entity_id=bitrix_group_id,
                        title=column.title,
                        sort=sort_order,
                        color=stage_color
                    )
                    
                    if stage_data:
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ ID (int), —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–º (dict)
                        if isinstance(stage_data, int):
                            stage_id = stage_data
                        elif isinstance(stage_data, dict):
                            stage_id = stage_data.get('ID') or stage_data.get('id')
                        else:
                            stage_id = str(stage_data)
                        
                        board_mapping[str(column.id)] = str(stage_id)
                        created += 1
                        logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞–¥–∏—è '{column.title}' (ID: {stage_id})")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–¥–∏–∏ '{column.title}'")
                        errors += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ {column.title}: {e}")
                    errors += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏
            if board_mapping:
                self.mapping[str(kaiten_board_id)] = board_mapping
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏ {kaiten_board_id}: {e}")
            errors += 1
        
        return created, updated, errors

    async def migrate_single_board(self, kaiten_board_id: int) -> Dict:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
        
        :param kaiten_board_id: ID –¥–æ—Å–∫–∏ –≤ Kaiten
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        # –ù–∞—Ö–æ–¥–∏–º ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
        bitrix_group_id = self.board_mapping.get(str(kaiten_board_id))
        
        if not bitrix_group_id:
            logger.error(f"‚ùå –ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–æ—Å–∫–∏ {kaiten_board_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
            return {
                'success': False,
                'error': f"–ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–æ—Å–∫–∏ {kaiten_board_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ"
            }
        
        try:
            bitrix_group_id = int(bitrix_group_id)
            logger.info(f"üéØ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏ {kaiten_board_id} ‚Üí –≥—Ä—É–ø–ø–∞ {bitrix_group_id}")
            
            created, updated, errors = await self.migrate_board_columns(
                kaiten_board_id, bitrix_group_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['boards_processed'] += 1
            self.stats['created'] += created
            self.stats['updated'] += updated
            self.stats['errors'] += errors
            self.stats['stages_created'] += created
            
            return {
                'success': True,
                'kaiten_board_id': kaiten_board_id,
                'bitrix_group_id': bitrix_group_id,
                'created': created,
                'updated': updated,
                'errors': errors
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ—Å–∫–∏ {kaiten_board_id}: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def migrate_all_boards(self, limit: Optional[int] = None) -> Dict:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞.
        
        :param limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å–æ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        :return: –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        total_boards = len(self.board_mapping)
        if limit:
            total_boards = min(limit, total_boards)
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è {total_boards} –¥–æ—Å–æ–∫...")
        
        processed_count = 0
        
        for kaiten_board_id in list(self.board_mapping.keys())[:limit] if limit else self.board_mapping.keys():
            if processed_count >= total_boards:
                break
                
            result = await self.migrate_single_board(int(kaiten_board_id))
            processed_count += 1
            
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}/{total_boards} –¥–æ—Å–æ–∫")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.1)
        
        self.stats['processed'] = processed_count
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self._save_mapping()
        
        return {
            'success': True,
            'stats': self.stats,
            'mapping_file': 'mappings/column_mapping.json'
        }

    async def _save_mapping(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        mapping_data = {
            'created_at': datetime.now().isoformat(),
            'description': '–ú–∞–ø–ø–∏–Ω–≥ ID –∫–æ–ª–æ–Ω–æ–∫ Kaiten -> —Å—Ç–∞–¥–∏–π –∑–∞–¥–∞—á Bitrix24',
            'stats': self.stats,
            'mapping': self.mapping
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path("mappings").mkdir(exist_ok=True)
        
        mapping_file = Path("mappings/column_mapping.json")
        with open(mapping_file, 'w', encoding='utf-8') as f:
            json.dump(mapping_data, f, ensure_ascii=False, indent=2)
        
        logger.success(f"üíæ –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {mapping_file}") 