"""
Migrator –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π Kaiten -> Bitrix24.
–õ–æ–∫–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Kaiten, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ VPS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ SQL.
"""
import json
import time
import subprocess
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime

from connectors.kaiten_client import KaitenClient
from config.settings import settings
from utils.logger import get_logger

logger = get_logger(__name__)


class CustomFieldMigrator:
    """
    Migrator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ Bitrix24.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–∞ VPS —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—è.
    """
    
    def __init__(self, kaiten_client: KaitenClient):
        self.kaiten_client = kaiten_client
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.local_json_file = Path(__file__).parent.parent / "mappings" / "custom_fields_data.json"
        self.local_mapping_file = Path(__file__).parent.parent / "mappings" / "custom_fields_mapping.json" 
        self.vps_script_path = "/root/kaiten-vps-scripts/create_custom_fields_on_vps.py"
        self.vps_json_path = "/root/kaiten-to-bitrix/mappings/custom_fields_data.json"
        self.vps_mapping_path = "/root/kaiten-to-bitrix/mappings/custom_fields_mapping.json"
        
        # –§–∞–π–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ VPS
        self.vps_progress_log = "/root/kaiten-to-bitrix/logs/custom-fields-in-progress.log"
        self.vps_completed_log = "/root/kaiten-to-bitrix/logs/custom-fields-app.log"
    
    async def migrate_all_custom_fields(self) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π
        """
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π")
            
            # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Kaiten API
            logger.info("üì• –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaiten...")
            kaiten_data = await self._fetch_kaiten_data()
            
            if not kaiten_data.get('fields'):
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                return {'success': False, 'error': 'No fields found'}
            
            # –≠—Ç–∞–ø 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞ VPS
            logger.info("üì§ –≠—Ç–∞–ø 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VPS...")
            upload_success = await self._upload_to_vps(kaiten_data)
            
            if not upload_success:
                return {'success': False, 'error': 'Failed to upload to VPS'}
            
            # –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ VPS
            logger.info("‚öôÔ∏è –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ VPS...")
            execution_success = await self._execute_on_vps()
            
            if not execution_success:
                return {'success': False, 'error': 'VPS execution failed'}
            
            # –≠—Ç–∞–ø 4: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("‚è≥ –≠—Ç–∞–ø 4: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            result = await self._wait_and_download_result()
            
            if result['success']:
                logger.success("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.get('error', 'Unknown')}")
            
            return result
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _fetch_kaiten_data(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∏–∑ Kaiten API.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
            logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π...")
            kaiten_fields = await self.kaiten_client.get_custom_properties()
            
            if not kaiten_fields:
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Kaiten")
                return {'fields': {}, 'total_fields': 0}
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(kaiten_fields)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è —Ç–∏–ø–∞ select
            fields_data = {}
            
            for field in kaiten_fields:
                field_id = str(field.get('id', ''))
                field_type = field.get('type', '')
                
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ '{field.get('name', 'N/A')}' (ID: {field_id}, —Ç–∏–ø: {field_type})")
                
                field_data = {
                    'field_info': field,
                    'values': []
                }
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
                if field_type in ['select', 'multi_select']:
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—è {field_id}...")
                    values = await self.kaiten_client.get_custom_property_select_values(int(field_id))
                    field_data['values'] = values or []
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(field_data['values'])} –∑–Ω–∞—á–µ–Ω–∏–π")
                
                fields_data[field_id] = field_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
            result_data = {
                'created_at': datetime.now().isoformat(),
                'total_fields': len(kaiten_fields),
                'fields': fields_data
            }
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            self.local_json_file.parent.mkdir(exist_ok=True)
            
            with open(self.local_json_file, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            
            logger.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ Kaiten —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ: {len(kaiten_fields)} –ø–æ–ª–µ–π, {sum(len(data['values']) for data in fields_data.values())} –∑–Ω–∞—á–µ–Ω–∏–π")
            
            return result_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaiten: {e}")
            return {'fields': {}, 'total_fields': 0, 'error': str(e)}
    
    async def _upload_to_vps(self, kaiten_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞ VPS.
        
        Args:
            kaiten_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π –∏–∑ Kaiten
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            if not settings.ssh_host or not settings.ssh_key_path:
                logger.error("‚ùå SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ VPS
            logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ VPS...")
            create_dirs_cmd = [
                "ssh", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}",
                "mkdir -p /root/kaiten-to-bitrix/mappings /root/kaiten-to-bitrix/logs /root/kaiten-to-bitrix/scripts"
            ]
            
            result = subprocess.run(create_dirs_cmd, capture_output=True, timeout=10)
            if result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {result.stderr.decode()}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
            logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VPS...")
            upload_cmd = [
                "scp", "-i", settings.ssh_key_path,
                str(self.local_json_file),
                f"{settings.ssh_user}@{settings.ssh_host}:{self.vps_json_path}"
            ]
            
            result = subprocess.run(upload_cmd, capture_output=True, timeout=30)
            if result.returncode != 0:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JSON: {result.stderr.decode()}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            vps_script_local = Path(__file__).parent.parent / "scripts" / "create_custom_fields_on_vps.py"
            if vps_script_local.exists():
                logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ VPS...")
                script_cmd = [
                    "scp", "-i", settings.ssh_key_path,
                    str(vps_script_local),
                    f"{settings.ssh_user}@{settings.ssh_host}:{self.vps_script_path}"
                ]
                
                result = subprocess.run(script_cmd, capture_output=True, timeout=30)
                if result.returncode != 0:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: {result.stderr.decode()}")
            
            logger.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ VPS")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ VPS: {e}")
            return False
    
    async def _execute_on_vps(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ VPS.
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not settings.ssh_host or not settings.ssh_key_path:
                logger.error("‚ùå SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
            cleanup_cmd = [
                "ssh", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}",
                f"rm -f {self.vps_progress_log} {self.vps_completed_log}"
            ]
            
            subprocess.run(cleanup_cmd, capture_output=True, timeout=10)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–æ–Ω–µ
            logger.debug("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞ VPS...")
            execute_cmd = [
                "ssh", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}",
                f"cd /root/kaiten-to-bitrix && python3 {self.vps_script_path} > /dev/null 2>&1 &"
            ]
            
            result = subprocess.run(execute_cmd, capture_output=True, timeout=15)
            
            if result.returncode == 0:
                logger.success("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ VPS")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: {result.stderr.decode()}")
                return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ VPS: {e}")
            return False
    
    async def _wait_and_download_result(self) -> Dict[str, Any]:
        """
        –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ VPS –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            max_attempts = 5
            wait_interval = 10  # —Å–µ–∫—É–Ω–¥
            
            for attempt in range(max_attempts):
                logger.info(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ({attempt + 1}/{max_attempts})...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                check_cmd = [
                    "ssh", "-i", settings.ssh_key_path,
                    f"{settings.ssh_user}@{settings.ssh_host}",
                    f"test -f {self.vps_completed_log} && echo 'COMPLETED' || echo 'IN_PROGRESS'"
                ]
                
                result = subprocess.run(check_cmd, capture_output=True, timeout=10)
                
                if result.returncode == 0 and 'COMPLETED' in result.stdout.decode():
                    logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ VPS –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    return await self._download_results()
                
                if attempt < max_attempts - 1:
                    logger.debug(f"üí§ –ñ–¥–µ–º {wait_interval} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_interval)
            
            # –¢–∞–π–º–∞—É—Ç - —Å–∫–∞—á–∏–≤–∞–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è VPS —Å–∫—Ä–∏–ø—Ç–∞")
            return await self._download_error_log()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _download_results(self) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å VPS.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π
        """
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            local_log = Path(__file__).parent.parent / "logs" / "custom_fields_vps.log"
            local_log.parent.mkdir(exist_ok=True)
            
            download_log_cmd = [
                "scp", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}:{self.vps_completed_log}",
                str(local_log)
            ]
            
            subprocess.run(download_log_cmd, capture_output=True, timeout=30)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
            download_mapping_cmd = [
                "scp", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}:{self.vps_mapping_path}",
                str(self.local_mapping_file)
            ]
            
            result = subprocess.run(download_mapping_cmd, capture_output=True, timeout=30)
            
            if result.returncode == 0:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å VPS
                cleanup_cmd = [
                    "ssh", "-i", settings.ssh_key_path,
                    f"{settings.ssh_user}@{settings.ssh_host}",
                    f"rm -f {self.vps_completed_log} {self.vps_mapping_path}"
                ]
                subprocess.run(cleanup_cmd, capture_output=True, timeout=10)
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if self.local_mapping_file.exists():
                    with open(self.local_mapping_file, 'r', encoding='utf-8') as f:
                        mapping_data = json.load(f)
                    
                    logger.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {len(mapping_data.get('fields', {}))} –ø–æ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return {
                        'success': True,
                        'mapping': mapping_data,
                        'log_file': str(local_log)
                    }
                else:
                    return {'success': False, 'error': 'Mapping file not found'}
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.stderr.decode()}")
                return {'success': False, 'error': 'Download failed'}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _download_error_log(self) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –ª–æ–≥ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            local_error_log = Path(__file__).parent.parent / "logs" / "custom_fields_error.log"
            local_error_log.parent.mkdir(exist_ok=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            download_cmd = [
                "scp", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}:{self.vps_progress_log}",
                str(local_error_log)
            ]
            
            subprocess.run(download_cmd, capture_output=True, timeout=30)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å VPS
            cleanup_cmd = [
                "ssh", "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}",
                f"rm -f {self.vps_progress_log}"
            ]
            subprocess.run(cleanup_cmd, capture_output=True, timeout=10)
            
            logger.error(f"‚ùå –õ–æ–≥ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {local_error_log}")
            
            return {
                'success': False,
                'error': 'VPS script timeout or error',
                'error_log': str(local_error_log)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–∞ –æ—à–∏–±–∫–∏: {e}")
            return {'success': False, 'error': f'Error log download failed: {e}'} 