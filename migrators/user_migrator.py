"""
–ú–∏–≥—Ä–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Kaiten –≤ Bitrix24.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–∞–ø–ø–∏–Ω–≥–∞ ID.
"""

import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from transformers.user_transformer import UserTransformer
from models.kaiten_models import KaitenUser
from models.bitrix_models import BitrixUser
from utils.logger import get_logger

logger = get_logger(__name__)


class UserMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten –≤ Bitrix24.
    
    –õ–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten (—Ç–æ–ª—å–∫–æ —Å email)
    2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24
    3. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Bitrix24
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π kaiten_user_id -> bitrix_user_id
        self.user_mapping: Dict[str, str] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.stats = {
            'total_kaiten': 0,
            'with_email': 0,
            'processed': 0,
            'created': 0,
            'updated': 0,
            'skipped': 0,
            'errors': 0,
            'mapping_saved': 0
        }
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        self.transformer: Optional[UserTransformer] = None

    async def migrate_users(self) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten –≤ Bitrix24.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–£–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó KAITEN –í BITRIX24")
            logger.info("=" * 80)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥
            await self._load_user_mapping()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten...")
            kaiten_users = await self.kaiten_client.get_users()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email
            users_with_email = [user for user in kaiten_users if user.email and user.email.strip()]
            
            self.stats['total_kaiten'] = len(kaiten_users)
            self.stats['with_email'] = len(users_with_email)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(kaiten_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Kaiten")
            logger.info(f"üìß –ò–∑ –Ω–∏—Ö {len(users_with_email)} –∏–º–µ—é—Ç email –∞–¥—Ä–µ—Å–∞")
            
            if not users_with_email:
                logger.warning("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏!")
                return self._get_migration_result(False, "No users with email found")
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24 (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24...")
            bitrix_users = await self.bitrix_client.get_users()
            initial_bitrix_count = len(bitrix_users)
            logger.info(f"üë• –í Bitrix24 —É–∂–µ –µ—Å—Ç—å {initial_bitrix_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Bitrix24
            self.transformer = UserTransformer(bitrix_users)
            
            logger.info("=" * 80)
            logger.info(f"‚öôÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê {len(users_with_email)} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° EMAIL...")
            logger.info("=" * 80)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email –∏–∑ Kaiten
            for i, kaiten_user in enumerate(users_with_email, 1):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                if self.stats['processed'] % 10 == 0 or self.stats['processed'] == len(users_with_email):
                    logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.stats['processed']}/{len(users_with_email)} "
                               f"({self.stats['processed']/len(users_with_email)*100:.1f}%)")
                
                await self._process_single_user(kaiten_user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
            await self._save_user_mapping()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Bitrix24
            logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Bitrix24...")
            final_bitrix_users = await self.bitrix_client.get_users()
            final_bitrix_count = len(final_bitrix_users)
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self._print_migration_stats(initial_bitrix_count, final_bitrix_count)
            
            return self._get_migration_result(True)
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
            return self._get_migration_result(False, str(e))

    async def _process_single_user(self, kaiten_user: KaitenUser) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Kaiten.
        
        Args:
            kaiten_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Kaiten –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.stats['processed'] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Bitrix24
            existing_user = self.transformer.transform(kaiten_user)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Bitrix24
            user_data = self.transformer.kaiten_to_bitrix_data(kaiten_user)
            if not user_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {kaiten_user.email}")
                self.stats['errors'] += 1
                return
            
            bitrix_user = None
            
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {kaiten_user.email}")
                bitrix_user = await self.bitrix_client.update_user(existing_user.ID, user_data)
                
                if bitrix_user:
                    self.stats['updated'] += 1
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.user_mapping[str(kaiten_user.id)] = str(existing_user.ID)
                    self.stats['mapping_saved'] += 1
                    logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {kaiten_user.email} (Kaiten ID: {kaiten_user.id} -> Bitrix ID: {existing_user.ID})")
                else:
                    self.stats['errors'] += 1
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {kaiten_user.email}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.debug(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {kaiten_user.email}")
                bitrix_user = await self.bitrix_client.create_user(user_data)
                
                if bitrix_user:
                    self.stats['created'] += 1
                    self.user_mapping[str(kaiten_user.id)] = str(bitrix_user.ID)
                    self.stats['mapping_saved'] += 1
                    logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω: {kaiten_user.email} (Kaiten ID: {kaiten_user.id} -> Bitrix ID: {bitrix_user.ID})")
                else:
                    self.stats['errors'] += 1
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {kaiten_user.email}")
                    
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {kaiten_user.email}: {e}")
            self.stats['errors'] += 1

    async def _load_user_mapping(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞.
        
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            
            if mapping_file.exists():
                with open(mapping_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    existing_mapping = data.get("mapping", {})
                    
                if existing_mapping:
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥: {len(existing_mapping)} –∑–∞–ø–∏—Å–µ–π")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–∑–∂–µ
                    self.user_mapping.update(existing_mapping)
                    
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            return False

    async def _save_user_mapping(self) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª.
        
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            mapping_file.parent.mkdir(exist_ok=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existing_stats = {"created": 0, "updated": 0, "errors": 0}
            
            if mapping_file.exists():
                try:
                    with open(mapping_file, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                        existing_stats = existing_data.get("stats", existing_stats)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            combined_stats = {
                "created": existing_stats["created"] + self.stats["created"],
                "updated": existing_stats["updated"] + self.stats["updated"], 
                "errors": existing_stats["errors"] + self.stats["errors"]
            }
            
            mapping_data = {
                "created_at": datetime.now().isoformat(),
                "description": "–ú–∞–ø–ø–∏–Ω–≥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Kaiten -> Bitrix24",
                "stats": combined_stats,
                "mapping": self.user_mapping
            }
            
            with open(mapping_file, 'w', encoding='utf-8') as f:
                json.dump(mapping_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {mapping_file}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    def _print_migration_stats(self, initial_bitrix_count: int, final_bitrix_count: int) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            initial_bitrix_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Bitrix24 –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
            final_bitrix_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Bitrix24 –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        logger.info("=" * 80)
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("=" * 80)
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:")
        logger.info(f"  üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Kaiten: {self.stats['total_kaiten']}")
        logger.info(f"  üìß –° email –∞–¥—Ä–µ—Å–∞–º–∏: {self.stats['with_email']}")
        logger.info(f"  ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}")
        logger.info(f"  ‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {self.stats['created']}")
        logger.info(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {self.stats['updated']}")
        logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        logger.info(f"  üîó –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.stats['mapping_saved']} –∑–∞–ø–∏—Å–µ–π")
        logger.info("")
        logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –í BITRIX24:")
        logger.info(f"  üë• –ë—ã–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {initial_bitrix_count}")
        logger.info(f"  üë• –°—Ç–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {final_bitrix_count}")
        logger.info(f"  ‚ûï –ü—Ä–∏—Ä–æ—Å—Ç: {final_bitrix_count - initial_bitrix_count}")
        logger.info("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        if self.stats['with_email'] > 0:
            success_rate = ((self.stats['created'] + self.stats['updated']) / self.stats['with_email']) * 100
            logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û–°–¢–¨ –ú–ò–ì–†–ê–¶–ò–ò: {success_rate:.1f}%")
            
            if success_rate >= 95:
                logger.info("üèÜ –û–¢–õ–ò–ß–ù–û! –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            elif success_rate >= 80:
                logger.info("üëç –•–û–†–û–®–û! –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏")
            else:
                logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

    def _get_migration_result(self, success: bool, error: str = None) -> Dict:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
            error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        result = {
            'success': success,
            'stats': self.stats,
            'mapping_file': 'mappings/user_mapping.json'
        }
        
        if error:
            result['error'] = error
            
        return result

    async def get_user_mapping(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –º–∞–ø–ø–∏–Ω–≥–∞ {kaiten_user_id: bitrix_user_id}
        """
        await self._load_user_mapping()
        return self.user_mapping.copy()

    def print_migration_stats_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –ú–ò–ì–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        logger.info(f"  üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}")
        logger.info(f"  ‚ûï –°–æ–∑–¥–∞–Ω–æ: {self.stats['created']}")
        logger.info(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats['updated']}")
        logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}") 