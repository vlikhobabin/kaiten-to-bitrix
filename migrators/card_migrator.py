"""
–ú–∏–≥—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ Kaiten –≤ –∑–∞–¥–∞—á–∏ Bitrix24.
–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –ó–∞–¥–∞—á–µ 8.
"""

import asyncio
import json
import subprocess
import re
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple, Union, Any

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from models.kaiten_models import KaitenCard, KaitenBoard, KaitenColumn
from models.simple_kaiten_models import SimpleKaitenCard
from transformers.card_transformer import CardTransformer
from transformers.user_transformer import UserTransformer
from config.settings import settings
from utils.logger import get_logger

logger = get_logger(__name__)

class UserMappingTransformer:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º.
    """
    
    def __init__(self, user_mapping: Dict[str, str]):
        self.user_mapping = user_mapping  # kaiten_user_id -> bitrix_user_id
    
    def get_user_id(self, kaiten_user) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Bitrix24 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Kaiten.
        
        Args:
            kaiten_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Kaiten
            
        Returns:
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Bitrix24 –∏–ª–∏ None
        """
        if not kaiten_user:
            return None
            
        kaiten_user_id = str(kaiten_user.id)
        bitrix_user_id = self.user_mapping.get(kaiten_user_id)
        
        if bitrix_user_id:
            logger.debug(f"–ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥: Kaiten user {kaiten_user.full_name} (ID: {kaiten_user_id}) -> Bitrix ID: {bitrix_user_id}")
            return bitrix_user_id
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {kaiten_user.full_name} (ID: {kaiten_user_id})")
            return None

class CardMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Kaiten –≤ –∑–∞–¥–∞—á–∏ Bitrix24.
    
    –ü—Ä–∞–≤–∏–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:
    1. –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ type: 1 -> —Å—Ç–∞–¥–∏—è "–ù–æ–≤—ã–µ"
    2. –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ type: 3 -> –ù–ï –ü–ï–†–ï–ù–û–°–Ø–¢–°–Ø
    3. –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ -> —Å—Ç–∞–¥–∏—è "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"
    """
    
    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π UserTransformer, –æ–Ω –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞
        self.user_transformer = None
        self.card_transformer = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞–¥–∏–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
        self.user_mapping: Dict[str, str] = {}
        self.stage_mapping: Dict[str, str] = {}  # {"–ù–æ–≤—ã–µ": "stage_id", "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è": "stage_id"}
        self.card_mapping: Dict[str, str] = {}  # {"kaiten_card_id": "bitrix_task_id"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.stats = {
            'cards_total': 0,
            'cards_filtered_out': 0,
            'cards_migrated': 0,
            'cards_updated': 0,  # –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            'cards_failed': 0,
            'boards_processed': 0,
            'checklists_migrated': 0,  # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            'checklist_items_migrated': 0,  # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            'comments_migrated': 0,  # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            'comments_skipped': 0,   # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–æ—Ç –±–æ—Ç–æ–≤)
            'description_files_migrated': 0  # –°—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        }

    async def load_user_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                return False
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.user_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_mapping)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞
            self.user_transformer = UserMappingTransformer(self.user_mapping)
            self.card_transformer = CardTransformer(self.user_transformer)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    async def load_card_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "card_mapping.json"
            
            if not mapping_file.exists():
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                await self.save_card_mapping()
                logger.info("üìÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
                return True
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.card_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(self.card_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False

    async def save_card_mapping(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "card_mapping.json"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            mapping_file.parent.mkdir(exist_ok=True)
            
            data = {
                "created_at": datetime.now().isoformat(),
                "description": "–ú–∞–ø–ø–∏–Ω–≥ ID –∫–∞—Ä—Ç–æ—á–µ–∫ Kaiten -> –∑–∞–¥–∞—á Bitrix24",
                "stats": {
                    "total_migrated": len(self.card_mapping),
                    "last_updated": datetime.now().isoformat()
                },
                "mapping": self.card_mapping
            }
            
            with open(mapping_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(self.card_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False

    async def get_group_id_for_space(self, space_id: int) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã Bitrix24 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞.
        
        Args:
            space_id: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten
            
        Returns:
            ID –≥—Ä—É–ø–ø—ã Bitrix24 –∏–ª–∏ None –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "space_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª space_mapping.json")
                return None
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                mapping = data.get('mapping', {})
            
            # –ò—â–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            space_id_str = str(space_id)
            if space_id_str in mapping:
                group_id = int(mapping[space_id_str])
                logger.debug(f"üìã –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥: –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {space_id} -> –≥—Ä—É–ø–ø–∞ {group_id}")
                return group_id
            else:
                logger.debug(f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
            return None

    async def get_task_stages_by_names(self, group_id: int, stage_names: List[str]) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Å—Ç–∞–¥–∏–π –∑–∞–¥–∞—á –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º.
        
        Args:
            group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            stage_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞–¥–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∞–¥–∏–∏: stage_id}
        """
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}...")
            stages_data = await self.bitrix_client.get_task_stages(group_id)
            
            stage_mapping = {}
            if stages_data:
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {stage_id: stage_object}
                if isinstance(stages_data, dict):
                    for stage_id, stage in stages_data.items():
                        if isinstance(stage, dict):
                            title = stage.get('TITLE', '') or stage.get('title', '')
                            
                            if title in stage_names:
                                stage_mapping[title] = str(stage_id)
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–¥–∏—è '{title}' —Å ID {stage_id}")
                # Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ API –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫
                elif isinstance(stages_data, list):
                    for stage in stages_data:
                        if isinstance(stage, dict):
                            title = stage.get('TITLE', '') or stage.get('title', '')
                            stage_id = stage.get('ID') or stage.get('id')
                            
                            if title in stage_names and stage_id:
                                stage_mapping[title] = str(stage_id)
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–¥–∏—è '{title}' —Å ID {stage_id}")
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(stage_mapping)} –∏–∑ {len(stage_names)} —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å—Ç–∞–¥–∏–π")
            return stage_mapping
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π: {e}")
            return {}

    def get_target_stage_for_card(self, card: Union[KaitenCard, SimpleKaitenCard]) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        """
        if hasattr(card, 'column') and card.column:
            column_type = card.column.type
        else:
            column_type = None
        
        if column_type == 1:  # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
            return "–ù–æ–≤—ã–µ"
        elif column_type == 3:  # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
            return None
        else:  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è None)
            return "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"

    def should_migrate_card(self, card: Union[KaitenCard, SimpleKaitenCard]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            
        Returns:
            True –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å, False –∏–Ω–∞—á–µ
        """
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–ª–æ–Ω–∫–∏
        if hasattr(card, 'column') and card.column and card.column.type == 3:
            logger.debug(f"üö´ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card.title}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ type: 3)")
            return False
            
        # –§–∏–ª—å—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        if card.archived:
            logger.debug(f"üö´ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card.title}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–∞—Ä—Ö–∏–≤–Ω–∞—è)")
            return False
            
        return True

    async def migrate_cards_from_space(self, space_id: int, target_group_id: int, 
                                     list_only: bool = False, limit: int = None, card_id: int = None) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
        
        Args:
            space_id: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
            limit: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å–∫–∏
            card_id: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            if card_id:
                return await self.migrate_single_card_by_id(card_id, target_group_id, list_only)
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not await self.load_user_mapping():
                return False
            
            if not await self.load_card_mapping():
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}...")
            boards = await self.kaiten_client.get_boards(space_id)
            
            if not boards:
                logger.warning(f"‚ö†Ô∏è –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ {space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫")
                return True
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(boards)} –¥–æ—Å–æ–∫ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ")
            
            # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            if not list_only:
                required_stages = ["–ù–æ–≤—ã–µ", "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"]
                self.stage_mapping = await self.get_task_stages_by_names(target_group_id, required_stages)
                
                if len(self.stage_mapping) != len(required_stages):
                    missing_stages = set(required_stages) - set(self.stage_mapping.keys())
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–¥–∏–∏: {missing_stages}")
                    return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É
            processed_cards = 0
            for board in boards:
                remaining_limit = limit - processed_cards if limit else None
                cards_processed_from_board = await self.process_board(
                    board, target_group_id, list_only, remaining_limit
                )
                processed_cards += cards_processed_from_board
                self.stats['boards_processed'] += 1
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç –∏ –º—ã –µ–≥–æ –¥–æ—Å—Ç–∏–≥–ª–∏, –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–µ—Ä–≤—É—é –¥–æ—Å–∫—É –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
                if limit and (processed_cards >= limit or cards_processed_from_board > 0):
                    if processed_cards >= limit:
                        logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_cards} –∫–∞—Ä—Ç–æ—á–µ–∫")
                    else:
                        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å–∫–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏: {cards_processed_from_board} –∫–∞—Ä—Ç–æ—á–µ–∫")
                    break
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_migration_stats()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}: {e}")
            return False

    async def migrate_single_card_by_id(self, card_id: int, target_group_id: int, list_only: bool = False) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –µ–µ ID.
        
        Args:
            card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not await self.load_user_mapping():
                return False
            
            if not await self.load_card_mapping():
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ ID
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id} –∏–∑ Kaiten...")
            card = await self.kaiten_client.get_card_by_id(card_id)
            
            if not card:
                logger.error(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Kaiten")
                return False
            
            logger.info(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: '{card.title}'")
            
            # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            if not list_only:
                required_stages = ["–ù–æ–≤—ã–µ", "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"]
                self.stage_mapping = await self.get_task_stages_by_names(target_group_id, required_stages)
                
                if len(self.stage_mapping) != len(required_stages):
                    missing_stages = set(required_stages) - set(self.stage_mapping.keys())
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–¥–∏–∏: {missing_stages}")
                    return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            self.stats['cards_total'] = 1
            processed = await self.process_card(card, target_group_id, list_only)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_migration_stats()
            
            return processed
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}: {e}")
            return False

    async def process_board(self, board: KaitenBoard, target_group_id: int, list_only: bool = False, limit: int = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏.
        
        Args:
            board: –î–æ—Å–∫–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        """
        try:
            logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å–∫–∏ '{board.title}' (ID: {board.id})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç (–∏—Å–∫–ª—é—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ)
            try:
                cards_data = await self.kaiten_client._request('GET', f'/api/v1/cards?board_id={board.id}&archived=false')
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ
                cards = []
                if cards_data:
                    logger.debug(f"   üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {len(cards_data)} –∫–∞—Ä—Ç–æ—á–µ–∫...")
                    for card_data in cards_data:
                        try:
                            card_id = card_data.get('id')
                            if card_id:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                                full_card = await self.kaiten_client.get_card_by_id(card_id)
                                if full_card:
                                    cards.append(full_card)
                                else:
                                    # Fallback –∫ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                                    card = SimpleKaitenCard(**card_data)
                                    cards.append(card)
                            else:
                                logger.debug(f"   ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ ID: {card_data}")
                        except Exception as e:
                            logger.debug(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É {card_data.get('id', 'unknown')}: {e}")
            except Exception as e:
                logger.debug(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ board_id: {e}")
                cards = []
            
            if not cards:
                logger.info(f"   üì≠ –î–æ—Å–∫–∞ '{board.title}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")
                return 0
            
            logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ")
            self.stats['cards_total'] += len(cards)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
            cards_to_process = cards[:limit] if limit else cards
            processed_count = 0
            
            if limit and len(cards_to_process) < len(cards):
                logger.info(f"   üéØ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cards_to_process)} –∏–∑ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ (–ª–∏–º–∏—Ç)")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            for card in cards_to_process:
                processed = await self.process_card(card, target_group_id, list_only)
                if processed:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
                    processed_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                if limit and processed_count >= limit:
                    break
            
            return processed_count
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å–∫–∏ {board.title}: {e}")
            return 0

    async def process_card(self, card: Union[KaitenCard, SimpleKaitenCard], target_group_id: int, list_only: bool = False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
            
        Returns:
            True –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞), False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
            card_id_str = str(card.id)
            if card_id_str in self.card_mapping:
                existing_task_id = self.card_mapping[card_id_str]
                if list_only:
                    logger.info(f"   ‚è≠Ô∏è  –ö–∞—Ä—Ç–æ—á–∫–∞: ID {card.id}, '{card.title}' -> –£–ñ–ï –ú–ò–ì–†–ò–†–û–í–ê–ù–ê (–∑–∞–¥–∞—á–∞ ID {existing_task_id})")
                    return True  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                    logger.info(f"   üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É '{card.title}' (ID: {card.id}) -> –∑–∞–¥–∞—á–∞ ID {existing_task_id}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    target_stage = self.get_target_stage_for_card(card)
                    if not target_stage:
                        self.stats['cards_filtered_out'] += 1
                        return False
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
                    await self.update_existing_card(card, int(existing_task_id), target_group_id, target_stage)
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
            if not self.should_migrate_card(card):
                self.stats['cards_filtered_out'] += 1
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é
            target_stage = self.get_target_stage_for_card(card)
            if not target_stage:
                self.stats['cards_filtered_out'] += 1
                return False
            
            if list_only:
                # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
                column_type = card.column.type if (hasattr(card, 'column') and card.column) else 'unknown'
                logger.info(f"   üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞: ID {card.id}, '{card.title}', –∫–æ–ª–æ–Ω–∫–∞ type: {column_type} -> —Å—Ç–∞–¥–∏—è '{target_stage}'")
                return True
            
            # –†–µ–∂–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            await self.migrate_single_card(card, target_group_id, target_stage)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {e}")
            self.stats['cards_failed'] += 1
            return False

    async def migrate_single_card(self, card: Union[KaitenCard, SimpleKaitenCard], target_group_id: int, target_stage: str):
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∑–∞–¥–∞—á—É Bitrix24.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            target_stage: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            original_description = getattr(card, 'description', '') or ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            custom_properties = await self.get_custom_properties_from_card(card)
            custom_properties_text = await self.format_custom_properties_for_description(custom_properties)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
            if custom_properties_text:
                enhanced_description = custom_properties_text + original_description
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}")
            else:
                enhanced_description = original_description
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if hasattr(card, 'description'):
                card.description = enhanced_description
            
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç Bitrix24 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            task_data = self.card_transformer.transform(card, str(target_group_id))
            
            if not task_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É '{card.title}'")
                self.stats['cards_failed'] += 1
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é
            stage_id = self.stage_mapping.get(target_stage)
            if stage_id:
                task_data['STAGE_ID'] = stage_id
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24 —Å –∏—Å—Ö–æ–¥–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            task_id = await self.bitrix_client.create_task(
                title=task_data['TITLE'],
                description=task_data.get('DESCRIPTION', ''),
                responsible_id=task_data['RESPONSIBLE_ID'],
                group_id=target_group_id,
                **{k: v for k, v in task_data.items() 
                   if k not in ['TITLE', 'DESCRIPTION', 'RESPONSIBLE_ID', 'GROUP_ID']}
            )
            
            if task_id:
                logger.success(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card.title}' -> –ó–∞–¥–∞—á–∞ ID {task_id} (—Å—Ç–∞–¥–∏—è '{target_stage}')")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                self.card_mapping[str(card.id)] = str(task_id)
                await self.save_card_mapping()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å –Ω–æ–≤—ã–º task_id –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º enhanced_description –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ (–≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è)
                updated_description, migrated_files = await self.migrate_description_files(
                    card.id, target_group_id, enhanced_description, task_id
                )
                
                # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (—Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã), –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                if updated_description != enhanced_description:
                    update_success = await self.bitrix_client.update_task(
                        task_id=task_id,
                        DESCRIPTION=updated_description
                    )
                    if update_success and migrated_files > 0:
                        logger.info(f"   üìé –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_files} —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ {task_id}")
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã
                await self.migrate_card_checklists(card.id, task_id, card.title)
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                await self.migrate_card_comments(card.id, task_id, card.title, target_group_id)
                
                self.stats['cards_migrated'] += 1
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}'")
                self.stats['cards_failed'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}': {e}")
            self.stats['cards_failed'] += 1
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            if hasattr(card, 'description'):
                card.description = original_description

    async def update_existing_card(self, card: Union[KaitenCard, SimpleKaitenCard], task_id: int, target_group_id: int, target_stage: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24 –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            task_id: ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –≤ Bitrix24
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            target_stage: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            original_description = getattr(card, 'description', '') or ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            custom_properties = await self.get_custom_properties_from_card(card)
            custom_properties_text = await self.format_custom_properties_for_description(custom_properties)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
            if custom_properties_text:
                enhanced_description = custom_properties_text + original_description
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id} –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            else:
                enhanced_description = original_description
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏
            updated_description, migrated_files = await self.migrate_description_files(
                card.id, target_group_id, enhanced_description, task_id
            )
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if hasattr(card, 'description'):
                card.description = updated_description
            
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç Bitrix24
            task_data = self.card_transformer.transform(card, str(target_group_id))
            
            if not task_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É '{card.title}' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                self.stats['cards_failed'] += 1
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é
            stage_id = self.stage_mapping.get(target_stage)
            if stage_id:
                task_data['STAGE_ID'] = stage_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24
            success = await self.bitrix_client.update_task(
                task_id=task_id,
                **task_data
            )
            
            if success:
                logger.success(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ID {task_id} –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}' (—Å—Ç–∞–¥–∏—è '{target_stage}')")
                if migrated_files > 0:
                    logger.info(f"   üìé –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_files} —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏ {task_id}")
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º)
                await self.migrate_card_checklists(card.id, task_id, card.title, is_update=True)
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º)
                await self.migrate_card_comments(card.id, task_id, card.title, target_group_id, is_update=True)
                
                self.stats['cards_updated'] += 1
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É ID {task_id} –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}'")
                self.stats['cards_failed'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID {task_id} –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}': {e}")
            self.stats['cards_failed'] += 1
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            if hasattr(card, 'description'):
                card.description = original_description

    async def migrate_card_checklists(self, card_id: int, task_id: int, card_title: str, is_update: bool = False) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten –≤ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏ Bitrix24.
        
        Args:
            card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten
            task_id: ID –∑–∞–¥–∞—á–∏ Bitrix24
            card_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            is_update: –ï—Å–ª–∏ True, —Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã
            existing_checklists = []
            if is_update:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏ {task_id}...")
                existing_items = await self.bitrix_client.get_task_checklists(task_id)
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø —á–µ–∫-–ª–∏—Å—Ç–æ–≤
                for item in existing_items:
                    parent_id = item.get('PARENT_ID') or item.get('parent_id')
                    # –≠—Ç–æ –≥—Ä—É–ø–ø–∞ (–∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç)
                    if not parent_id or parent_id == 'N/A' or str(parent_id) == '0':
                        title = item.get('TITLE') or item.get('title', '')
                        if title and title not in existing_checklists:
                            existing_checklists.append(title)
                
                if existing_checklists:
                    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing_checklists)} –≥—Ä—É–ø–ø —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {', '.join(existing_checklists[:3])}{'...' if len(existing_checklists) > 3 else ''}")
                else:
                    logger.debug(f"‚úÖ –£ –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Kaiten
            checklists = await self.kaiten_client.get_card_checklists(card_id)
            
            if not checklists:
                logger.debug(f"–£ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}' –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤")
                return True
            
            logger.info(f"üìã –ü–µ—Ä–µ–Ω–æ—Å–∏–º {len(checklists)} —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}'")
            
            migrated_checklists = 0
            migrated_items = 0
            
            for checklist in checklists:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'name' –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ (–∫–∞–∫ –≤ Kaiten API)
                    checklist_title = checklist.get('name', checklist.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    checklist_items = checklist.get('items', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    if is_update and checklist_title in existing_checklists:
                        logger.debug(f"   ‚è≠Ô∏è –ß–µ–∫-–ª–∏—Å—Ç '{checklist_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    logger.debug(f"   üìã –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–ª–∏—Å—Ç '{checklist_title}' —Å {len(checklist_items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —á–µ–∫-–ª–∏—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    group_id = await self.bitrix_client.create_checklist_group(
                        task_id=task_id,
                        title=checklist_title
                    )
                    
                    if group_id:
                        migrated_checklists += 1
                        logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ '{checklist_title}' —Å ID {group_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ '{checklist_title}', —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–∑ –≥—Ä—É–ø–ø—ã")
                        group_id = None  # –≠–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ (–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å)
                    for item in checklist_items:
                        item_text = item.get('text', item.get('title', ''))
                        is_complete = item.get('checked', False) or item.get('completed', False)
                        
                        if item_text.strip():
                            await self.bitrix_client.add_checklist_item(
                                task_id=task_id,
                                title=item_text,  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –∏ —ç–º–æ–¥–∑–∏ - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                is_complete=is_complete,
                                parent_id=group_id  # –£–∫–∞–∑—ã–≤–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–∏–ª–∏ None)
                            )
                            migrated_items += 1
                    
                except Exception as e:
                    checklist_name = checklist.get('name', checklist.get('title', 'unknown'))
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ '{checklist_name}': {e}")
                    continue
            
            if migrated_checklists > 0:
                logger.success(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_checklists} —á–µ–∫-–ª–∏—Å—Ç–æ–≤, {migrated_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                self.stats['checklists_migrated'] += migrated_checklists
                self.stats['checklist_items_migrated'] += migrated_items
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}': {e}")
            return False

    def update_comment_dates_via_ssh(self, comment_dates: Dict[str, str]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ SSH –≤—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä–µ.
        
        Args:
            comment_dates: –°–ª–æ–≤–∞—Ä—å {comment_id: datetime_string}
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        if not comment_dates:
            logger.debug("–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSH –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not settings.ssh_host or not settings.ssh_key_path:
            logger.warning("‚ö†Ô∏è SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            logger.info("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH –¥–æ–±–∞–≤—å—Ç–µ SSH_HOST –∏ SSH_KEY_PATH –≤ .env —Ñ–∞–π–ª")
            return True
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            json_data = json.dumps(comment_dates)
            
            # SSH –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            ssh_command = [
                "ssh", 
                "-i", settings.ssh_key_path,
                f"{settings.ssh_user}@{settings.ssh_host}",
                f"python3 {settings.vps_script_path} '{json_data}'"
            ]
            
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è {len(comment_dates)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ SSH...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                ssh_command,
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            if result.returncode == 0:
                logger.success(f"‚úÖ –î–∞—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ SSH")
                if result.stdout:
                    # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    output_lines = result.stdout.strip().split('\n')
                    for line in output_lines[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
                        if line.strip():
                            logger.debug(f"  SSH: {line}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ SSH –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    logger.error(f"SSH stderr: {result.stderr}")
                if result.stdout:
                    logger.error(f"SSH stdout: {result.stdout}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH –∫–æ–º–∞–Ω–¥—ã")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False

    async def migrate_card_comments(self, card_id: int, task_id: int, card_title: str, target_group_id: int, is_update: bool = False) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–¥–∞—á–∏ Bitrix24 —Å —Ñ–∞–π–ª–∞–º–∏.
        –° —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞—Ç —á–µ—Ä–µ–∑ SSH –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä.
        
        Args:
            card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten
            task_id: ID –∑–∞–¥–∞—á–∏ Bitrix24
            card_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            is_update: –ï—Å–ª–∏ True, —Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            existing_comments = []
            if is_update:
                logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}...")
                existing_comments_data = await self.bitrix_client.get_task_comments(task_id)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                for comment in existing_comments_data:
                    text = comment.get('POST_MESSAGE', '').strip()
                    if text:
                        existing_comments.append(text)
                
                if existing_comments:
                    logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∑–∞–¥–∞—á–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Kaiten
            comments = await self.kaiten_client.get_card_comments(card_id)
            
            if not comments:
                logger.debug(f"–£ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}' –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
            card_files = await self.kaiten_client.get_card_files(card_id)
            files_by_comment = {}  # {comment_id: [—Ñ–∞–π–ª—ã]}
            
            if card_files:
                logger.debug(f"üìé –ù–∞–π–¥–µ–Ω–æ {len(card_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}")
                for file_info in card_files:
                    comment_id = file_info.get('comment_id')
                    if comment_id:
                        if comment_id not in files_by_comment:
                            files_by_comment[comment_id] = []
                        files_by_comment[comment_id].append(file_info)
            
            logger.info(f"üí¨ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}'" + 
                       (f" —Å {len(card_files)} —Ñ–∞–π–ª–∞–º–∏" if card_files else ""))
            
            migrated_comments = 0
            skipped_comments = 0
            migrated_files = 0
            comment_dates_to_update = {}  # {comment_id: original_date}
            
            for comment in comments:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    comment_text = comment.get('text', '').strip()
                    author_data = comment.get('author', {})
                    created_date = comment.get('created')  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ!)
                    
                    if not comment_text:
                        logger.debug(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä –≤ –º–∞–ø–ø–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    author_id_raw = author_data.get('id')
                    author_name = author_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID) –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
                    if author_id_raw is None or author_id_raw < 0:
                        logger.debug(f"   ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞: {author_name}")
                        skipped_comments += 1
                        continue
                    
                    author_id_kaiten = str(author_id_raw)
                    if author_id_kaiten not in self.user_mapping:
                        logger.debug(f"   ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ –º–∞–ø–ø–∏–Ω–≥–∞: {author_name} (ID: {author_id_kaiten})")
                        skipped_comments += 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –≤ Bitrix24
                    author_id_bitrix = int(self.user_mapping[author_id_kaiten])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    if is_update and comment_text in existing_comments:
                        logger.debug(f"   ‚è≠Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                    kaiten_comment_id = comment.get('id')
                    comment_files = files_by_comment.get(kaiten_comment_id, [])
                    
                    uploaded_file_ids = []
                    if comment_files:
                        logger.debug(f"   üìé –ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ {len(comment_files)} —Ñ–∞–π–ª–æ–≤")
                        
                        for file_info in comment_files:
                            file_name = file_info.get('name', 'unknown_file')
                            file_url = file_info.get('url')
                            
                            if not file_url:
                                logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª '{file_name}' –Ω–µ –∏–º–µ–µ—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                                continue
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Kaiten
                            logger.debug(f"   ‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª '{file_name}'...")
                            file_content = await self.kaiten_client.download_file(file_url)
                            
                            if file_content:
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Bitrix24 (–≤ –ø–∞–ø–∫—É –∑–∞–¥–∞—á–∏)
                                logger.debug(f"   ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª '{file_name}' –≤ Bitrix24 –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
                                file_id = await self.bitrix_client.upload_file(file_content, file_name, target_group_id, task_id)
                                
                                if file_id:
                                    uploaded_file_ids.append(file_id)
                                    migrated_files += 1
                                    logger.debug(f"   ‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å ID {file_id}")
                                else:
                                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª '{file_name}' –≤ Bitrix24")
                            else:
                                logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª '{file_name}' –∏–∑ Kaiten")
                    
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    logger.debug(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {author_name}: {comment_text[:50]}..." + 
                               (f" —Å {len(uploaded_file_ids)} —Ñ–∞–π–ª–∞–º–∏" if uploaded_file_ids else ""))
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
                    if uploaded_file_ids:
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        comment_id = await self.bitrix_client.add_task_comment_with_file(
                            task_id=task_id,
                            text=comment_text,
                            author_id=author_id_bitrix,
                            file_id=uploaded_file_ids[0] if len(uploaded_file_ids) == 1 else None
                            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
                            # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        )
                    else:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                        comment_id = await self.bitrix_client.add_task_comment(
                            task_id=task_id,
                            text=comment_text,
                            author_id=author_id_bitrix
                            # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º created_date, —Ç–∞–∫ –∫–∞–∫ API –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
                        )
                    
                    if comment_id:
                        migrated_comments += 1
                        
                        # –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —á–µ—Ä–µ–∑ SSH
                        if created_date:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ISO –¥–∞—Ç—É –≤ MySQL —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SSH —Å–∫—Ä–∏–ø—Ç–∞
                            try:
                                if 'T' in created_date:
                                    date_obj = datetime.fromisoformat(created_date.replace('Z', '+00:00'))
                                    mysql_date = date_obj.strftime('%Y-%m-%d %H:%M:%S')
                                    comment_dates_to_update[str(comment_id)] = mysql_date
                                    logger.debug(f"   üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment_id} –Ω–∞ {mysql_date}")
                            except Exception as e:
                                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã '{created_date}': {e}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {author_name}")
                    
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
                    continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ SSH
            if comment_dates_to_update:
                logger.info(f"üïí –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è {len(comment_dates_to_update)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ SSH...")
                ssh_success = self.update_comment_dates_via_ssh(comment_dates_to_update)
                
                if not ssh_success:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ SSH, –Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
            if migrated_comments > 0 or skipped_comments > 0 or migrated_files > 0:
                result_message = f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_comments} (–±–æ—Ç—ã)"
                if migrated_files > 0:
                    result_message += f", —Ñ–∞–π–ª–æ–≤: {migrated_files}"
                logger.success(result_message)
                self.stats['comments_migrated'] += migrated_comments
                self.stats['comments_skipped'] += skipped_comments
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª–∞–º –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                if 'files_migrated' not in self.stats:
                    self.stats['files_migrated'] = 0
                self.stats['files_migrated'] += migrated_files
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}': {e}")
            return False

    async def get_custom_properties_from_card(self, card: Union[KaitenCard, SimpleKaitenCard]) -> Dict[str, List[Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏ {field_id: values}
        """
        properties = {}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ç—Ä–∏–±—É—Ç properties –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
            if hasattr(card, 'properties') and card.properties:
                properties = card.properties
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(properties)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ –∫–∞—Ä—Ç–æ—á–∫–µ {card.id}")
            else:
                # –ï—Å–ª–∏ properties –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏, –ø–æ–ª—É—á–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
                logger.debug(f"–ü–æ–ª—É—á–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id} –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π")
                raw_data = await self.kaiten_client._request("GET", f"/api/v1/cards/{card.id}")
                
                if raw_data and 'properties' in raw_data and raw_data['properties']:
                    properties = raw_data['properties']
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(properties)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ raw –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {e}")
            
        return properties

    async def get_field_name_from_api(self, field_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ API Kaiten.
        
        Args:
            field_id: ID –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "365518")
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π ID –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å id_ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_field_id = field_id.replace('id_', '') if field_id.startswith('id_') else field_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ —á–µ—Ä–µ–∑ API
            property_info = await self.kaiten_client.get_custom_property(int(clean_field_id))
            if property_info and 'name' in property_info:
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è {clean_field_id} —á–µ—Ä–µ–∑ API: {property_info['name']}")
                return property_info['name']
            
            # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID
            logger.debug(f"–ü–æ–ª–µ {clean_field_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API")
            return f"–ü–æ–ª–µ {clean_field_id}"
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è {field_id}: {e}")
            return f"–ü–æ–ª–µ {field_id}"

    async def get_field_values_from_api(self, field_id: str, value_ids: List[Any]) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è —á–µ—Ä–µ–∑ API Kaiten.
        
        Args:
            field_id: ID –ø–æ–ª—è
            value_ids: –°–ø–∏—Å–æ–∫ ID –∑–Ω–∞—á–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å id_ –µ—Å–ª–∏ –µ—Å—Ç—å  
            clean_field_id = field_id.replace('id_', '') if field_id.startswith('id_') else field_id
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è —á–µ—Ä–µ–∑ API
            select_values = await self.kaiten_client.get_custom_property_select_values(int(clean_field_id))
            
            if select_values:
                # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ ID -> —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                value_mapping = {}
                for value_info in select_values:
                    if 'id' in value_info and 'value' in value_info:
                        value_mapping[str(value_info['id'])] = value_info['value']
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç
                text_values = []
                for value_id in value_ids:
                    value_text = value_mapping.get(str(value_id), str(value_id))
                    text_values.append(value_text)
                
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è {clean_field_id} —á–µ—Ä–µ–∑ API")
                return "; ".join(text_values)
            else:
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ ID
                logger.debug(f"–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è {clean_field_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API")
                return "; ".join(str(v) for v in value_ids)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è {field_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ ID –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return "; ".join(str(v) for v in value_ids)

    async def format_custom_properties_for_description(self, properties: Dict[str, List[Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ.
        
        Args:
            properties: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        """
        if not properties:
            return ""
        
        lines = []
        
        for field_key, values in properties.items():
            # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ API
            field_name = await self.get_field_name_from_api(field_key)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
            if isinstance(values, list):
                values_str = await self.get_field_values_from_api(field_key, values)
            else:
                values_str = await self.get_field_values_from_api(field_key, [values])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
            lines.append(f"<b>{field_name}:</b> {values_str}")
        
        lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        return "\n".join(lines)

    def parse_file_links_from_description(self, description: str) -> List[Tuple[str, str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.
        
        Args:
            description: –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (filename, file_url, full_markdown_link)
        """
        file_links = []
        if not description:
            return file_links
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Markdown —Å—Å—ã–ª–æ–∫ –Ω–∞ files.kaiten.ru
        # –§–æ—Ä–º–∞—Ç: [filename](https://files.kaiten.ru/uuid.ext)
        pattern = r'\[([^\]]+)\]\((https://files\.kaiten\.ru/[^)]+)\)'
        
        matches = re.findall(pattern, description)
        for filename, file_url in matches:
            full_link = f'[{filename}]({file_url})'
            file_links.append((filename, file_url, full_link))
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: {filename} -> {file_url}")
        
        return file_links

    async def migrate_description_files(self, card_id: int, target_group_id: int, 
                                      description: str, task_id: int = None) -> Tuple[str, int]:
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–∞–π–ª—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ Bitrix24 –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏.
        
        Args:
            card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            description: –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            task_id: ID –∑–∞–¥–∞—á–∏ Bitrix24 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–∫–∏)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö_—Ñ–∞–π–ª–æ–≤)
        """
        if not description:
            return description, 0
        
        logger.debug(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}...")
        
        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        file_links = self.parse_file_links_from_description(description)
        
        if not file_links:
            logger.debug(f"–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã")
            return description, 0
        
        logger.info(f"üìé –ù–∞–π–¥–µ–Ω–æ {len(file_links)} —Ñ–∞–π–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ API
        card_files = await self.kaiten_client.get_card_files(card_id)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ URL -> —Ñ–∞–π–ª –∏–∑ API –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        files_by_url = {}
        for file_info in card_files:
            file_url = file_info.get('url', '')
            if file_url:
                files_by_url[file_url] = file_info
        
        updated_description = description
        migrated_files_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        for filename, file_url, full_link in file_links:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ API –∫–∞—Ä—Ç–æ—á–∫–∏
                if file_url not in files_by_url:
                    logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                logger.debug(f"   ‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª '{filename}' –∏–∑ Kaiten...")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Kaiten
                file_content = await self.kaiten_client.download_file(file_url)
                
                if not file_content:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª '{filename}', –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Bitrix24
                if task_id:
                    logger.debug(f"   üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª '{filename}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
                    file_id = await self.bitrix_client.upload_file(file_content, filename, target_group_id, task_id)
                else:
                    logger.debug(f"   üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª '{filename}' –≤ –æ–±—â—É—é –ø–∞–ø–∫—É...")
                    file_id = await self.bitrix_client.upload_file(file_content, filename, target_group_id)
                
                if file_id:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Bitrix24
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
                    file_url = self.bitrix_client.get_file_url(file_id)
                    new_link = f'[{filename}]({file_url})'
                    
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    updated_description = updated_description.replace(full_link, new_link)
                    
                    migrated_files_count += 1
                    logger.debug(f"   ‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {filename} -> {file_url}")
                    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª,
                    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ upload_file method BitrixClient
                else:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '{filename}', –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É")
                
            except Exception as e:
                logger.warning(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ–∞–π–ª–∞ '{filename}': {e}")
                continue
        
        if migrated_files_count > 0:
            logger.success(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_files_count} —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            self.stats['description_files_migrated'] += migrated_files_count
        
        return updated_description, migrated_files_count

    def print_migration_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("\n" + "="*50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò –ö–ê–†–¢–û–ß–ï–ö")
        logger.info("="*50)
        logger.info(f"–î–æ—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['boards_processed']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ: {self.stats['cards_total']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats['cards_filtered_out']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['cards_migrated']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats['cards_updated']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: {self.stats['cards_failed']}")
        if self.stats['checklists_migrated'] > 0 or self.stats['checklist_items_migrated'] > 0:
            logger.info(f"–ß–µ–∫-–ª–∏—Å—Ç–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {self.stats['checklists_migrated']}")
            logger.info(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {self.stats['checklist_items_migrated']}")
        if self.stats['comments_migrated'] > 0 or self.stats['comments_skipped'] > 0:
            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {self.stats['comments_migrated']}")
            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–±–æ—Ç—ã): {self.stats['comments_skipped']}")
        if self.stats.get('files_migrated', 0) > 0:
            logger.info(f"–§–∞–π–ª–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {self.stats['files_migrated']}")
        if self.stats['description_files_migrated'] > 0:
            logger.info(f"–§–∞–π–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['description_files_migrated']}")
        logger.info("="*50) 