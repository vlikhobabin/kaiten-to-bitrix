"""
–ú–∏–≥—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ Kaiten –≤ –∑–∞–¥–∞—á–∏ Bitrix24.
–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –ó–∞–¥–∞—á–µ 8.
"""

import asyncio
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple, Union

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from models.kaiten_models import KaitenCard, KaitenBoard, KaitenColumn
from models.simple_kaiten_models import SimpleKaitenCard
from transformers.card_transformer import CardTransformer
from transformers.user_transformer import UserTransformer
from utils.logger import get_logger

logger = get_logger(__name__)

class UserMappingTransformer:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º.
    """
    
    def __init__(self, user_mapping: Dict[str, str]):
        self.user_mapping = user_mapping  # kaiten_user_id -> bitrix_user_id
    
    def get_user_id(self, kaiten_user) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Bitrix24 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Kaiten.
        
        Args:
            kaiten_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Kaiten
            
        Returns:
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Bitrix24 –∏–ª–∏ None
        """
        if not kaiten_user:
            return None
            
        kaiten_user_id = str(kaiten_user.id)
        bitrix_user_id = self.user_mapping.get(kaiten_user_id)
        
        if bitrix_user_id:
            logger.debug(f"–ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥: Kaiten user {kaiten_user.full_name} (ID: {kaiten_user_id}) -> Bitrix ID: {bitrix_user_id}")
            return bitrix_user_id
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {kaiten_user.full_name} (ID: {kaiten_user_id})")
            return None

class CardMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ Kaiten –≤ –∑–∞–¥–∞—á–∏ Bitrix24.
    
    –ü—Ä–∞–≤–∏–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:
    1. –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ type: 1 -> —Å—Ç–∞–¥–∏—è "–ù–æ–≤—ã–µ"
    2. –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ type: 3 -> –ù–ï –ü–ï–†–ï–ù–û–°–Ø–¢–°–Ø
    3. –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ -> —Å—Ç–∞–¥–∏—è "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"
    """
    
    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π UserTransformer, –æ–Ω –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞
        self.user_transformer = None
        self.card_transformer = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞–¥–∏–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
        self.user_mapping: Dict[str, str] = {}
        self.stage_mapping: Dict[str, str] = {}  # {"–ù–æ–≤—ã–µ": "stage_id", "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è": "stage_id"}
        self.card_mapping: Dict[str, str] = {}  # {"kaiten_card_id": "bitrix_task_id"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.stats = {
            'cards_total': 0,
            'cards_filtered_out': 0,
            'cards_migrated': 0,
            'cards_updated': 0,  # –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            'cards_failed': 0,
            'boards_processed': 0,
            'checklists_migrated': 0,  # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            'checklist_items_migrated': 0  # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        }

    async def load_user_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                return False
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.user_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_mapping)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞
            self.user_transformer = UserMappingTransformer(self.user_mapping)
            self.card_transformer = CardTransformer(self.user_transformer)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    async def load_card_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "card_mapping.json"
            
            if not mapping_file.exists():
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                await self.save_card_mapping()
                logger.info("üìÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
                return True
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.card_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(self.card_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False

    async def save_card_mapping(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "card_mapping.json"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            mapping_file.parent.mkdir(exist_ok=True)
            
            data = {
                "created_at": datetime.now().isoformat(),
                "description": "–ú–∞–ø–ø–∏–Ω–≥ ID –∫–∞—Ä—Ç–æ—á–µ–∫ Kaiten -> –∑–∞–¥–∞—á Bitrix24",
                "stats": {
                    "total_migrated": len(self.card_mapping),
                    "last_updated": datetime.now().isoformat()
                },
                "mapping": self.card_mapping
            }
            
            with open(mapping_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(self.card_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False

    async def get_group_id_for_space(self, space_id: int) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã Bitrix24 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞.
        
        Args:
            space_id: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten
            
        Returns:
            ID –≥—Ä—É–ø–ø—ã Bitrix24 –∏–ª–∏ None –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "space_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª space_mapping.json")
                return None
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                mapping = data.get('mapping', {})
            
            # –ò—â–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            space_id_str = str(space_id)
            if space_id_str in mapping:
                group_id = int(mapping[space_id_str])
                logger.debug(f"üìã –ù–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥: –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {space_id} -> –≥—Ä—É–ø–ø–∞ {group_id}")
                return group_id
            else:
                logger.debug(f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
            return None

    async def get_task_stages_by_names(self, group_id: int, stage_names: List[str]) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Å—Ç–∞–¥–∏–π –∑–∞–¥–∞—á –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º.
        
        Args:
            group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            stage_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞–¥–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∞–¥–∏–∏: stage_id}
        """
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}...")
            stages_data = await self.bitrix_client.get_task_stages(group_id)
            
            stage_mapping = {}
            if stages_data:
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {stage_id: stage_object}
                if isinstance(stages_data, dict):
                    for stage_id, stage in stages_data.items():
                        if isinstance(stage, dict):
                            title = stage.get('TITLE', '') or stage.get('title', '')
                            
                            if title in stage_names:
                                stage_mapping[title] = str(stage_id)
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–¥–∏—è '{title}' —Å ID {stage_id}")
                # Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ API –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫
                elif isinstance(stages_data, list):
                    for stage in stages_data:
                        if isinstance(stage, dict):
                            title = stage.get('TITLE', '') or stage.get('title', '')
                            stage_id = stage.get('ID') or stage.get('id')
                            
                            if title in stage_names and stage_id:
                                stage_mapping[title] = str(stage_id)
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–¥–∏—è '{title}' —Å ID {stage_id}")
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(stage_mapping)} –∏–∑ {len(stage_names)} —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å—Ç–∞–¥–∏–π")
            return stage_mapping
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π: {e}")
            return {}

    def get_target_stage_for_card(self, card: Union[KaitenCard, SimpleKaitenCard]) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        """
        if hasattr(card, 'column') and card.column:
            column_type = card.column.type
        else:
            column_type = None
        
        if column_type == 1:  # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
            return "–ù–æ–≤—ã–µ"
        elif column_type == 3:  # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
            return None
        else:  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è None)
            return "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"

    def should_migrate_card(self, card: Union[KaitenCard, SimpleKaitenCard]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            
        Returns:
            True –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å, False –∏–Ω–∞—á–µ
        """
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–ª–æ–Ω–∫–∏
        if hasattr(card, 'column') and card.column and card.column.type == 3:
            logger.debug(f"üö´ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card.title}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ type: 3)")
            return False
            
        # –§–∏–ª—å—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        if card.archived:
            logger.debug(f"üö´ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card.title}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–∞—Ä—Ö–∏–≤–Ω–∞—è)")
            return False
            
        return True

    async def migrate_cards_from_space(self, space_id: int, target_group_id: int, 
                                     list_only: bool = False, limit: int = None, card_id: int = None) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
        
        Args:
            space_id: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
            limit: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å–∫–∏
            card_id: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            if card_id:
                return await self.migrate_single_card_by_id(card_id, target_group_id, list_only)
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not await self.load_user_mapping():
                return False
            
            if not await self.load_card_mapping():
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}...")
            boards = await self.kaiten_client.get_boards(space_id)
            
            if not boards:
                logger.warning(f"‚ö†Ô∏è –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ {space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫")
                return True
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(boards)} –¥–æ—Å–æ–∫ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ")
            
            # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            if not list_only:
                required_stages = ["–ù–æ–≤—ã–µ", "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"]
                self.stage_mapping = await self.get_task_stages_by_names(target_group_id, required_stages)
                
                if len(self.stage_mapping) != len(required_stages):
                    missing_stages = set(required_stages) - set(self.stage_mapping.keys())
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–¥–∏–∏: {missing_stages}")
                    return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É
            processed_cards = 0
            for board in boards:
                remaining_limit = limit - processed_cards if limit else None
                cards_processed_from_board = await self.process_board(
                    board, target_group_id, list_only, remaining_limit
                )
                processed_cards += cards_processed_from_board
                self.stats['boards_processed'] += 1
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç –∏ –º—ã –µ–≥–æ –¥–æ—Å—Ç–∏–≥–ª–∏, –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–µ—Ä–≤—É—é –¥–æ—Å–∫—É –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
                if limit and (processed_cards >= limit or cards_processed_from_board > 0):
                    if processed_cards >= limit:
                        logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_cards} –∫–∞—Ä—Ç–æ—á–µ–∫")
                    else:
                        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å–∫–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏: {cards_processed_from_board} –∫–∞—Ä—Ç–æ—á–µ–∫")
                    break
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_migration_stats()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}: {e}")
            return False

    async def migrate_single_card_by_id(self, card_id: int, target_group_id: int, list_only: bool = False) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –µ–µ ID.
        
        Args:
            card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not await self.load_user_mapping():
                return False
            
            if not await self.load_card_mapping():
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ ID
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id} –∏–∑ Kaiten...")
            card = await self.kaiten_client.get_card_by_id(card_id)
            
            if not card:
                logger.error(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Kaiten")
                return False
            
            logger.info(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: '{card.title}'")
            
            # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            if not list_only:
                required_stages = ["–ù–æ–≤—ã–µ", "–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"]
                self.stage_mapping = await self.get_task_stages_by_names(target_group_id, required_stages)
                
                if len(self.stage_mapping) != len(required_stages):
                    missing_stages = set(required_stages) - set(self.stage_mapping.keys())
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–¥–∏–∏: {missing_stages}")
                    return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            self.stats['cards_total'] = 1
            processed = await self.process_card(card, target_group_id, list_only)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_migration_stats()
            
            return processed
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card_id}: {e}")
            return False

    async def process_board(self, board: KaitenBoard, target_group_id: int, list_only: bool = False, limit: int = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏.
        
        Args:
            board: –î–æ—Å–∫–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        """
        try:
            logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å–∫–∏ '{board.title}' (ID: {board.id})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç (–∏—Å–∫–ª—é—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ)
            try:
                cards_data = await self.kaiten_client._request('GET', f'/api/v1/cards?board_id={board.id}&archived=false')
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ
                cards = []
                if cards_data:
                    logger.debug(f"   üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {len(cards_data)} –∫–∞—Ä—Ç–æ—á–µ–∫...")
                    for card_data in cards_data:
                        try:
                            card_id = card_data.get('id')
                            if card_id:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                                full_card = await self.kaiten_client.get_card_by_id(card_id)
                                if full_card:
                                    cards.append(full_card)
                                else:
                                    # Fallback –∫ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                                    card = SimpleKaitenCard(**card_data)
                                    cards.append(card)
                            else:
                                logger.debug(f"   ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ ID: {card_data}")
                        except Exception as e:
                            logger.debug(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É {card_data.get('id', 'unknown')}: {e}")
            except Exception as e:
                logger.debug(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ board_id: {e}")
                cards = []
            
            if not cards:
                logger.info(f"   üì≠ –î–æ—Å–∫–∞ '{board.title}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")
                return 0
            
            logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ")
            self.stats['cards_total'] += len(cards)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
            cards_to_process = cards[:limit] if limit else cards
            processed_count = 0
            
            if limit and len(cards_to_process) < len(cards):
                logger.info(f"   üéØ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cards_to_process)} –∏–∑ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ (–ª–∏–º–∏—Ç)")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            for card in cards_to_process:
                processed = await self.process_card(card, target_group_id, list_only)
                if processed:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
                    processed_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                if limit and processed_count >= limit:
                    break
            
            return processed_count
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å–∫–∏ {board.title}: {e}")
            return 0

    async def process_card(self, card: Union[KaitenCard, SimpleKaitenCard], target_group_id: int, list_only: bool = False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            list_only: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
            
        Returns:
            True –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞), False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
            card_id_str = str(card.id)
            if card_id_str in self.card_mapping:
                existing_task_id = self.card_mapping[card_id_str]
                if list_only:
                    logger.info(f"   ‚è≠Ô∏è  –ö–∞—Ä—Ç–æ—á–∫–∞: ID {card.id}, '{card.title}' -> –£–ñ–ï –ú–ò–ì–†–ò–†–û–í–ê–ù–ê (–∑–∞–¥–∞—á–∞ ID {existing_task_id})")
                    return True  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                    logger.info(f"   üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É '{card.title}' (ID: {card.id}) -> –∑–∞–¥–∞—á–∞ ID {existing_task_id}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    target_stage = self.get_target_stage_for_card(card)
                    if not target_stage:
                        self.stats['cards_filtered_out'] += 1
                        return False
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
                    await self.update_existing_card(card, int(existing_task_id), target_group_id, target_stage)
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
            if not self.should_migrate_card(card):
                self.stats['cards_filtered_out'] += 1
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç–∞–¥–∏—é
            target_stage = self.get_target_stage_for_card(card)
            if not target_stage:
                self.stats['cards_filtered_out'] += 1
                return False
            
            if list_only:
                # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
                column_type = card.column.type if (hasattr(card, 'column') and card.column) else 'unknown'
                logger.info(f"   üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞: ID {card.id}, '{card.title}', –∫–æ–ª–æ–Ω–∫–∞ type: {column_type} -> —Å—Ç–∞–¥–∏—è '{target_stage}'")
                return True
            
            # –†–µ–∂–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            await self.migrate_single_card(card, target_group_id, target_stage)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {e}")
            self.stats['cards_failed'] += 1
            return False

    async def migrate_single_card(self, card: Union[KaitenCard, SimpleKaitenCard], target_group_id: int, target_stage: str):
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∑–∞–¥–∞—á—É Bitrix24.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            target_stage: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏
        """
        try:
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç Bitrix24
            task_data = self.card_transformer.transform(card, str(target_group_id))
            
            if not task_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É '{card.title}'")
                self.stats['cards_failed'] += 1
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é
            stage_id = self.stage_mapping.get(target_stage)
            if stage_id:
                task_data['STAGE_ID'] = stage_id
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24
            task_id = await self.bitrix_client.create_task(
                title=task_data['TITLE'],
                description=task_data.get('DESCRIPTION', ''),
                responsible_id=task_data['RESPONSIBLE_ID'],
                group_id=target_group_id,
                **{k: v for k, v in task_data.items() 
                   if k not in ['TITLE', 'DESCRIPTION', 'RESPONSIBLE_ID', 'GROUP_ID']}
            )
            
            if task_id:
                logger.success(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card.title}' -> –ó–∞–¥–∞—á–∞ ID {task_id} (—Å—Ç–∞–¥–∏—è '{target_stage}')")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                self.card_mapping[str(card.id)] = str(task_id)
                await self.save_card_mapping()
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã
                await self.migrate_card_checklists(card.id, task_id, card.title)
                
                self.stats['cards_migrated'] += 1
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}'")
                self.stats['cards_failed'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}': {e}")
            self.stats['cards_failed'] += 1

    async def update_existing_card(self, card: Union[KaitenCard, SimpleKaitenCard], task_id: int, target_group_id: int, target_stage: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24 –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten.
        
        Args:
            card: –ö–∞—Ä—Ç–æ—á–∫–∞ Kaiten
            task_id: ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –≤ Bitrix24
            target_group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            target_stage: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏
        """
        try:
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç Bitrix24
            task_data = self.card_transformer.transform(card, str(target_group_id))
            
            if not task_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É '{card.title}' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                self.stats['cards_failed'] += 1
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é
            stage_id = self.stage_mapping.get(target_stage)
            if stage_id:
                task_data['STAGE_ID'] = stage_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24
            success = await self.bitrix_client.update_task(
                task_id=task_id,
                **task_data
            )
            
            if success:
                logger.success(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ID {task_id} –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}' (—Å—Ç–∞–¥–∏—è '{target_stage}')")
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º)
                await self.migrate_card_checklists(card.id, task_id, card.title, is_update=True)
                
                self.stats['cards_updated'] += 1
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É ID {task_id} –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}'")
                self.stats['cards_failed'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID {task_id} –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card.title}': {e}")
            self.stats['cards_failed'] += 1

    async def migrate_card_checklists(self, card_id: int, task_id: int, card_title: str, is_update: bool = False) -> bool:
        """
        –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten –≤ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏ Bitrix24.
        
        Args:
            card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏ Kaiten
            task_id: ID –∑–∞–¥–∞—á–∏ Bitrix24
            card_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            is_update: –ï—Å–ª–∏ True, —Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        """
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã
            existing_checklists = []
            if is_update:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏ {task_id}...")
                existing_items = await self.bitrix_client.get_task_checklists(task_id)
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø —á–µ–∫-–ª–∏—Å—Ç–æ–≤
                for item in existing_items:
                    parent_id = item.get('PARENT_ID') or item.get('parent_id')
                    # –≠—Ç–æ –≥—Ä—É–ø–ø–∞ (–∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç)
                    if not parent_id or parent_id == 'N/A' or str(parent_id) == '0':
                        title = item.get('TITLE') or item.get('title', '')
                        if title and title not in existing_checklists:
                            existing_checklists.append(title)
                
                if existing_checklists:
                    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing_checklists)} –≥—Ä—É–ø–ø —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {', '.join(existing_checklists[:3])}{'...' if len(existing_checklists) > 3 else ''}")
                else:
                    logger.debug(f"‚úÖ –£ –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Kaiten
            checklists = await self.kaiten_client.get_card_checklists(card_id)
            
            if not checklists:
                logger.debug(f"–£ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}' –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤")
                return True
            
            logger.info(f"üìã –ü–µ—Ä–µ–Ω–æ—Å–∏–º {len(checklists)} —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}'")
            
            migrated_checklists = 0
            migrated_items = 0
            
            for checklist in checklists:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'name' –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ (–∫–∞–∫ –≤ Kaiten API)
                    checklist_title = checklist.get('name', checklist.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    checklist_items = checklist.get('items', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    if is_update and checklist_title in existing_checklists:
                        logger.debug(f"   ‚è≠Ô∏è –ß–µ–∫-–ª–∏—Å—Ç '{checklist_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    logger.debug(f"   üìã –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–ª–∏—Å—Ç '{checklist_title}' —Å {len(checklist_items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —á–µ–∫-–ª–∏—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    group_id = await self.bitrix_client.create_checklist_group(
                        task_id=task_id,
                        title=checklist_title
                    )
                    
                    if group_id:
                        migrated_checklists += 1
                        logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ '{checklist_title}' —Å ID {group_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ '{checklist_title}', —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–∑ –≥—Ä—É–ø–ø—ã")
                        group_id = None  # –≠–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ (–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å)
                    for item in checklist_items:
                        item_text = item.get('text', item.get('title', ''))
                        is_complete = item.get('checked', False) or item.get('completed', False)
                        
                        if item_text.strip():
                            await self.bitrix_client.add_checklist_item(
                                task_id=task_id,
                                title=item_text,  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –∏ —ç–º–æ–¥–∑–∏ - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                is_complete=is_complete,
                                parent_id=group_id  # –£–∫–∞–∑—ã–≤–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–∏–ª–∏ None)
                            )
                            migrated_items += 1
                    
                except Exception as e:
                    checklist_name = checklist.get('name', checklist.get('title', 'unknown'))
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ '{checklist_name}': {e}")
                    continue
            
            if migrated_checklists > 0:
                logger.success(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_checklists} —á–µ–∫-–ª–∏—Å—Ç–æ–≤, {migrated_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                self.stats['checklists_migrated'] += migrated_checklists
                self.stats['checklist_items_migrated'] += migrated_items
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_title}': {e}")
            return False

    def print_migration_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("\n" + "="*50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò –ö–ê–†–¢–û–ß–ï–ö")
        logger.info("="*50)
        logger.info(f"–î–æ—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['boards_processed']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ: {self.stats['cards_total']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats['cards_filtered_out']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['cards_migrated']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats['cards_updated']}")
        logger.info(f"–ö–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: {self.stats['cards_failed']}")
        if self.stats['checklists_migrated'] > 0 or self.stats['checklist_items_migrated'] > 0:
            logger.info(f"–ß–µ–∫-–ª–∏—Å—Ç–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {self.stats['checklists_migrated']}")
            logger.info(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {self.stats['checklist_items_migrated']}")
        logger.info("="*50) 