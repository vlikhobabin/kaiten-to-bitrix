import json
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
import asyncio

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from transformers.space_transformer import SpaceTransformer
from models.kaiten_models import KaitenSpace
from utils.logger import logger

class SpaceMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Kaiten –≤ —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã Bitrix24.
    """

    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        self.user_mapping: Dict[str, str] = {}
        self.space_mapping: Dict[str, str] = {}

    async def load_user_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ mapping"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                return False
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.user_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {mapping_file.name}: {len(self.user_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    async def migrate_spaces(self, limit: Optional[int] = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Kaiten –≤ —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã Bitrix24.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –ü–†–û–°–¢–†–ê–ù–°–¢–í –ò–ó KAITEN –í BITRIX24")
        logger.info("=" * 80)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not await self.load_user_mapping():
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ Kaiten
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Kaiten...")
        kaiten_spaces = await self.kaiten_client.get_spaces()
        
        if not kaiten_spaces:
            logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ Kaiten!")
            return {"error": "–ù–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏"}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        spaces_to_process = kaiten_spaces
        if limit:
            spaces_to_process = kaiten_spaces[:limit]
            logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(spaces_to_process)} –∏–∑ {len(kaiten_spaces)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(spaces_to_process)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ Bitrix24
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24...")
        bitrix_workgroups = await self.bitrix_client.get_workgroup_list()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(bitrix_workgroups)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –≤ Bitrix24")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π KaitenClient –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        transformer = SpaceTransformer(bitrix_workgroups, self.user_mapping, kaiten_spaces, self.kaiten_client)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        stats = {
            'processed': 0,
            'created': 0,
            'updated': 0,
            'errors': 0,
            'members_added': 0
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        for i, kaiten_space in enumerate(spaces_to_process, 1):
            space_title = transformer._build_hierarchical_name(kaiten_space)
            logger.info(f"üîÑ [{i}/{len(spaces_to_process)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: '{space_title}'")
            
            await self._process_single_space(kaiten_space, transformer, stats)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            if i < len(spaces_to_process):
                await asyncio.sleep(0.5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        await self._save_space_mapping(stats)
        
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–°–¢–†–ê–ù–°–¢–í –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 80)
        return stats

    async def _process_single_space(self, kaiten_space: KaitenSpace, transformer: SpaceTransformer, stats: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: —Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        space_title = transformer._build_hierarchical_name(kaiten_space)
        stats['processed'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ Bitrix24
        existing_group = transformer.find_existing_workgroup(kaiten_space)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        group_data = transformer.kaiten_to_bitrix_workgroup_data(kaiten_space)
        if not group_data:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space_title}'")
            stats['errors'] += 1
            return
        
        bitrix_group = None
        
        if existing_group:
            # –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logger.debug(f"üîÑ –ì—Ä—É–ø–ø–∞ –¥–ª—è '{space_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_group.get('ID')})")
            bitrix_group = existing_group
            stats['updated'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥
            self.space_mapping[str(kaiten_space.id)] = str(existing_group.get('ID'))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            logger.debug(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space_title}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã
            owner_id = transformer.get_space_owner_bitrix_id(kaiten_space)
            if owner_id:
                group_data['OWNER_ID'] = owner_id
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
            bitrix_group = await self.bitrix_client.create_workgroup(group_data)
            
            if bitrix_group and bitrix_group.get('ID'):
                stats['created'] += 1
                self.space_mapping[str(kaiten_space.id)] = str(bitrix_group['ID'])
                logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ '{space_title}' (Kaiten ID: {kaiten_space.id} -> Bitrix ID: {bitrix_group['ID']})")
            else:
                stats['errors'] += 1
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space_title}'")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
        if bitrix_group and bitrix_group.get('ID'):
            await self._add_members_to_group(kaiten_space, transformer, bitrix_group, stats, space_title)

    async def _add_members_to_group(self, kaiten_space: KaitenSpace, transformer: SpaceTransformer, bitrix_group: Dict, stats: Dict, space_title: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É Bitrix24"""
        group_id = int(bitrix_group['ID'])
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_ids = await transformer.get_space_members_bitrix_ids_async(kaiten_space)
            
            if not member_ids:
                logger.debug(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logger.info(f"üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(member_ids)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É '{space_title}'")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É
            added_count = 0
            for member_id in member_ids:
                try:
                    success = await self.bitrix_client.add_user_to_workgroup(group_id, member_id)
                    if success:
                        added_count += 1
                        stats['members_added'] += 1
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id} –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
            
            if added_count > 0:
                logger.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É '{space_title}'")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É '{space_title}'")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É '{space_title}': {e}")

    async def _save_space_mapping(self, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ —Ñ–∞–π–ª"""
        mapping_file = Path(__file__).parent.parent / "mappings" / "space_mapping.json"
        mapping_file.parent.mkdir(exist_ok=True)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        existing_mapping = {}
        existing_stats = {"created": 0, "updated": 0, "members_added": 0, "errors": 0}
        
        if mapping_file.exists():
            try:
                with open(mapping_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                    existing_mapping = existing_data.get("mapping", {})
                    existing_stats = existing_data.get("stats", existing_stats)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {len(existing_mapping)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        combined_mapping = {**existing_mapping, **self.space_mapping}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        combined_stats = {}
        for key in existing_stats.keys():
            combined_stats[key] = existing_stats.get(key, 0) + stats.get(key, 0)
        
        mapping_data = {
            "created_at": datetime.now().isoformat(),
            "description": "–ú–∞–ø–ø–∏–Ω–≥ ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Kaiten -> —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø Bitrix24",
            "stats": combined_stats,
            "mapping": combined_mapping
        }
        
        with open(mapping_file, 'w', encoding='utf-8') as f:
            json.dump(mapping_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª: {mapping_file}")

    async def _print_final_report(self, stats: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Bitrix24
        final_workgroups = await self.bitrix_client.get_workgroup_list()
        
        logger.info("=" * 80)
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–°–¢–†–ê–ù–°–¢–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("=" * 80)
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:")
        logger.info(f"  üìã –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ Kaiten: {stats['total_spaces']}")
        logger.info(f"  ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}")
        logger.info(f"  ‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø: {stats['created']}")
        logger.info(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {stats['updated']}")
        logger.info(f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stats['members_added']}")
        logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        logger.info(f"  üîó –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {stats['mapping_saved']} –∑–∞–ø–∏—Å–µ–π")
        logger.info("")
        logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –í BITRIX24:")
        logger.info(f"  üë• –í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø: {len(final_workgroups)}")
        logger.info("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        success_rate = ((stats['created'] + stats['updated']) / stats['total_spaces']) * 100
        logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û–°–¢–¨ –ú–ò–ì–†–ê–¶–ò–ò: {success_rate:.1f}%")
        
        if success_rate >= 95:
            logger.info("üèÜ –û–¢–õ–ò–ß–ù–û! –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        elif success_rate >= 80:
            logger.info("üëç –•–û–†–û–®–û! –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏")
        else:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞") 