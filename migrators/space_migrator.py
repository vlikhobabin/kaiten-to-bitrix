"""
–ú–∏–≥—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Kaiten –≤ –≥—Ä—É–ø–ø—ã Bitrix24.
–õ–æ–≥–∏–∫–∞: 
1. –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏–º –¥–æ—Å–∫–∏
2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–±–µ–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö) –∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è
3. –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
"""

import asyncio
import json
import subprocess
import os
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from models.kaiten_models import KaitenSpace
from config.space_exclusions import is_space_excluded, get_excluded_spaces
from utils.logger import get_logger

logger = get_logger(__name__)

class SpaceMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Kaiten –≤ –≥—Ä—É–ø–ø—ã Bitrix24.
    –õ–æ–≥–∏–∫–∞: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∞ –Ω–µ –¥–æ—Å–∫–∏.
    """
    
    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        self.user_mapping: Dict[str, str] = {}
        self.space_mapping: Dict[str, str] = {}
        self.spaces_hierarchy: Dict[str, KaitenSpace] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        self.enable_features_update = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        self.ssh_config = self._load_ssh_config()

    def _load_ssh_config(self) -> Dict[str, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
        """
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            env_file = None
            for filename in ['.env', 'env.txt']:
                if os.path.exists(filename):
                    env_file = filename
                    break
            
            if not env_file:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                return {}
            
            config = {}
            with open(env_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip().strip('"').strip("'")
            
            required_keys = ['SSH_HOST', 'SSH_USER', 'SSH_KEY_PATH_PUTTY']
            missing_keys = [key for key in required_keys if key not in config]
            
            if missing_keys:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç SSH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_keys}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                return {}
            
            return config
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return {}

    async def set_group_features_via_ssh(self, group_id: int, features: Optional[List[str]] = None) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ update_group_features.py.
        
        Args:
            group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            features: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (None = —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enable_features_update or not self.ssh_config:
            logger.debug(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            remote_script = "/root/update_group_features.py"
            
            if features:
                features_str = ",".join(features)
                ssh_command = f"python3 {remote_script} --update-group {group_id} --features {features_str}"
            else:
                ssh_command = f"python3 {remote_script} --update-group {group_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É plink
            plink_command = [
                "plink.exe",
                "-batch",
                "-i", self.ssh_config['SSH_KEY_PATH_PUTTY'],
                f"{self.ssh_config['SSH_USER']}@{self.ssh_config['SSH_HOST']}",
                ssh_command
            ]
            
            logger.debug(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} —á–µ—Ä–µ–∑ SSH...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                plink_command,
                capture_output=True,
                text=True,
                timeout=30,
                encoding='utf-8'
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã {group_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if result.stdout.strip():
                    logger.debug(f"SSH output: {result.stdout.strip()}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
            return False
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è plink.exe –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PuTTY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
            return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ SSH –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            return False

    async def load_user_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                return False
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.user_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    async def build_spaces_hierarchy(self) -> bool:
        """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
        try:
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Kaiten...")
            spaces = await self.kaiten_client.get_spaces()
            
            if not spaces:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ Kaiten")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ UID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            for space in spaces:
                self.spaces_hierarchy[space.uid] = space
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(spaces)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
            return False

    def get_root_spaces(self) -> List[KaitenSpace]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π)"""
        root_spaces = []
        for space in self.spaces_hierarchy.values():
            if not space.parent_entity_uid:
                root_spaces.append(space)
        return root_spaces

    def get_child_spaces(self, parent_space: KaitenSpace) -> List[KaitenSpace]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        child_spaces = []
        for space in self.spaces_hierarchy.values():
            if space.parent_entity_uid == parent_space.uid:
                child_spaces.append(space)
        return child_spaces

    def is_space_in_excluded_tree(self, space: KaitenSpace) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ –¥–µ—Ä–µ–≤–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤.
        –ü—Ä–æ—Ö–æ–¥–∏—Ç –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–æ –∫–æ—Ä–Ω—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å.
        """
        current_space = space
        max_depth = 10  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤
        depth = 0
        
        while current_space and depth < max_depth:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            if is_space_excluded(current_space.title):
                return True
            
            # –ò–¥–µ–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
            if current_space.parent_entity_uid:
                current_space = self.spaces_hierarchy.get(current_space.parent_entity_uid)
                depth += 1
            else:
                break
                
        return False

    def get_space_level(self, space: KaitenSpace) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (1 = –∫–æ—Ä–Ω–µ–≤–æ–µ, 2 = –¥–æ—á–µ—Ä–Ω–µ–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ, –∏ —Ç.–¥.)
        """
        level = 1
        current_space = space
        max_depth = 10
        
        while current_space.parent_entity_uid and level < max_depth:
            current_space = self.spaces_hierarchy.get(current_space.parent_entity_uid)
            if current_space:
                level += 1
            else:
                break
        
        return level

    def determine_admin_source_space(self, space: KaitenSpace) -> Optional[KaitenSpace]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã.
        
        Args:
            space: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞
            
        Returns:
            –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ-–∏—Å—Ç–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ None
        """
        level = self.get_space_level(space)
        
        if level == 1:
            # –ö–æ—Ä–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ - –±–µ—Ä–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ
            logger.debug(f"–ö–æ—Ä–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' - –±–µ—Ä–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ")
            return space
        elif level == 2:
            # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è - –±–µ—Ä–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ
            if space.parent_entity_uid:
                parent_space = self.spaces_hierarchy.get(space.parent_entity_uid)
                if parent_space:
                    logger.debug(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è '{space.title}' - –±–µ—Ä–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ '{parent_space.title}'")
                    return parent_space
                else:
                    logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è '{space.title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏")
            else:
                logger.warning(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, –Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ 2-–≥–æ —É—Ä–æ–≤–Ω—è")
        else:
            logger.warning(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' —É—Ä–æ–≤–Ω—è {level} –Ω–µ –¥–æ–ª–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        return None

    async def get_space_administrators_bitrix_ids(self, space: KaitenSpace) -> Tuple[Optional[str], List[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bitrix24.
        
        Args:
            space: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (owner_id, moderator_ids):
            - owner_id: ID –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã) –∏–ª–∏ None
            - moderator_ids: –°–ø–∏—Å–æ–∫ ID –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ–º–æ—â–Ω–∏–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ-–∏—Å—Ç–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_source_space = self.determine_admin_source_space(space)
            if not admin_source_space:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}'")
                return None, []
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            administrators = await self.kaiten_client.get_space_administrators(admin_source_space.id)
            
            if not administrators:
                logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '{admin_source_space.title}'")
                return None, []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ID Bitrix24
            admin_bitrix_ids = []
            for admin in administrators:
                kaiten_id = str(admin['id'])
                bitrix_id = self.user_mapping.get(kaiten_id)
                
                if bitrix_id:
                    admin_bitrix_ids.append(bitrix_id)
                    logger.debug(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin['full_name']} (Kaiten: {kaiten_id}) -> Bitrix: {bitrix_id}")
                else:
                    logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin['full_name']} (Kaiten: {kaiten_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            if admin_bitrix_ids:
                owner_id = admin_bitrix_ids[0]  # –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä = —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
                moderator_ids = admin_bitrix_ids[1:]  # –û—Å—Ç–∞–ª—å–Ω—ã–µ = –ø–æ–º–æ—â–Ω–∏–∫–∏
                
                logger.info(f"–î–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}' –∏–∑ '{admin_source_space.title}': —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å={owner_id}, –ø–æ–º–æ—â–Ω–∏–∫–æ–≤={len(moderator_ids)}")
                return owner_id, moderator_ids
            else:
                logger.warning(f"–ù–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{admin_source_space.title}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return None, []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}': {e}")
            return None, []

    async def get_space_roles_bitrix_ids(self, space: KaitenSpace) -> Tuple[Optional[str], List[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
        
        Args:
            space: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (owner_id, moderator_ids):
            - owner_id: ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã (–ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
            - moderator_ids: –°–ø–∏—Å–æ–∫ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã + –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–æ—á–µ—Ä–Ω–µ–≥–æ)
        """
        try:
            level = self.get_space_level(space)
            all_moderator_ids = []
            owner_id = None
            
            if level == 1:
                # –ö–æ—Ä–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ - –±–µ—Ä–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ
                logger.debug(f"–ö–æ—Ä–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏")
                admins = await self.kaiten_client.get_space_administrators(space.id)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ID Bitrix24
                admin_bitrix_ids = []
                for admin in admins:
                    kaiten_id = str(admin['id'])
                    bitrix_id = self.user_mapping.get(kaiten_id)
                    if bitrix_id:
                        admin_bitrix_ids.append(bitrix_id)
                
                if admin_bitrix_ids:
                    owner_id = admin_bitrix_ids[0]  # –ü–µ—Ä–≤—ã–π = –≤–ª–∞–¥–µ–ª–µ—Ü
                    all_moderator_ids = admin_bitrix_ids[1:]  # –û—Å—Ç–∞–ª—å–Ω—ã–µ = –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã
                    
            elif level == 2:
                # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è - –≤–ª–∞–¥–µ–ª–µ—Ü –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑ –æ–±–æ–∏—Ö
                logger.debug(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è '{space.title}' - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ")
                
                # 1. –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                admin_source_space = self.determine_admin_source_space(space)
                if admin_source_space:
                    parent_admins = await self.kaiten_client.get_space_administrators(admin_source_space.id)
                    
                    parent_admin_bitrix_ids = []
                    for admin in parent_admins:
                        kaiten_id = str(admin['id'])
                        bitrix_id = self.user_mapping.get(kaiten_id)
                        if bitrix_id:
                            parent_admin_bitrix_ids.append(bitrix_id)
                    
                    if parent_admin_bitrix_ids:
                        owner_id = parent_admin_bitrix_ids[0]  # –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ = –≤–ª–∞–¥–µ–ª–µ—Ü
                        all_moderator_ids.extend(parent_admin_bitrix_ids[1:])  # –û—Å—Ç–∞–ª—å–Ω—ã–µ = –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã
                
                # 2. –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–≤—Å–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏)
                child_admins = await self.kaiten_client.get_space_administrators(space.id)
                
                for admin in child_admins:
                    kaiten_id = str(admin['id'])
                    bitrix_id = self.user_mapping.get(kaiten_id)
                    if bitrix_id and bitrix_id != owner_id:  # –ò—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        all_moderator_ids.append(bitrix_id)
                        
                logger.info(f"–î–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}': –≤–ª–∞–¥–µ–ª–µ—Ü –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ={owner_id}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤={len(all_moderator_ids)} (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ + –¥–æ—á–µ—Ä–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)")
            
            else:
                logger.warning(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' —É—Ä–æ–≤–Ω—è {level} –Ω–µ –¥–æ–ª–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                return None, []
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            unique_moderator_ids = list(dict.fromkeys(all_moderator_ids))  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫
            
            logger.info(f"–†–æ–ª–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}': –≤–ª–∞–¥–µ–ª–µ—Ü={owner_id}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤={len(unique_moderator_ids)}")
            return owner_id, unique_moderator_ids
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}': {e}")
            return None, []

    def get_spaces_to_migrate(self) -> List[KaitenSpace]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ:
        1. –ö–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–±–µ–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö) –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è
        2. –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å—Ç—Ä–æ–≥–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö)
        3. –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏–º: –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≥–ª—É–±–∂–µ 2-–≥–æ —É—Ä–æ–≤–Ω—è
        4. –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        """
        spaces_to_migrate = []
        
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏...")
        logger.info(f"üìã –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {get_excluded_spaces()}")
        
        for space in self.spaces_hierarchy.values():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            if self.is_space_in_excluded_tree(space):
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' (–≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ)")
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            level = self.get_space_level(space)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            child_spaces = self.get_child_spaces(space)
            
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–±–æ—Ä–∞:
            if level == 1 and child_spaces:
                # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 1-–≥–æ —É—Ä–æ–≤–Ω—è —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ - –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏–º
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 1-–≥–æ —É—Ä–æ–≤–Ω—è —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏: '{space.title}'")
                continue
            elif level == 2:
                # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ–≥–¥–∞
                spaces_to_migrate.append(space)
                logger.debug(f"‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è: '{space.title}'")
            elif level > 2:
                # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≥–ª—É–±–∂–µ 2-–≥–æ —É—Ä–æ–≤–Ω—è - –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏–º
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {level}-–≥–æ —É—Ä–æ–≤–Ω—è: '{space.title}'")
                continue
            elif level == 1 and not child_spaces:
                # –ö–æ–Ω–µ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 1-–≥–æ —É—Ä–æ–≤–Ω—è - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
                spaces_to_migrate.append(space)
                logger.debug(f"‚úÖ –ö–æ–Ω–µ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 1-–≥–æ —É—Ä–æ–≤–Ω—è: '{space.title}'")
            elif not child_spaces:
                # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∫–æ–Ω–µ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
                spaces_to_migrate.append(space)
                logger.debug(f"‚úÖ –ö–æ–Ω–µ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {level}-–≥–æ —É—Ä–æ–≤–Ω—è: '{space.title}'")
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(spaces_to_migrate)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        return spaces_to_migrate

    def build_space_path(self, space: KaitenSpace) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
        """
        path_parts = []
        current_space = space
        max_depth = 10
        depth = 0
        
        # –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏, —Å–æ–±–∏—Ä–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è
        while current_space and depth < max_depth:
            path_parts.insert(0, current_space.title)
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            if current_space.parent_entity_uid:
                current_space = self.spaces_hierarchy.get(current_space.parent_entity_uid)
                depth += 1
            else:
                break
        
        return "/".join(path_parts)

    async def get_space_members_bitrix_ids(self, space_id: int) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bitrix24.
        –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ (2-–≥–æ —É—Ä–æ–≤–Ω—è) –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤.
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            target_space = None
            for space in self.spaces_hierarchy.values():
                if space.id == space_id:
                    target_space = space
                    break
            
            if not target_space:
                logger.error(f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏")
                return []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            level = self.get_space_level(target_space)
            
            all_bitrix_ids = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            
            if level == 2:
                # –î–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è –æ–±—ä–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ
                logger.info(f"üîó –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è '{target_space.title}' - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å —Ä–æ–ª—è–º–∏
                child_users = await self.kaiten_client.get_space_users_with_roles(space_id)
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                child_admins = [user for user in child_users if user.get('space_role_id') == 3]
                child_others = [user for user in child_users if user.get('space_role_id') != 3]
                
                logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {len(child_others)} (—Ä–µ–¥–∞–∫—Ç–æ—Ä—ã+—É—á–∞—Å—Ç–Ω–∏–∫–∏) + {len(child_admins)} (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
                for user in child_users:
                    kaiten_id = str(user['id'])
                    bitrix_id = self.user_mapping.get(kaiten_id)
                    if bitrix_id:
                        all_bitrix_ids.add(bitrix_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (—Ä–µ–¥–∞–∫—Ç–æ—Ä—ã + —É—á–∞—Å—Ç–Ω–∏–∫–∏)
                if target_space.parent_entity_uid:
                    parent_space = self.spaces_hierarchy.get(target_space.parent_entity_uid)
                    if parent_space:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
                        parent_users = await self.kaiten_client.get_space_users_with_roles(parent_space.id)
                        
                        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (space_role_id == 3)
                        parent_members = [user for user in parent_users if user.get('space_role_id') != 3]
                        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{parent_space.title}': {len(parent_members)} (–∏—Å–∫–ª—é—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)")
                        
                        for member in parent_members:
                            kaiten_id = str(member['id'])
                            bitrix_id = self.user_mapping.get(kaiten_id)
                            if bitrix_id:
                                all_bitrix_ids.add(bitrix_id)
                    else:
                        logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {target_space.title}")
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
                logger.info(f"üìç –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {level}-–≥–æ —É—Ä–æ–≤–Ω—è '{target_space.title}' - –±–µ—Ä–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏")
                space_users = await self.kaiten_client.get_space_users_with_roles(space_id)
                
                for user in space_users:
                    kaiten_id = str(user['id'])
                    bitrix_id = self.user_mapping.get(kaiten_id)
                    if bitrix_id:
                        all_bitrix_ids.add(bitrix_id)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('full_name', 'Unknown')} (ID: {kaiten_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
            
            result = list(all_bitrix_ids)
            logger.info(f"üë• –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(result)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}: {e}")
            return []

    async def list_available_spaces(self, verbose: bool = False) -> bool:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.
        """
        logger.info("üìã –°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –ü–†–û–°–¢–†–ê–ù–°–¢–í –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò")
        logger.info("=" * 80)
        
        try:
            # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            if not await self.build_spaces_hierarchy():
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            spaces_to_migrate = self.get_spaces_to_migrate()
            
            if not spaces_to_migrate:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                return False
            
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(spaces_to_migrate)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
            logger.info("")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ –ø—É—Ç–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            spaces_with_paths = [(space, self.build_space_path(space)) for space in spaces_to_migrate]
            spaces_with_paths.sort(key=lambda x: x[1])
            
            for i, (space, path) in enumerate(spaces_with_paths, 1):
                logger.info(f"{i:3d}. {space.id:8d} {path}")
            
            logger.info("=" * 80)
            logger.info("üí° –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            logger.info("   python scripts/space_migration.py --space-id <ID>")
            logger.info("")
            logger.info("üí° –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤—ã—Ö N –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            logger.info("   python scripts/space_migration.py --limit <N>")
            logger.info("")
            logger.info("üí° –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            logger.info("   python scripts/space_migration.py")
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
            return False

    async def migrate_spaces(self, limit: Optional[int] = None, space_id: Optional[int] = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Kaiten –≤ –≥—Ä—É–ø–ø—ã Bitrix24.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ)
            space_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –ü–†–û–°–¢–†–ê–ù–°–¢–í –ò–ó KAITEN –í BITRIX24")
        logger.info("üîÑ –õ–û–ì–ò–ö–ê: –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ù–ï –¥–æ—Å–∫–∏)")
        logger.info("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if limit and space_id:
            logger.warning("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã --limit –∏ --space-id –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --space-id")
            limit = None
            
        if space_id:
            logger.info(f"üéØ –†–µ–∂–∏–º: –º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ID {space_id}")
        elif limit:
            logger.info(f"üî¢ –†–µ–∂–∏–º: –º–∏–≥—Ä–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö {limit} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
        else:
            logger.info("üîÑ –†–µ–∂–∏–º: –º–∏–≥—Ä–∞—Ü–∏—è –í–°–ï–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
        
        stats = {
            "processed": 0,
            "created": 0,
            "updated": 0,
            "errors": 0,
            "spaces_migrated": 0,
            "members_added": 0,
            "members_removed": 0
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not await self.load_user_mapping():
                return stats
            
            # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            if not await self.build_spaces_hierarchy():
                return stats
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            if space_id:
                # –†–µ–∂–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                target_space = None
                for space in self.spaces_hierarchy.values():
                    if space.id == space_id:
                        target_space = space
                        break
                
                if not target_space:
                    logger.error(f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å ID {space_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Kaiten!")
                    stats["errors"] += 1
                    return stats
                
                spaces_to_migrate = [target_space]
            else:
                # –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
                spaces_to_migrate = self.get_spaces_to_migrate()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if limit:
                spaces_to_migrate = spaces_to_migrate[:limit]
                logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(spaces_to_migrate)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ Bitrix24
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24...")
            existing_groups = await self.bitrix_client.get_workgroup_list()
            groups_map = {group['NAME']: group for group in existing_groups}
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(existing_groups)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –≤ Bitrix24")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            for i, space in enumerate(spaces_to_migrate, 1):
                try:
                    stats["processed"] += 1
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    group_name = self.build_space_path(space)
                    
                    logger.info(f"üîÑ [{i}/{len(spaces_to_migrate)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: '{group_name}'")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                    owner_id, moderator_ids = await self.get_space_roles_bitrix_ids(space)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞
                    if group_name in groups_map:
                        logger.info(f"‚ôªÔ∏è –ì—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
                        group_id = str(groups_map[group_name]['ID'])
                        stats["updated"] += 1
                        
                        # –ò–∑–º–µ–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        if owner_id:
                            await self.bitrix_client.set_workgroup_owner(int(group_id), int(owner_id))
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –¥–æ –Ω–∞—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
                        logger.info(f"üéØ –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã '{group_name}' –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞...")
                        enabled_features = ['tasks', 'files', 'calendar', 'chat', 'landing_knowledge', 'search']
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ API (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π webhook)
                        api_features_updated = await self.bitrix_client.update_workgroup_features(int(group_id), enabled_features)
                        
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
                        ssh_features_updated = await self.set_group_features_via_ssh(int(group_id), enabled_features)
                        
                        if ssh_features_updated:
                            logger.info(f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –ë–î: –ó–∞–¥–∞—á–∏, –î–∏—Å–∫, –ö–∞–ª–µ–Ω–¥–∞—Ä—å, –ß–∞—Ç, –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
                        elif api_features_updated:
                            logger.info(f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API: –ó–∞–¥–∞—á–∏, –î–∏—Å–∫, –ö–∞–ª–µ–Ω–¥–∞—Ä—å, –ß–∞—Ç, –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã '{group_name}'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
                        
                        # –û—á–∏—â–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
                        clear_stats = await self.bitrix_client.clear_workgroup_members(int(group_id))
                        stats["members_removed"] += clear_stats["removed"]
                        if clear_stats["errors"] > 0:
                            stats["errors"] += clear_stats["errors"]
                        
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã '{group_name}'...")
                        
                        group_data = {
                            'NAME': group_name,
                            'DESCRIPTION': f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–∑ Kaiten: {space.title}",
                            'VISIBLE': 'Y',
                            'OPENED': 'N',  # N - –∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ (–ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é)
                            'PROJECT': 'N'  # N - –æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞, –Ω–µ –ø—Ä–æ–µ–∫—Ç (—á—Ç–æ–±—ã –Ω–µ –≤–∫–ª—é—á–∞–ª–∏—Å—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                        }
                        
                        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                        if owner_id:
                            group_data['OWNER_ID'] = owner_id
                            logger.info(f"üëë –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {owner_id}")
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (—É—Å—Ç–∞–Ω–æ–≤–∏–º –∏—Ö –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ë–î)
                        group_result = await self.bitrix_client.create_workgroup(group_data)
                        
                        if group_result:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            if isinstance(group_result, dict) and 'ID' in group_result:
                                group_id = str(group_result['ID'])
                            else:
                                group_id = str(group_result)
                            
                            logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group_name}' —Å ID: {group_id}")
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
                            enabled_features = ['tasks', 'files', 'calendar', 'chat', 'landing_knowledge', 'search']
                            ssh_features_updated = await self.set_group_features_via_ssh(int(group_id), enabled_features)
                            
                            if ssh_features_updated:
                                logger.info(f"üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –ó–∞–¥–∞—á–∏, –î–∏—Å–∫, –ö–∞–ª–µ–Ω–¥–∞—Ä—å, –ß–∞—Ç, –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
                            
                            stats["created"] += 1
                            groups_map[group_name] = {'ID': group_id, 'NAME': group_name}
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã '{group_name}'")
                            stats["errors"] += 1
                            continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ -> –≥—Ä—É–ø–ø—ã
                    self.space_mapping[str(space.id)] = str(group_id)
                    stats["spaces_migrated"] += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –≥—Ä—É–ø–ø—É
                    space_members = await self.get_space_members_bitrix_ids(space.id)
                    if space_members:
                        # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        admin_ids = []
                        if owner_id:
                            admin_ids.append(owner_id)
                        admin_ids.extend(moderator_ids)
                        
                        regular_members = [user_id for user_id in space_members if user_id not in admin_ids]
                        
                        logger.info(f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {len(space_members)}")
                        logger.info(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã: {owner_id}")
                        logger.info(f"üëî –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderator_ids)}")
                        logger.info(f"üë• –û–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(regular_members)}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
                        add_stats = await self.add_members_to_group(
                            group_id, space, owner_id, moderator_ids, regular_members
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        stats["members_added"] += add_stats["added"]
                        if add_stats["errors"] > 0:
                            stats["errors"] += add_stats["errors"]
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É '{group_name}'")
                    
                except Exception as e:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}': {e}")
                    stats["errors"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            await self._save_space_mapping(stats)
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            await self._print_final_report(stats)
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
            stats["errors"] += 1
        
        return stats

    async def add_members_to_group(self, group_id: str, space: KaitenSpace, 
                                  owner_id: Optional[str], moderator_ids: List[str], 
                                  member_ids: List[str]) -> Dict[str, int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.
        
        Args:
            group_id: ID –≥—Ä—É–ø–ø—ã –≤ Bitrix24
            space: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ Kaiten
            owner_id: ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã (—É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)
            moderator_ids: –°–ø–∏—Å–æ–∫ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            member_ids: –°–ø–∏—Å–æ–∫ ID –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {"added": count, "errors": count}
        """
        stats = {"added": 0, "errors": 0}
        
        try:
            # 1. –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            if moderator_ids:
                logger.info(f"üëî –î–æ–±–∞–≤–ª—è–µ–º {len(moderator_ids)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
                for moderator_id in moderator_ids:
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        success = await self.bitrix_client.add_user_to_workgroup(int(group_id), int(moderator_id))
                        if success:
                            # –ó–∞—Ç–µ–º –º–µ–Ω—è–µ–º —Ä–æ–ª—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (E)
                            role_success = await self.bitrix_client.update_workgroup_user_role(int(group_id), int(moderator_id), 'E')
                            if role_success:
                                stats["added"] += 1
                                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {moderator_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {moderator_id} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
                                stats["added"] += 1  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}")
                            stats["errors"] += 1
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}: {e}")
                        stats["errors"] += 1
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if member_ids:
                logger.info(f"üë• –î–æ–±–∞–≤–ª—è–µ–º {len(member_ids)} –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
                for member_id in member_ids:
                    try:
                        success = await self.bitrix_client.add_user_to_workgroup(int(group_id), int(member_id))
                        if success:
                            stats["added"] += 1
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}")
                            stats["errors"] += 1
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
                        stats["errors"] += 1
            
            total_target = len(moderator_ids) + len(member_ids) + (1 if owner_id else 0)
            logger.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É '{space.title}': {stats['added']} –∏–∑ {total_target} (–≤–ª–∞–¥–µ–ª–µ—Ü: {1 if owner_id else 0}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {len(moderator_ids)}, —É—á–∞—Å—Ç–Ω–∏–∫–∏: {len(member_ids)})")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
            stats["errors"] += 1
        
        return stats

    async def _save_space_mapping(self, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ —Ñ–∞–π–ª"""
        mapping_file = Path(__file__).parent.parent / "mappings" / "space_mapping.json"
        mapping_file.parent.mkdir(exist_ok=True)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        existing_mapping = {}
        existing_stats = {"processed": 0, "created": 0, "updated": 0, "errors": 0, "spaces_migrated": 0, "members_added": 0, "members_removed": 0}
        
        if mapping_file.exists():
            try:
                with open(mapping_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                    existing_mapping = existing_data.get("mapping", {})
                    existing_stats = existing_data.get("stats", existing_stats)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {len(existing_mapping)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        combined_mapping = {**existing_mapping, **self.space_mapping}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        combined_stats = {}
        for key in existing_stats.keys():
            combined_stats[key] = existing_stats.get(key, 0) + stats.get(key, 0)
        
        mapping_data = {
            "created_at": datetime.now().isoformat(),
            "description": "–ú–∞–ø–ø–∏–Ω–≥ ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Kaiten -> —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø Bitrix24",
            "migration_logic": "–ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –ù–ï –¥–æ—Å–∫–∏. –ö–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–ª–∏ 2-–π —É—Ä–æ–≤–µ–Ω—å.",
            "excluded_spaces": get_excluded_spaces(),
            "stats": combined_stats,
            "mapping": combined_mapping
        }
        
        with open(mapping_file, 'w', encoding='utf-8') as f:
            json.dump(mapping_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª: {mapping_file}")

    async def _print_final_report(self, stats: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–°–¢–†–ê–ù–°–¢–í –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 80)
        
        logger.info("üìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        logger.info(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {stats['processed']}")
        logger.info(f"  ‚ûï –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {stats['created']}")
        logger.info(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {stats['updated']}")
        logger.info(f"  üìã –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['spaces_migrated']}")
        logger.info(f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stats['members_added']}")
        logger.info(f"  üóëÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {stats['members_removed']}")
        logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        logger.info("=" * 80)
        
        if stats["errors"] > 0:
            logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            logger.success("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!") 