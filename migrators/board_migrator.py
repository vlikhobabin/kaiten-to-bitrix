import asyncio
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from connectors.kaiten_client import KaitenClient
from connectors.bitrix_client import BitrixClient
from models.kaiten_models import KaitenSpace, KaitenBoard, KaitenColumn
from utils.logger import get_logger

logger = get_logger(__name__)

class BoardMigrator:
    """
    –ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–æ—Å–æ–∫ –∏–∑ Kaiten –≤ –≥—Ä—É–ø–ø—ã Bitrix24.
    –õ–æ–≥–∏–∫–∞: 1 Board Kaiten = 1 Workgroup Bitrix24
    –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –≥—Ä—É–ø–ø.
    """
    
    def __init__(self):
        self.kaiten_client = KaitenClient()
        self.bitrix_client = BitrixClient()
        self.user_mapping: Dict[str, str] = {}
        self.board_mapping: Dict[str, str] = {}
        self.column_mapping: Dict[str, str] = {}
        self.spaces_hierarchy: Dict[str, KaitenSpace] = {}

    async def load_user_mapping(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            mapping_file = Path(__file__).parent.parent / "mappings" / "user_mapping.json"
            
            if not mapping_file.exists():
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                return False
            
            with open(mapping_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.user_mapping = data.get('mapping', {})
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {mapping_file.name}: {len(self.user_mapping)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    async def build_spaces_hierarchy(self) -> bool:
        """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–µ–π"""
        try:
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Kaiten...")
            spaces = await self.kaiten_client.get_spaces()
            
            if not spaces:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ Kaiten")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ UID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            for space in spaces:
                self.spaces_hierarchy[space.uid] = space
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(spaces)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
            return False

    def build_space_path(self, space: KaitenSpace) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
        
        Args:
            space: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ Kaiten
            
        Returns:
            –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –≤–∏–¥–∞ "–†–æ–¥–∏—Ç–µ–ª—å1/–†–æ–¥–∏—Ç–µ–ª—å2/–¢–µ–∫—É—â–µ–µ–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"
        """
        path_parts = []
        current_space = space
        
        # –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏, —Å–æ–±–∏—Ä–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è
        while current_space:
            path_parts.insert(0, current_space.title)
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            if current_space.parent_entity_uid:
                current_space = self.spaces_hierarchy.get(current_space.parent_entity_uid)
            else:
                break
        
        return "/".join(path_parts)

    async def get_space_members_bitrix_ids(self, space_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bitrix24"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            space_members = await self.kaiten_client.get_space_members(space_id)
            
            bitrix_ids = []
            for member in space_members:
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                kaiten_id = str(member.id)
                bitrix_id = self.user_mapping.get(kaiten_id)
                
                if bitrix_id:
                    bitrix_ids.append(bitrix_id)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.full_name} (ID: {kaiten_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
            
            logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(bitrix_ids)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}")
            return bitrix_ids
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ {space_id}: {e}")
            return []

    async def migrate_boards(self, limit: Optional[int] = None, board_id: Optional[int] = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ—Å–æ–∫ –∏–∑ Kaiten –≤ –≥—Ä—É–ø–ø—ã Bitrix24.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ)
            board_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ –¥–æ—Å–∫–∏)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –î–û–°–û–ö –ò–ó KAITEN –í BITRIX24")
        logger.info("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if limit and board_id:
            logger.warning("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã --limit –∏ --board-id –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --board-id")
            limit = None
            
        if board_id:
            logger.info(f"üéØ –†–µ–∂–∏–º: –º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏ ID {board_id}")
        elif limit:
            logger.info(f"üî¢ –†–µ–∂–∏–º: –º–∏–≥—Ä–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö {limit} –¥–æ—Å–æ–∫")
        else:
            logger.info("üîÑ –†–µ–∂–∏–º: –º–∏–≥—Ä–∞—Ü–∏—è –í–°–ï–• –¥–æ—Å–æ–∫")
        
        stats = {
            "processed": 0,
            "created": 0,
            "updated": 0,
            "errors": 0,
            "boards_migrated": 0,
            "members_added": 0
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not await self.load_user_mapping():
                return stats
            
            # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            if not await self.build_spaces_hierarchy():
                return stats
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ Bitrix24
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –∏–∑ Bitrix24...")
            existing_groups = await self.bitrix_client.get_workgroup_list()
            groups_map = {group['NAME']: group for group in existing_groups}
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(existing_groups)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø –≤ Bitrix24")
            
            # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ –∏—Ö –¥–æ—Å–∫–∏
            board_count = 0
            found_target_board = False  # –§–ª–∞–≥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏
            
            for space_uid, space in self.spaces_hierarchy.items():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                    boards = await self.kaiten_client.get_boards(space.id)
                    
                    if not boards:
                        logger.debug(f"üì≠ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ '{space.title}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å–æ–∫")
                        continue
                    
                    # –°—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                    space_path = self.build_space_path(space)
                    logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: '{space_path}' ({len(boards)} –¥–æ—Å–æ–∫)")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                    space_members = await self.get_space_members_bitrix_ids(space.id)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–æ—Å–∫—É –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                    for board in boards:
                        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π board_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å–∫–∏
                        if board_id and board.id != board_id:
                            continue
                            
                        if limit and board_count >= limit:
                            logger.info(f"üî¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {limit} –¥–æ—Å–æ–∫")
                            break
                        
                        board_count += 1
                        stats["processed"] += 1
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: –ü—É—Ç—å/–ö/–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É/–ù–∞–∑–≤–∞–Ω–∏–µ–î–æ—Å–∫–∏
                        group_name = f"{space_path}/{board.title}"
                        
                        logger.info(f"üîÑ [{board_count}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å–∫—É: '{group_name}'")
                        
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞
                            if group_name in groups_map:
                                logger.info(f"‚ôªÔ∏è –ì—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
                                group_id = str(groups_map[group_name]['ID'])
                                stats["updated"] += 1
                            else:
                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                                logger.info(f"‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É '{group_name}'...")
                                
                                group_data = {
                                    'NAME': group_name,
                                    'DESCRIPTION': f"–î–æ—Å–∫–∞ –∏–∑ Kaiten: {board.title}. –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {space_path}",
                                    'VISIBLE': 'Y',
                                    'OPENED': 'Y',
                                    'PROJECT': 'Y'  # –°–æ–∑–¥–∞–µ–º –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–Ω–±–∞–Ω–∞
                                }
                                
                                group_result = await self.bitrix_client.create_workgroup(group_data)
                                if group_result:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
                                    if isinstance(group_result, dict) and 'ID' in group_result:
                                        group_id = group_result['ID']
                                    else:
                                        group_id = str(group_result)
                                    
                                    logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group_name}' —Å ID: {group_id}")
                                    stats["created"] += 1
                                    groups_map[group_name] = {'ID': group_id, 'NAME': group_name}
                                else:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã '{group_name}'")
                                    stats["errors"] += 1
                                    continue
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–∫–∏ -> –≥—Ä—É–ø–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π ID)
                            self.board_mapping[str(board.id)] = str(group_id)
                            stats["boards_migrated"] += 1
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø—É
                            if space_members:
                                logger.info(f"üë• –î–æ–±–∞–≤–ª—è–µ–º {len(space_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É...")
                                
                                for user_id in space_members:
                                    try:
                                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID –≤ int –¥–ª—è API
                                        success = await self.bitrix_client.add_user_to_workgroup(int(group_id), int(user_id))
                                        if success:
                                            stats["members_added"] += 1
                                        else:
                                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø—É {group_id}")
                                    except Exception as e:
                                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                                
                                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É '{group_name}': {len(space_members)}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É '{group_name}'")
                            
                            # TODO: –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏ –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–¥–∞—á
                            # await self.migrate_board_columns(board.id, group_id)
                            
                        except Exception as e:
                            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å–∫–∏ '{board.title}': {e}")
                            stats["errors"] += 1
                        
                        # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å–∫—É, –≤—ã—Ö–æ–¥–∏–º
                        if board_id and board.id == board_id:
                            logger.info(f"‚úÖ –î–æ—Å–∫–∞ {board_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é")
                            found_target_board = True
                            break
                        
                        if limit and board_count >= limit:
                            break
                    
                    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å–∫—É, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
                    if found_target_board:
                        break
                        
                    if limit and board_count >= limit:
                        break
                        
                except Exception as e:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ '{space.title}': {e}")
                    stats["errors"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω board_id)
            if board_id and not found_target_board:
                logger.error(f"‚ùå –î–æ—Å–∫–∞ —Å ID {board_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Kaiten!")
                stats["errors"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫
            await self._save_board_mapping(stats)
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            await self._print_final_report(stats)
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ—Å–æ–∫: {e}")
            stats["errors"] += 1
        
        return stats

    async def _save_board_mapping(self, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
        mapping_file = Path(__file__).parent.parent / "mappings" / "board_mapping.json"
        mapping_file.parent.mkdir(exist_ok=True)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        existing_mapping = {}
        existing_stats = {"processed": 0, "created": 0, "updated": 0, "errors": 0, "boards_migrated": 0, "members_added": 0}
        
        if mapping_file.exists():
            try:
                with open(mapping_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                    existing_mapping = existing_data.get("mapping", {})
                    existing_stats = existing_data.get("stats", existing_stats)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫: {len(existing_mapping)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–æ—Å–æ–∫: {e}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        combined_mapping = {**existing_mapping, **self.board_mapping}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        combined_stats = {}
        for key in existing_stats.keys():
            combined_stats[key] = existing_stats.get(key, 0) + stats.get(key, 0)
        
        mapping_data = {
            "created_at": datetime.now().isoformat(),
            "description": "–ú–∞–ø–ø–∏–Ω–≥ ID –¥–æ—Å–æ–∫ Kaiten -> —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø Bitrix24",
            "stats": combined_stats,
            "mapping": combined_mapping
        }
        
        with open(mapping_file, 'w', encoding='utf-8') as f:
            json.dump(mapping_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –ú–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª: {mapping_file}")

    async def _print_final_report(self, stats: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –î–û–°–û–ö –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 80)
        
        logger.info("üìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        logger.info(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ—Å–æ–∫: {stats['processed']}")
        logger.info(f"  ‚ûï –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {stats['created']}")
        logger.info(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {stats['updated']}")
        logger.info(f"  üìã –î–æ—Å–æ–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['boards_migrated']}")
        logger.info(f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {stats['members_added']}")
        logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        logger.info("=" * 80)
        
        if stats["errors"] > 0:
            logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            logger.success("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–æ–∫ –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–¥–∞—á
    # async def migrate_board_columns(self, board_id: int, group_id: str):
    #     """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏ –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–¥–∞—á –≥—Ä—É–ø–ø—ã"""
    #     pass 