#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaiten API.
–£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import requests
import json
import os
from typing import Dict, List, Any, Optional
import time


class KaitenEnhancedFetcher:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaiten API"""
    
    def __init__(self, base_url: str, api_token: str):
        self.base_url = base_url.rstrip('/')
        self.api_token = api_token
        self.headers = {
            'Authorization': f'Bearer {api_token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        self.session = requests.Session()
        self.session.headers.update(self.headers)
        
        # –ö–µ—à –¥–ª—è ID-–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.space_ids = []
        self.board_ids = []
        self.card_ids = []
    
    def _make_request(self, endpoint: str, params: Optional[Dict] = None, method: str = 'GET') -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        
        try:
            print(f"  {method} -> {url}")
            
            if method.upper() == 'GET':
                response = self.session.get(url, params=params, timeout=30)
            elif method.upper() == 'POST':
                response = self.session.post(url, json=params, timeout=30)
            else:
                print(f"  –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
                return None
            
            print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code in [401, 403]:
                print(f"  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É")
                return None
            elif response.status_code == 404:
                print(f"  –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            elif response.status_code == 405:
                print(f"  –ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω")
                return None
            else:
                print(f"  –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"  –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return None

    def get_boards_from_spaces(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
        print("\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ===")
        
        if not self.space_ids:
            print("  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
            return []
        
        all_boards = []
        for space_id in self.space_ids[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            endpoint = f'api/v1/spaces/{space_id}/boards'
            data = self._make_request(endpoint)
            if data and isinstance(data, list):
                all_boards.extend(data)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º board_ids –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                for board in data:
                    if board.get('id'):
                        self.board_ids.append(board['id'])
        
        return all_boards[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π

    def get_context_dependent_resource(self, resource_name: str, base_endpoint: str, context_ids: List[str], context_param: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ—Å–∫–∞, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ —Ç.–¥.)"""
        print(f"\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ {resource_name} ===")
        
        if not context_ids:
            print(f"  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {context_param} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {resource_name}")
            return []
        
        all_items = []
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ context_id
        for context_id in context_ids[:3]:
            endpoint = f'{base_endpoint.format(context_id=context_id)}'
            data = self._make_request(endpoint)
            
            if data:
                items = data if isinstance(data, list) else data.get('data', [])
                if items:
                    all_items.extend(items)
                    break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
        
        return all_items[:10]



    def save_sample_data(self, data: List[Dict], filename: str, max_records: int = 10):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        if not data:
            print(f"  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {filename}")
            return
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ max_records –∑–∞–ø–∏—Å–µ–π
        sample_data = data[:max_records] if isinstance(data, list) else [data]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É kaiten
        script_dir = os.path.dirname(os.path.abspath(__file__))
        kaiten_dir = os.path.join(script_dir, 'kaiten')
        os.makedirs(kaiten_dir, exist_ok=True)
        
        filepath = os.path.join(kaiten_dir, filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(sample_data, f, ensure_ascii=False, indent=2)
            
            print(f"  ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sample_data)} –∑–∞–ø–∏—Å–µ–π –≤ {filepath}")
            
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filepath}: {e}")

    def fetch_main_resources(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        resources = {
            'spaces': 'api/v1/spaces',
            'cards': 'api/v1/cards?limit=10',
            'users': 'api/v1/users',
            'tags': 'api/v1/tags',
            'card_types': 'api/v1/card-types'
        }
        
        collected_data = {}
        
        for resource_name, endpoint in resources.items():
            print(f"\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ {resource_name} ===")
            data = self._make_request(endpoint)
            
            if data:
                items = data if isinstance(data, list) else data.get('data', data.get(resource_name, []))
                if items:
                    collected_data[resource_name] = items
                    self.save_sample_data(items, f'{resource_name}.json')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    if resource_name == 'spaces':
                        self.space_ids = [item.get('id') for item in items if item.get('id')]
                    elif resource_name == 'cards':
                        self.card_ids = [item.get('id') for item in items if item.get('id')]
            
            time.sleep(1)
        
        return collected_data

    def fetch_context_dependent_resources(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        collected_data = {}
        
        # –î–æ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        boards = self.get_boards_from_spaces()
        if boards:
            collected_data['boards'] = boards
            self.save_sample_data(boards, 'boards.json')
        
        # –†–µ—Å—É—Ä—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ—Å–∫–∞–º–∏
        board_resources = [
            ('columns', 'api/v1/boards/{context_id}/columns'),
            ('lanes', 'api/v1/boards/{context_id}/lanes'),
            ('subcolumns', 'api/v1/boards/{context_id}/subcolumns')
        ]
        
        for resource_name, endpoint_pattern in board_resources:
            items = self.get_context_dependent_resource(
                resource_name, endpoint_pattern, self.board_ids, 'board_ids'
            )
            if items:
                collected_data[resource_name] = items
                self.save_sample_data(items, f'{resource_name}.json')
            time.sleep(1)
        
        # –†–µ—Å—É—Ä—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        if self.card_ids:
            card_resources = [
                ('card_children', 'api/v1/cards/{context_id}/children'),
                ('card_checklists', 'api/v1/cards/{context_id}/checklists'),
                ('card_files', 'api/v1/cards/{context_id}/files')
            ]
            
            for resource_name, endpoint_pattern in card_resources:
                items = self.get_context_dependent_resource(
                    resource_name, endpoint_pattern, self.card_ids, 'card_ids'
                )
                if items:
                    collected_data[resource_name] = items
                    self.save_sample_data(items, f'{resource_name}.json')
                time.sleep(1)
        
        return collected_data




def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ñ–∞–π–ª–∞ Access.md
    BASE_URL = "https://imena.kaiten.ru"
    API_TOKEN = "f520225c-f92a-4499-96ab-87c1ce431ee1"
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaiten API")
    print(f"URL: {BASE_URL}")
    print(f"–¢–æ–∫–µ–Ω: {API_TOKEN[:10]}...")
    
    fetcher = KaitenEnhancedFetcher(BASE_URL, API_TOKEN)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    print("\n" + "="*60)
    print("–≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("="*60)
    
    main_data = fetcher.fetch_main_resources()
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    print("\n" + "="*60)
    print("–≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("="*60)
    
    context_data = fetcher.fetch_context_dependent_resources()
    

    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    
    all_data = {**main_data, **context_data}
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ API: {len(all_data)} —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤")
    for resource_name, data in all_data.items():
        count = len(data) if isinstance(data, list) else 1
        print(f"   ‚Ä¢ {resource_name}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ project-doc/data_samples/kaiten/")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    created_files = []
    script_dir = os.path.dirname(os.path.abspath(__file__))
    kaiten_dir = os.path.join(script_dir, 'kaiten')
    if os.path.exists(kaiten_dir):
        created_files = [f for f in os.listdir(kaiten_dir) if f.endswith('.json')]
    
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    for filename in sorted(created_files):
        print(f"   ‚úì {filename}")
    
    print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(created_files)} —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤!")


if __name__ == "__main__":
    main() 